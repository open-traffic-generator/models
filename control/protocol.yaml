openapi: 3.0.3
info:
  title: Control protocol models
  description: >-
    All control protocol schemas
  version: ^0.0.0
components:
  schemas:
    State.Protocol.All:
      description: >-
        Sets all configured protocols to `start` or `stop` state.
        
        Setting protocol state to `start` shall be a no-op if preceding `set_config` API call
        was made with `config.options.protocol_options.auto_start_all` set to `true` or if
        all the configured protocols are already started.
      type: object
      required:
        - state
      properties:
        state:
          description: >-
            Protocol states
          type: string
          x-field-uid: 1
          x-enum:
            start:
              x-field-uid: 1
            stop:
              x-field-uid: 2
    State.Protocol.Route:
      description: >-
        Sets the state of configured routes
      type: object
      required:
        - state
      properties:
        names:
          description: >-
            The names of device route objects to control.
            If no names are specified then all route objects that match the
            x-constraint will be affected.
          type: array
          items:
            type: string
          x-constraint:
          - '/components/schemas/Bgp.V4RouteRange/properties/name'
          - '/components/schemas/Bgp.V6RouteRange/properties/name'
          - '/components/schemas/Isis.V4RouteRange/properties/name'
          - '/components/schemas/Isis.V6RouteRange/properties/name'
          - '/components/schemas/Ospfv2.V4RouteRange/properties/name'
          x-field-uid: 1
        state:
          description: >-
            Route states
          type: string
          x-field-uid: 2
          x-enum:
            withdraw:
              x-field-uid: 1
            advertise:
              x-field-uid: 2
    State.Protocol.Lacp:
      description: >-
        Sets state of configured LACP
      type: object
      required:
        - choice
      properties:
        choice:
          type: string
          x-enum:
            admin:
              x-field-uid: 1
            member_ports:
              x-field-uid: 2
          x-field-uid: 1
        admin:
          $ref: '#/components/schemas/State.Protocol.Lacp.Admin'
          x-field-uid: 2
        member_ports:
          $ref: '#/components/schemas/State.Protocol.Lacp.MemberPorts'
          x-field-uid: 3
    State.Protocol.Lacp.Admin:
      description: >-
        Sets admin state of LACP configured on LAG members
      required:
        - state
      properties:
        lag_member_names:
          description: >-
            The names of LAG members (ports) for which the state has to be applied.
            An empty or null list will control all LAG members.
          type: array
          items:
            type: string
          x-constraint:
          - '/components/schemas/Port/properties/name'
          x-field-uid: 1
        state:
          description: >-
            The LACP Member admin state.
            'up' will send LACPDUs with 'sync' flag set on selected member ports.
            'down' will send LACPDUs with 'sync' flag unset on selected member ports.
          type: string
          x-field-uid: 2
          x-enum:
            up:
              x-field-uid: 1
            down:
              x-field-uid: 2
    State.Protocol.Lacp.MemberPorts:
      description: >-
        Sets state of LACP member ports configured on LAG.
      required:
        - state
      properties:
        lag_member_names:
          description: >-
            The names of LAG members (ports) for which the state has to be applied.
            An empty or null list will control all LAG members.
          type: array
          items:
            type: string
          x-constraint:
          - '/components/schemas/Port/properties/name'
          x-field-uid: 1
        state:
          description: >-
            The desired LACP member port state.
          type: string
          x-field-uid: 2
          x-enum:
            up:
              x-field-uid: 1
            down:
              x-field-uid: 2
    State.Protocol.Bgp:
      description: >-
        Sets state of configured BGP peers.
      type: object
      required:
        - choice
      properties:
        choice:
          type: string
          x-enum:
            peers:
              x-field-uid: 1
          x-field-uid: 1
        peers:
          $ref: '#/components/schemas/State.Protocol.Bgp.Peers'
          x-field-uid: 2
    State.Protocol.Bgp.Peers:
      description: >-
        Sets state of configured BGP peers.
      required:
        - state
      properties:
        peer_names:
          description: >-
            The names of BGP peers for which the state has to be applied.
            An empty or null list will control all BGP peers.
          type: array
          items:
            type: string
          x-constraint:
          - "/components/schemas/Bgp.V4Peer/properties/name"
          - "/components/schemas/Bgp.V6Peer/properties/name"
          x-field-uid: 1
        state:
          description: >-
            The desired state of BGP peer.
            If the desired state is 'up', underlying IP interface(s) would be brought up automatically (if not already up), would attempt to bring up the BGP session(s) and advertise route(s), if configured.
            If the desired state is 'down', BGP session(s) would be brought down. 
          type: string
          x-field-uid: 2
          x-enum:
            up:
              x-field-uid: 1
            down:
              x-field-uid: 2
    State.Protocol.Isis:
      description: >-
        Sets state of configured ISIS routers.
      type: object
      required:
        - choice
      properties:
        choice:
          type: string
          x-enum:
            routers:
              x-field-uid: 1
          x-field-uid: 1
        routers:
          $ref: '#/components/schemas/State.Protocol.Isis.Routers'
          x-field-uid: 2
    State.Protocol.Isis.Routers:
      description: >-
        Sets state of configured ISIS routers.
      required:
        - state
      properties:
        router_names:
          description: >-
            The names of ISIS routers for which the state has to be applied.
            An empty or null list will control all ISIS routers.
          type: array
          items:
            type: string
          x-constraint:
          - "/components/schemas/Device.IsisRouter/properties/name"
          x-field-uid: 1
        state:
          description: >-
            The desired state of ISIS router.
            If the desired state is 'up', would attempt to bring up the ISIS session(s) with respective peer(s) and advertise route(s), if configured.
            If the desired state is 'down', would bring down ISIS session(s) with respective peer(s). 
          type: string
          x-field-uid: 2
          x-enum:
            up:
              x-field-uid: 1
            down:
              x-field-uid: 2
    State.Protocol.Ospfv2:
      description: >-
        Sets state of configured OSPFv2 routers.
      type: object
      required:
        - choice
      properties:
        choice:
          type: string
          x-enum:
            routers:
              x-field-uid: 1
          x-field-uid: 1
        routers:
          $ref: '#/components/schemas/State.Protocol.Ospfv2.Routers'
          x-field-uid: 2
    State.Protocol.Ospfv2.Routers:
      description: >-
        Sets state of configured OSPFv2 routers.
      required:
        - state
      properties:
        router_names:
          description: >-
            The names of OSPFv2 routers for which the state has to be applied.
            An empty or null list will control all OSPFv2 routers.
          type: array
          items:
            type: string
          x-constraint:
          - "/components/schemas/Device.Ospfv2/properties/name"
          x-field-uid: 1
        state:
          description: >-
            The desired state of OSPFv2 router.
            If the desired state is 'up', would attempt to bring up the OSPFv2 session(s) with respective peer(s) and advertise route(s), if configured.
            If the desired state is 'down', would bring down OSPFv2 session(s) with respective peer(s). 
          type: string
          x-field-uid: 2
          x-enum:
            up:
              x-field-uid: 1
            down:
              x-field-uid: 2
    State.Protocol.Rocev2:
      description: >-
        Sets state of configured Rocev2 peers.
      type: object
      required:
        - choice
      properties:
        choice:
          type: string
          x-enum:
            peers:
              x-field-uid: 1
          x-field-uid: 1
        peers:
          $ref: '#/components/schemas/State.Protocol.Rocev2.Peers'
          x-field-uid: 2
    State.Protocol.Rocev2.Peers:
      description: >-
        Sets state of configured Rocev2 peers.
      required:
        - state
      properties:
        peer_names:
          description: >-
            The names of Rocev2 peers for which the state has to be applied.
            An empty or null list will control all Rocev2 peers.
          type: array
          items:
            type: string
          x-constraint:
          - "/components/schemas/Rocev2.V4Peer/properties/name"
          - "/components/schemas/Rocev2.V6Peer/properties/name"
          x-field-uid: 1
        state:
          description: >-
            The desired state of Rocev2 peer.
            If the desired state is 'up', underlying IP interface(s) would be brought up automatically (if not already up),
             would attempt to bring up the Rocev2 session(s).
            If the desired state is 'down', Rocev2 session(s) would be brought down. 
          type: string
          x-field-uid: 2
          x-enum:
            up:
              x-field-uid: 1
            down:
              x-field-uid: 2
    