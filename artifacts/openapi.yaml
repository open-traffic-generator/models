openapi: 3.0.3
info:
  title: Open Traffic Generator API
  description: "Open Traffic Generator API defines a model-driven, vendor-neutral\
    \ and standard \ninterface for emulating layer 2-7 network devices and generating\
    \ test traffic.\n\nContributions can be made in the following ways:\n- [open an\
    \ issue](https://github.com/open-traffic-generator/models/issues) in the models\
    \ repository\n- [fork the models repository](https://github.com/open-traffic-generator/models)\
    \ and submit a PR"
  version: 0.7.3
  contact:
    url: https://github.com/open-traffic-generator/models
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  x-model-guide: https://github.com/open-traffic-generator/models/blob/master/MODEL-GUIDE.md
servers:
- url: /
paths:
  /config:
    post:
      tags:
      - Configuration
      operationId: set_config
      description: |-
        Sets configuration resources on the traffic generator.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
      - Configuration
      operationId: get_config
      responses:
        '200':
          description: |-
            Config response from the traffic generator
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /control/transmit:
    post:
      tags:
      - Control
      operationId: set_transmit_state
      description: |-
        Updates the state of configuration resources on the traffic generator.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transmit.State'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /control/link:
    post:
      tags:
      - Control
      operationId: set_link_state
      description: |-
        Updates the state of configuration resources on the traffic generator.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Link.State'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /control/capture:
    post:
      tags:
      - Control
      operationId: set_capture_state
      description: |-
        Updates the state of configuration resources on the traffic generator.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Capture.State'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /control/flows:
    post:
      tags:
      - Control
      operationId: update_flows
      description: |-
        Updates flow properties without disruption of transmit state.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flows.Update'
      responses:
        '200':
          description: |-
            Response with updated Config from the traffic generator
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /control/routes:
    post:
      tags:
      - Control
      operationId: set_route_state
      description: |-
        Updates the state of configuration resources on the traffic generator.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route.State'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /control/ping:
    post:
      tags:
      - Control
      operationId: send_ping
      description: |-
        API to send an IPv4 and/or IPv6 ICMP Echo Request(s) between endpoints. For each endpoint 1 ping packet will be sent and API shall wait for ping response to either be successful or timeout. The API wait timeout for each request is 300ms.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ping.Request'
      responses:
        '200':
          description: |-
            Responses for Ping
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ping.Response'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /control/protocols:
    post:
      tags:
      - Control
      operationId: set_protocol_state
      description: |-
        Sets all configured protocols to `start` or `stop` state.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Protocol.State'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /results/metrics:
    description: |-
      Metrics API
    post:
      tags:
      - Metrics
      operationId: get_metrics
      requestBody:
        description: |-
          Request to traffic generator for metrics of choice
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metrics.Request'
      responses:
        '200':
          description: |-
            Response from traffic generator for chosen metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metrics.Response'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /results/states:
    description: |-
      States API
    post:
      tags:
      - States
      operationId: get_states
      requestBody:
        description: |-
          Request to traffic generator for states of choice
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/States.Request'
      responses:
        '200':
          description: |-
            Response from traffic generator for chosen states
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/States.Response'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /results/capture:
    description: |-
      Capture results API
    post:
      tags:
      - Capture
      operationId: get_capture
      requestBody:
        description: |-
          Capture results request to the traffic generator.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Capture.Request'
      responses:
        '200':
          description: "Capture results response from the traffic generator. "
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  responses:
    Success:
      description: "The request has succeeded with no application content but the\
        \ server \nmay return a list of detailed warnings."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response.Warning'
    BadRequest:
      description: "This indicates that the server cannot or will not process the\
        \ request \ndue to something that is perceived to be a client error.\nAdditional\
        \ details are in the errors."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response.Error'
    InternalServerError:
      description: "This indicates that the server encountered an unexpected condition\
        \ that \nprevented it from fulfilling the request.\nAdditional details are\
        \ in the errors."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response.Error'
  schemas:
    Config:
      description: |-
        A container for all models that are part of the configuration.
      type: object
      properties:
        ports:
          description: |-
            The ports that will be configured on the traffic generator.
          type: array
          items:
            $ref: '#/components/schemas/Port'
        lags:
          description: |-
            The LAGs that will be configured on the traffic generator.
          type: array
          items:
            $ref: '#/components/schemas/Lag'
        layer1:
          description: |-
            The layer1 settings that will be configured on the traffic generator.
          type: array
          items:
            $ref: '#/components/schemas/Layer1'
        captures:
          description: |-
            The capture settings that will be configured on the traffic generator.
          type: array
          items:
            $ref: '#/components/schemas/Capture'
        devices:
          description: "The emulated devices that will be configured on the traffic\
            \ generator.\nEach device contains configurations for network interfaces\
            \ and \nprotocols running on top of those interfaces."
          type: array
          items:
            $ref: '#/components/schemas/Device'
        flows:
          description: |-
            The flows that will be configured on the traffic generator.
          type: array
          items:
            $ref: '#/components/schemas/Flow'
        events:
          $ref: '#/components/schemas/Event'
        options:
          $ref: '#/components/schemas/Config.Options'
    Config.Options:
      description: |-
        Global configuration options.
      type: object
      properties:
        port_options:
          $ref: '#/components/schemas/Port.Options'
    Port:
      description: |-
        An abstract test port.
      type: object
      properties:
        location:
          description: |-
            The location of a test port.  It is the endpoint where packets will emit from.
            Test port locations can be the following:
              - physical appliance with multiple ports
              - physical chassis with multiple cards and ports
              - local interface
              - virtual machine, docker container, kubernetes cluster

            The test port location format is implementation specific. Use the /results/capabilities API to determine what formats an  implementation supports for the location property.
            Get the configured location state by using the /results/port API.
          type: string
        name:
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
      required:
      - name
    Port.Options:
      description: "Common port options that apply to all configured Port objects. "
      type: object
      properties:
        location_preemption:
          description: |-
            Preempt all the test port locations as defined by the  Port.Port.properties.location. If the test ports defined by their location values are in use and  this value is true, the test ports will be preempted.
          type: boolean
          default: false
    Lag:
      description: |-
        The container for multiple LAG ports
      type: object
      properties:
        ports:
          type: array
          items:
            $ref: '#/components/schemas/Lag.Port'
        name:
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
      required:
      - name
    Lag.Port:
      description: |-
        The container for a port's ethernet interface and LAG protocol settings
      type: object
      required:
      - port_name
      - protocol
      - ethernet
      properties:
        port_name:
          description: "The name of a port object that will be part of the LAG. \n\
            \nx-constraint:\n- /components/schemas/Port/properties/name\n"
          type: string
          x-constraint:
          - /components/schemas/Port/properties/name
        protocol:
          $ref: '#/components/schemas/Lag.Protocol'
        ethernet:
          $ref: '#/components/schemas/Device.EthernetBase'
    Lag.Protocol:
      type: object
      properties:
        choice:
          description: |-
            The type of LAG protocol.
          type: string
          enum:
          - lacp
          - static
          default: lacp
        lacp:
          $ref: '#/components/schemas/Lag.Lacp'
        static:
          $ref: '#/components/schemas/Lag.Static'
    Lag.Static:
      description: |-
        The container for static link aggregation protocol settings.
      type: object
      properties:
        lag_id:
          description: |-
            The static lag id
          type: integer
          minimum: 0
          maximum: 65535
          default: 0
    Lag.Lacp:
      description: |-
        The container for link aggregation control protocol settings.
      type: object
      properties:
        actor_key:
          description: |-
            The actor key
          type: integer
          minimum: 0
          maximum: 65535
          default: 0
        actor_port_number:
          description: |-
            The actor port number
          type: integer
          minimum: 0
          maximum: 65535
          default: 0
        actor_port_priority:
          description: |-
            The actor port priority
          type: integer
          minimum: 0
          maximum: 65535
          default: 1
        actor_system_id:
          description: |-
            The actor system id
          type: string
          format: mac
          default: 00:00:00:00:00:00
        actor_system_priority:
          description: |-
            The actor system priority
          type: integer
          minimum: 0
          maximum: 65535
          default: 0
        lacpdu_periodic_time_interval:
          x-constants:
            fast: 1
            slow: 30
            auto: 0
          description: |-
            This field defines how frequently LACPDUs are sent to the link partner
          type: integer
          minimum: 0
          maximum: 65535
          default: 0
        lacpdu_timeout:
          x-constants:
            short: 3
            long: 90
            auto: 0
          description: |-
            This timer is used to detect whether received protocol information has expired
          type: integer
          minimum: 0
          maximum: 65535
          default: 0
        actor_activity:
          description: |-
            Sets the value of LACP actor activity as either passive or active
            Passive indicates the port's preference for not transmitting  LACPDUs unless its partner's control is Active
            Active indicates the port's preference to participate in the  protocol regardless of the partner's control value
          type: string
          enum:
          - passive
          - active
          default: active
    Device.EthernetBase:
      description: |-
        Base Ethernet interface.
      type: object
      required:
      - mac
      - name
      properties:
        mac:
          description: |-
            Media Access Control address.
          type: string
          format: mac
        mtu:
          description: |-
            Maximum Transmission Unit.
          type: integer
          minimum: 0
          maximum: 65535
          default: 1500
        vlans:
          description: |-
            List of VLANs
          type: array
          items:
            $ref: '#/components/schemas/Device.Vlan'
        name:
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
    Device.Ethernet:
      description: |-
        An Ethernet interface with IPv4 and IPv6 addresses.
        Base Ethernet interface.
      type: object
      required:
      - port_name
      - mac
      - name
      properties:
        port_name:
          description: |
            The unique name of a Port or a LAG that will emulate this interface.

            x-constraint:
            - /components/schemas/Port/properties/name
            - /components/schemas/Lag/properties/name
          type: string
          x-constraint:
          - /components/schemas/Port/properties/name
          - /components/schemas/Lag/properties/name
        ipv4_addresses:
          description: "List of IPv4 addresses and their gateways. "
          type: array
          items:
            $ref: '#/components/schemas/Device.Ipv4'
        ipv6_addresses:
          description: |-
            List of global IPv6 addresses and their gateways.
            The Link Local IPv6 address will be automatically generated.
          type: array
          items:
            $ref: '#/components/schemas/Device.Ipv6'
        mac:
          description: |-
            Media Access Control address.
          type: string
          format: mac
        mtu:
          description: |-
            Maximum Transmission Unit.
          type: integer
          minimum: 0
          maximum: 65535
          default: 1500
        vlans:
          description: |-
            List of VLANs
          type: array
          items:
            $ref: '#/components/schemas/Device.Vlan'
        name:
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
    Device.Vlan:
      description: |-
        Emulated VLAN protocol.
      type: object
      properties:
        tpid:
          description: |-
            Tag protocol identifier
          type: string
          enum:
          - x8100
          - x88A8
          - x9100
          - x9200
          - x9300
          default: x8100
        priority:
          description: |-
            Priority code point
          type: integer
          minimum: 0
          maximum: 3
          default: 0
        id:
          description: |-
            VLAN identifier
          type: integer
          minimum: 0
          maximum: 4095
          default: 1
        name:
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
      required:
      - name
    Device.Ipv4:
      description: |-
        An IPv4 interface with gateway
        A base IPv4 interface.
      type: object
      required:
      - gateway
      - address
      - name
      properties:
        gateway:
          description: |-
            The IPv4 address of the gateway
          type: string
          format: ipv4
        address:
          description: |-
            The IPv4 address
          type: string
          format: ipv4
        prefix:
          description: |-
            The prefix of the IPv4 address.
          type: integer
          minimum: 1
          maximum: 32
          default: 24
        name:
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
    Device.Ipv4Loopback:
      description: |-
        An IPv4 Loopback interface.
      type: object
      required:
      - eth_name
      - name
      properties:
        eth_name:
          description: |
            The unique name of the Ethernet interface behind which this Loopback  interface will be created.

            x-constraint:
            - /components/schemas/Device.Ethernet/properties/name
          type: string
          x-constraint:
          - /components/schemas/Device.Ethernet/properties/name
        address:
          description: |-
            The IPv4 Loopback address with prefix length of 32.
          type: string
          format: ipv4
          default: 0.0.0.0
        name:
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
    Device.Ipv6:
      description: |-
        Status: under-review
        An IPv6 interface with gateway.
        A base IPv6 interface.
      type: object
      required:
      - gateway
      - address
      - name
      properties:
        gateway:
          description: |-
            The IPv6 gateway address.
          type: string
          format: ipv6
        address:
          description: |-
            The IPv6 address.
          type: string
          format: ipv6
        prefix:
          description: |-
            The network prefix.
          type: integer
          minimum: 1
          maximum: 128
          default: 64
        name:
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
      x-status: under-review
    Device.Ipv6Loopback:
      description: |-
        An IPv6 Loopback interface
      type: object
      required:
      - eth_name
      - name
      properties:
        eth_name:
          description: "The unique name of the Ethernet interface behind which this\
            \ Loopback \n interface will be created.\n\nx-constraint:\n- /components/schemas/Device.Ethernet/properties/name\n"
          type: string
          x-constraint:
          - /components/schemas/Device.Ethernet/properties/name
        address:
          description: |-
            The IPv6 Loopback address with prefix length of 128.
          type: string
          format: ipv6
          default: ::0
        name:
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
    Layer1:
      description: |-
        A container for layer1 settings.
      type: object
      required:
      - port_names
      - name
      properties:
        port_names:
          description: "A list of unique names of port objects that will share the\n\
            choice settings. \n\nx-constraint:\n- /components/schemas/Port/properties/name\n"
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Port/properties/name
        speed:
          description: |-
            Set the speed if supported.
          type: string
          enum:
          - speed_10_fd_mbps
          - speed_10_hd_mbps
          - speed_100_fd_mbps
          - speed_100_hd_mbps
          - speed_1_gbps
          - speed_10_gbps
          - speed_25_gbps
          - speed_40_gbps
          - speed_50_gbps
          - speed_100_gbps
          - speed_200_gbps
          - speed_400_gbps
          default: speed_10_gbps
        media:
          description: |-
            Set the type of media interface if supported.
          type: string
          enum:
          - copper
          - fiber
          - sgmii
        promiscuous:
          description: |-
            Enable promiscuous mode if supported.
          type: boolean
          default: true
        mtu:
          description: |-
            Set the maximum transmission unit size if supported.
          type: integer
          minimum: 64
          maximum: 9000
          default: 1500
        ieee_media_defaults:
          description: |-
            Set to true to override the auto_negotiate, link_training
            and rs_fec settings for gigabit ethernet interfaces.
          type: boolean
        auto_negotiate:
          description: |-
            Enable/disable auto negotiation.
          type: boolean
        auto_negotiation:
          $ref: '#/components/schemas/Layer1.AutoNegotiation'
        flow_control:
          $ref: '#/components/schemas/Layer1.FlowControl'
        name:
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
    Layer1.AutoNegotiation:
      description: |-
        Configuration for auto negotiation settings
      type: object
      properties:
        advertise_1000_mbps:
          description: |-
            If auto_negotiate is true and the interface supports this option
            then this speed will be advertised.
          type: boolean
          default: true
        advertise_100_fd_mbps:
          description: |-
            If auto_negotiate is true and the interface supports this option
            then this speed will be advertised.
          type: boolean
          default: true
        advertise_100_hd_mbps:
          description: |-
            If auto_negotiate is true and the interface supports this option
            then this speed will be advertised.
          type: boolean
          default: true
        advertise_10_fd_mbps:
          description: |-
            If auto_negotiate is true and the interface supports this option
            then this speed will be advertised.
          type: boolean
          default: true
        advertise_10_hd_mbps:
          description: |-
            If auto_negotiate is true and the interface supports this option
            then this speed will be advertised.
          type: boolean
          default: true
        link_training:
          description: |-
            Enable/disable gigabit ethernet link training.
          type: boolean
          default: false
        rs_fec:
          description: |-
            Enable/disable gigabit ethernet reed solomon forward error correction (RS FEC).
          type: boolean
          default: false
    Layer1.FlowControl:
      description: |-
        A container for layer1 receive flow control settings.
        To enable flow control settings on ports this object must be a valid
        object not a null value.
      type: object
      properties:
        directed_address:
          description: |-
            The 48bit mac address that the layer1 port names will listen on
            for a directed pause.
          type: string
          format: mac
          default: 01:80:C2:00:00:01
        choice:
          description: |-
            The type of priority flow control.
          type: string
          enum:
          - ieee_802_1qbb
          - ieee_802_3x
          default: ieee_802_1qbb
        ieee_802_1qbb:
          $ref: '#/components/schemas/Layer1.Ieee8021qbb'
        ieee_802_3x:
          $ref: '#/components/schemas/Layer1.Ieee8023x'
    Layer1.Ieee8023x:
      description: |-
        A container for ieee 802.3x rx pause settings
      type: object
    Layer1.Ieee8021qbb:
      description: "These settings enhance the existing 802.3x pause priority capabilities\
        \ \nto enable flow control based on 802.1p priorities (classes of service). "
      type: object
      properties:
        pfc_delay:
          description: "The upper limit on the transmit time of a queue after receiving\
            \ a \nmessage to pause a specified priority.\nA value of 0 or null indicates\
            \ that pfc delay will not be enabled. "
          type: integer
          default: 0
        pfc_class_0:
          description: |-
            The valid values are null, 0 - 7.
            A null value indicates there is no setting for this pfc class.
          type: integer
          default: 0
        pfc_class_1:
          description: |-
            The valid values are null, 0 - 7.
            A null value indicates there is no setting for this pfc class.
          type: integer
          default: 1
        pfc_class_2:
          description: |-
            The valid values are null, 0 - 7.
            A null value indicates there is no setting for this pfc class.
          type: integer
          default: 2
        pfc_class_3:
          description: |-
            The valid values are null, 0 - 7.
            A null value indicates there is no setting for this pfc class.
          type: integer
          default: 3
        pfc_class_4:
          description: |-
            The valid values are null, 0 - 7.
            A null value indicates there is no setting for this pfc class.
          type: integer
          default: 4
        pfc_class_5:
          description: |-
            The valid values are null, 0 - 7.
            A null value indicates there is no setting for this pfc class.
          type: integer
          default: 5
        pfc_class_6:
          description: |-
            The valid values are null, 0 - 7.
            A null value indicates there is no setting for this pfc class.
          type: integer
          default: 6
        pfc_class_7:
          description: |-
            The valid values are null, 0 - 7.
            A null value indicates there is no setting for this pfc class.
          type: integer
          default: 7
    Capture:
      x-status: under-review
      description: |-
        Status: under-review
        Configuration for capture settings.
      type: object
      required:
      - port_names
      - name
      properties:
        port_names:
          description: |
            The unique names of ports that the capture settings will apply to. Port_names cannot be duplicated between capture objects.

            x-constraint:
            - /components/schemas/Port/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Port/properties/name
        filters:
          description: |-
            A list of filters to apply to the capturing ports. If no filters are specified then all packets will be captured. A capture can have multiple filters. The number of filters supported is determined by the implementation which can be retrieved using the capabilities API.
            When multiple filters are specified the capture implementation  must && (and) all the filters.
          type: array
          items:
            $ref: '#/components/schemas/Capture.Filter'
        overwrite:
          description: |-
            Overwrite the capture buffer.
          type: boolean
          default: true
        packet_size:
          description: |-
            The maximum size of each captured packet. If no value is specified or it is null then the entire packet will be captured.
          type: integer
        format:
          description: |-
            The format of the capture file.
          type: string
          enum:
          - pcap
          - pcapng
          default: pcap
        name:
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
    Capture.Filter:
      description: |-
        Configuration for capture filters
      type: object
      properties:
        choice:
          description: |-
            The type of capture filter.
          type: string
          enum:
          - custom
          - ethernet
          - vlan
          - ipv4
          - ipv6
          default: custom
        custom:
          description: |-
            Offset from last filter in the list. If no filters are present it is offset from position 0. Multiple custom filters can be present, the length of each custom filter is the length of the value being filtered.
          $ref: '#/components/schemas/Capture.Custom'
        ethernet:
          $ref: '#/components/schemas/Capture.Ethernet'
        vlan:
          $ref: '#/components/schemas/Capture.Vlan'
        ipv4:
          $ref: '#/components/schemas/Capture.Ipv4'
        ipv6:
          $ref: '#/components/schemas/Capture.Ipv6'
    Capture.Custom:
      properties:
        offset:
          description: |-
            The bit offset of field to filter on
          type: integer
          default: 0
        bit_length:
          description: |-
            The bit length of field to filter on
          type: integer
          default: 8
        value:
          type: string
          format: hex
          default: '00'
        mask:
          type: string
          format: hex
          default: '00'
        negate:
          type: boolean
          default: false
      type: object
    Capture.Field:
      type: object
      properties:
        value:
          type: string
          format: hex
          default: '00'
        mask:
          type: string
          format: hex
          default: '00'
        negate:
          type: boolean
          default: false
    Capture.Ethernet:
      type: object
      properties:
        src:
          $ref: '#/components/schemas/Capture.Field'
        dst:
          $ref: '#/components/schemas/Capture.Field'
        ether_type:
          $ref: '#/components/schemas/Capture.Field'
        pfc_queue:
          $ref: '#/components/schemas/Capture.Field'
    Capture.Vlan:
      type: object
      properties:
        priority:
          $ref: '#/components/schemas/Capture.Field'
        cfi:
          $ref: '#/components/schemas/Capture.Field'
        id:
          $ref: '#/components/schemas/Capture.Field'
        protocol:
          $ref: '#/components/schemas/Capture.Field'
    Capture.Ipv4:
      type: object
      properties:
        version:
          $ref: '#/components/schemas/Capture.Field'
        header_length:
          $ref: '#/components/schemas/Capture.Field'
        priority:
          $ref: '#/components/schemas/Capture.Field'
        total_length:
          $ref: '#/components/schemas/Capture.Field'
        identification:
          $ref: '#/components/schemas/Capture.Field'
        reserved:
          $ref: '#/components/schemas/Capture.Field'
        dont_fragment:
          $ref: '#/components/schemas/Capture.Field'
        more_fragments:
          $ref: '#/components/schemas/Capture.Field'
        fragment_offset:
          $ref: '#/components/schemas/Capture.Field'
        time_to_live:
          $ref: '#/components/schemas/Capture.Field'
        protocol:
          $ref: '#/components/schemas/Capture.Field'
        header_checksum:
          $ref: '#/components/schemas/Capture.Field'
        src:
          $ref: '#/components/schemas/Capture.Field'
        dst:
          $ref: '#/components/schemas/Capture.Field'
    Capture.Ipv6:
      type: object
      properties:
        version:
          $ref: '#/components/schemas/Capture.Field'
        traffic_class:
          $ref: '#/components/schemas/Capture.Field'
        flow_label:
          $ref: '#/components/schemas/Capture.Field'
        payload_length:
          $ref: '#/components/schemas/Capture.Field'
        next_header:
          $ref: '#/components/schemas/Capture.Field'
        hop_limit:
          $ref: '#/components/schemas/Capture.Field'
        src:
          $ref: '#/components/schemas/Capture.Field'
        dst:
          $ref: '#/components/schemas/Capture.Field'
    Device:
      description: |-
        A container for emulated interfaces, loopback interfaces and protocol configurations.
      type: object
      properties:
        ethernets:
          description: |-
            Ethernet configuration for one or more emulated network interfaces.
          type: array
          items:
            $ref: '#/components/schemas/Device.Ethernet'
        ipv4_loopbacks:
          description: |-
            IPv4 Loopback interface that can be attached to an Ethernet in the same device  or to an Ethernet in another device.
          type: array
          items:
            $ref: '#/components/schemas/Device.Ipv4Loopback'
        ipv6_loopbacks:
          description: |-
            IPv6 Loopback interface that can be attached to an Ethernet in the same device  or to an Ethernet in another device.
          type: array
          items:
            $ref: '#/components/schemas/Device.Ipv6Loopback'
        isis:
          description: |-
            The properties of an IS-IS router and its children,  such as IS-IS interfaces and route ranges.
          $ref: '#/components/schemas/Device.IsisRouter'
        bgp:
          description: |-
            The properties of BGP router and its children,  such as BGPv4, BGPv6 peers and their route ranges.
          $ref: '#/components/schemas/Device.BgpRouter'
        name:
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
      required:
      - name
    Device.IsisRouter:
      x-status: under-review
      description: |-
        Status: under-review
        A container of properties for an ISIS router and its interfaces.
      type: object
      required:
      - system_id
      - interfaces
      - name
      properties:
        instance:
          description: |-
            This contains the properties of a Multi-Instance-capable routers or MI-RTR. Each router can emulate one ISIS instance at a time.
          $ref: '#/components/schemas/Device.IsisMultiInstance'
        system_id:
          description: |-
            The System ID for this emulated ISIS router, e.g. "640100010000".
          type: string
          format: hex
        interfaces:
          description: |-
            List of ISIS interfaces for this router.
          type: array
          items:
            $ref: '#/components/schemas/Isis.Interface'
        basic:
          description: "Contains basic properties of an ISIS Router. "
          $ref: '#/components/schemas/Isis.Basic'
        advanced:
          description: |-
            Contains advance properties of an ISIS Router..
          $ref: '#/components/schemas/Isis.Advanced'
        router_auth:
          description: |-
            ISIS Router authentication properties.
          $ref: '#/components/schemas/Isis.Authentication'
        v4_routes:
          description: |-
            Emulated ISIS IPv4 routes.
          type: array
          items:
            $ref: '#/components/schemas/Isis.V4RouteRange'
        v6_routes:
          description: |-
            Emulated ISIS IPv6 routes.
          type: array
          items:
            $ref: '#/components/schemas/Isis.V6RouteRange'
        name:
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
    Device.IsisMultiInstance:
      x-status: under-review
      description: "Status: under-review\nThis container properties of an Multi-Instance-capable\
        \ router (MI-RTR). "
      type: object
      properties:
        iid:
          description: |-
            Instance Identifier (IID) TLV will associate a PDU with an ISIS instance  by using a unique 16-bit number and including one or more  Instance-Specific Topology Identifiers (ITIDs).
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        itids:
          description: |-
            This contains one or more ITIDs that will be advertised in IID TLV.
          type: array
          items:
            type: integer
            default: 0
            minimum: 0
            maximum: 65535
    Isis.Interface:
      x-status: under-review
      description: |-
        Status: under-review
        Configuration for single ISIS interface.
      type: object
      required:
      - eth_name
      - name
      properties:
        eth_name:
          description: "The unique name of the Ethernet interface on which ISIS is\
            \ running. Two ISIS interfaces cannot share the same Ethernet.       \
            \  \n\nx-constraint:\n- /components/schemas/Device.Ethernet/properties/name\n"
          type: string
          x-constraint:
          - /components/schemas/Device.Ethernet/properties/name
        metric:
          description: |-
            The default metric cost for the interface.
          type: integer
          default: 10
        network_type:
          description: "The type of network link. "
          type: string
          enum:
          - broadcast
          - point_to_point
          default: broadcast
        level_type:
          description: "This indicates whether this router is participating in Level-1\
            \ (L1), \nLevel-2 (L2) or both L1 and L2 domains on this interface."
          type: string
          enum:
          - level_1
          - level_2
          - level_1_2
          default: level_2
        l1_settings:
          description: |-
            Settings of Level 1 Hello.
          $ref: '#/components/schemas/IsisInterface.Level'
        l2_settings:
          description: |-
            Settings of Level 2 Hello.
          $ref: '#/components/schemas/IsisInterface.Level'
        multi_topology_ids:
          description: |-
            Contains the properties of multiple topologies.
          type: array
          items:
            $ref: '#/components/schemas/Isis.MT'
        traffic_engineering:
          description: |-
            Contains a list of Traffic Engineering attributes.
          type: array
          items:
            $ref: '#/components/schemas/LinkState.TE'
        authentication:
          description: |-
            The Circuit authentication method used for the interfaces on this emulated ISIS v4/v6 router.
          $ref: '#/components/schemas/IsisInterface.Authentication'
        advanced:
          description: |-
            Optional container for advanced interface properties.
          $ref: '#/components/schemas/IsisInterface.Advanced'
        link_protection:
          description: |-
            Link protection on the ISIS link between two interfaces.
          $ref: '#/components/schemas/IsisInterface.LinkProtection'
        srlg_values:
          description: |-
            This contains list of SRLG values for the link between two interfaces.
          type: array
          items:
            type: integer
            default: 0
        name:
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
    IsisInterface.Level:
      description: |-
        Configuration for the properties of Level 1 Hello.
      type: object
      properties:
        priority:
          description: |-
            The Priority setting in Level 1 LAN Hellos for Designated Router election.
          type: integer
          default: 0
        hello_interval:
          description: |-
            The Hello interval for Level 1 Hello messages, in seconds.
          type: integer
          default: 10
        dead_interval:
          description: |-
            The Dead (Holding Time) interval for Level 1 Hello messages, in seconds.
          type: integer
          default: 30
    Isis.MT:
      x-status: under-review
      description: |-
        Status: under-review
        Configuration of properties per interface per topology when multiple topologies are configured in an ISIS router.
        in a ISIS router.
      type: object
      properties:
        mt_id:
          description: |-
            The Multi Topology ID for one of the topologies supported on the ISIS interface.
          type: integer
          minimum: 0
          maximum: 65535
          default: 0
        link_metric:
          description: |-
            Specifies the link metric for this topology on the ISIS interface.
          type: integer
          default: 10
          minimum: 0
          maximum: 16777215
    LinkState.TE:
      x-status: under-review
      description: |-
        Status: under-review
        A container for Traffic Engineering properties on a interface.
      type: object
      properties:
        administrative_group:
          description: "The Administrative group sub-TLV (sub-TLV 3). It is a 4-octet\
            \ \nuser-defined bit mask used to assign administrative group numbers\
            \ \nto the interface, for use in assigning colors and resource classes.\
            \ \nEach set bit corresponds to a single administrative group for this\
            \ \ninterface. The settings translate into Group numbers, which range\
            \ \nfrom 0 to 31 (integers)."
          type: string
          format: hex
          default: '00000000'
        metric_level:
          description: |-
            The user-assigned link metric for Traffic Engineering.
          type: integer
          format: int64
          minimum: 0
          maximum: 4261412864
          default: 0
        max_bandwith:
          description: "The maximum link bandwidth (sub-TLV 9) in bytes/sec allowed\
            \ for this \nlink for a direction."
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          default: 125000000
        max_reservable_bandwidth:
          description: "The maximum link bandwidth (sub-TLV 10) in bytes/sec allowed\
            \ for this \nlink in a direction."
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          default: 125000000
        priority_bandwidths:
          description: |-
            Configuration of bandwidths of priority 0 through priority 7.
          $ref: '#/components/schemas/LinkState.priorityBandwidths'
    LinkState.priorityBandwidths:
      description: "Specifies the amount of bandwidth that can be reserved with a\
        \ setup priority of 0 \nthrough 7, arranged in increasing order with priority\
        \ 0 having highest priority. \nIn ISIS, this is sent in sub-TLV (11) of Extended\
        \ IS Reachability TLV. "
      type: object
      properties:
        pb0:
          description: |-
            Specifies the amount of bandwidth that can be reserved for the Priority 0.
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          default: 125000000
        pb1:
          description: |-
            Specifies the amount of bandwidth that can be reserved for the Priority 1.
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          default: 125000000
        pb2:
          description: |-
            Specify the amount of bandwidth that can be reserved for the Priority 2.
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          default: 125000000
        pb3:
          description: |-
            Specifies the amount of bandwidth that can be reserved for the Priority 3.
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          default: 125000000
        pb4:
          description: |-
            Specifies the amount of bandwidth that can be reserved for the Priority 4.
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          default: 125000000
        pb5:
          description: |-
            Specifies the amount of bandwidth that can be reserved for the Priority 5.
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          default: 125000000
        pb6:
          description: |-
            Specifies the amount of bandwidth that can be reserved for the Priority 6.
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          default: 125000000
        pb7:
          description: |-
            Specifies the amount of bandwidth that can be reserved for the Priority 7.
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          default: 125000000
    IsisInterface.Authentication:
      description: |-
        Optional container for circuit authentication properties.
      type: object
      required:
      - auth_type
      properties:
        auth_type:
          description: |-
            The circuit authentication method.
          type: string
          enum:
          - md5
          - password
        md5:
          description: |-
            MD5 key to be used for authentication.
          type: string
          minLength: 0
          maxLength: 255
        password:
          description: |-
            The password, in clear text, to be used for Authentication.
          type: string
          minLength: 0
          maxLength: 255
    IsisInterface.Advanced:
      description: |-
        Optional container for advanced interface properties.
      type: object
      properties:
        auto_adjust_mtu:
          description: "If a padded Hello message is received on the interface, the\
            \ length of \nthe Hello packets sent out on that interface is adjusted\
            \ to match."
          type: boolean
          default: true
        auto_adjust_area:
          description: "If a Level 1 Hello is received on this emulated router for\
            \ an area \nnot currently in its area list, an area from the received\
            \ Hello is \nadded to that list. This ensures an area match for all future\
            \ \nLevel 1 Hellos from the source L1 router."
          type: boolean
          default: true
        auto_adjust_supported_protocols:
          description: "If a Hello message listing supported protocols is received\
            \ on this \nemulated router, the supported protocols advertised by this\
            \ router \nare changed to match exactly."
          type: boolean
          default: false
        enable_3way_handshake:
          description: |-
            If it is true, the Point-to-Point circuit will include 3-way TLV in its Point-to-Point IIH  and attempt to establish the adjacency as specified in RFC 5303. This field is not applicable if network_type is set to 'broadcast' type in ISIS interface.
          type: boolean
          default: true
    IsisInterface.LinkProtection:
      description: |-
        Optional container for the link protection sub TLV (type 20).
      type: object
      properties:
        extra_traffic:
          description: |-
            Enable this to protect other link or links. LSPs on a link of this type are lost
            if any of the links fail.
          type: boolean
          default: false
        unprotected:
          description: "Enabling this signifies that there is no other link protecting\
            \ this \nlink. LSPs on a link of this type are lost if the link fails."
          type: boolean
          default: false
        shared:
          description: "Enable this to share the Extra Traffic links between one or\
            \ more \nlinks of type Shared.There are one or more disjoint links of\
            \ type \nExtra Traffic that are protecting this link."
          type: boolean
          default: false
        dedicated_1_to_1:
          description: "Enabling this signifies that there is one dedicated disjoint\
            \ link \nof type Extra Traffic that is protecting this link."
          type: boolean
          default: false
        dedicated_1_plus_1:
          description: "Enabling this signifies that a dedicated disjoint link is\
            \ protecting \nthis link. However, the protecting link is not advertised\
            \ in the \nlink state database and is therefore not available for the\
            \ routing \nof LSPs."
          type: boolean
          default: false
        enhanced:
          description: "Enabling this signifies that a protection scheme that is more\
            \ \nreliable than Dedicated 1+1."
          type: boolean
          default: false
        reserved_40:
          description: "This is a Protection Scheme with value 0x40. "
          type: boolean
          default: false
        reserved_80:
          description: "This is a Protection Scheme with value 0x80. "
          type: boolean
          default: false
    Isis.Basic:
      description: |-
        This contains ISIS router basic properties.
      type: object
      properties:
        ipv4_te_router_id:
          description: "IPv4 Traffic Engineering(TE) router id. This address should\
            \ be configured as an IPv4 Loopback address in 'ipv4_loopbacks' in the\
            \ Device.      "
          type: string
          format: ipv4
        hostname:
          description: |-
            Host name for the router. The host name is transmitted in all the packets sent from the router.
          type: string
        enable_wide_metric:
          description: |-
            When set to true, it allows sending of more detailed metric information  for the routes using 32-bit wide values using TLV 135 IP reachability and  more detailed reachability information for IS reachability by using TLV 22.  The detailed usage is described in RFC3784.
          type: boolean
          default: true
    Isis.Advanced:
      description: |-
        Contains ISIS router advanced properties.
      type: object
      properties:
        enable_hello_padding:
          description: |-
            It enables padding of Hello message to MTU size.
          type: boolean
          default: true
        max_area_addresses:
          description: "The Number of Area Addresses permitted, with a valid range\
            \ from 0 to 254.  A zero indicates a maximum of 3 addresses. "
          type: integer
          minimum: 0
          maximum: 254
          default: 3
        area_addresses:
          description: |-
            Its combination of the ISP and HO-DSP.Usually all nodes within an area have  the same area address. If no area addresses are configured, a default area of "490001" will be advertised.
          type: array
          items:
            type: string
            format: hex
        lsp_refresh_rate:
          description: |-
            The rate at which LSPs are re-sent in seconds.
          type: integer
          minimum: 1
          maximum: 65535
          default: 600
        lsp_lifetime:
          description: |-
            The MaxAge for retaining a learned LSP on this router in seconds.
          type: integer
          minimum: 1
          maximum: 65535
          default: 1200
        psnp_interval:
          description: |-
            The number of milliseconds between transmissions of Partial Sequence Number PDU.
          type: integer
          minimum: 1
          maximum: 60000
          default: 2000
        csnp_interval:
          description: |-
            The number of milliseconds between transmissions of Partial Sequence Number PDU.
          type: integer
          minimum: 1
          maximum: 65535000
          default: 10000
        max_lsp_size:
          description: |-
            The maximum size in bytes of any LSP that can be transmitted over a link of equal or less  than maximum MTU size.
          type: integer
          minimum: 64
          maximum: 9216
          default: 1492
        lsp_mgroup_min_trans_interval:
          description: |-
            The number of seconds between transmissions of LSPs/MGROUP-PDUs.
          type: integer
          minimum: 1
          maximum: 60000
          default: 5000
        enable_attached_bit:
          description: |-
            If the Attached bit is enabled, it indicates that the ISIS router is attached to another area  or the Level 2 backbone. The purpose of an Attached-Bit is to accomplish Inter-Area Routing.  When an L1/L2 router is connected to more than one area, it sets the Attached-bit on its L1 LSP. This can cause a default route ( 0.0.0.0/0 ) to be installed by the receiving router.
          type: boolean
          default: true
    Isis.Authentication:
      description: |-
        This contains ISIS Area/Domain authentication properties.
      type: object
      properties:
        ignore_receive_md5:
          description: |-
            Do not verify MD5 checksum in received LSPs.
          type: boolean
          default: true
        area_auth:
          description: |-
            The Area authentication method used for the emulated ISIS router.
            This is used for L1 LSPs.
          $ref: '#/components/schemas/Isis.AuthenticationBase'
        domain_auth:
          description: |-
            The Domain authentication method used for the emulated ISIS router.
            This is used for L2 LSPs.
          $ref: '#/components/schemas/Isis.AuthenticationBase'
    Isis.AuthenticationBase:
      description: |-
        Optional container for ISIS authentication properties.
      type: object
      required:
      - auth_type
      properties:
        auth_type:
          description: |-
            The authentication method.
          type: string
          enum:
          - md5
          - password
        md5:
          description: |-
            Authentication as an MD5 key.
          type: string
          minLength: 0
          maxLength: 255
        password:
          description: |-
            Authentication as a clear text password.
          type: string
          minLength: 0
          maxLength: 255
    Isis.V4RouteRange:
      description: |-
        Emulated ISIS IPv4 routes.
        Configuration for ISIS route ranges.
        This contains the properties of ISIS Prefix attributes for  the extended IPv4 and IPv6 reachability. https://www.rfc-editor.org/rfc/rfc7794.html
      type: object
      properties:
        addresses:
          description: |-
            A list of group of IPv4 route addresses.
          type: array
          items:
            $ref: '#/components/schemas/V4RouteAddress'
        link_metric:
          description: |-
            The user-defined metric associated with this route range.
          type: integer
          default: 0
          minimum: 0
          maximum: 16777215
        origin_type:
          description: "The origin of the advertised route-internal or external to\
            \ the ISIS area. Options include the following: \n  Internal-for intra-area\
            \ routes, through Level 1 LSPs. \n  External-for inter-area routes redistributed\
            \ within L1, through Level 1 LSPs."
          type: string
          enum:
          - internal
          - external
          default: internal
        redistribution_type:
          description: "Defines the Up/Down (Redistribution) bit defined for TLVs\
            \ 128 and 130 by RFC 2966.  It is used for domain-wide advertisement of\
            \ prefix information. \n  Up (0)-used when a prefix is initially advertised\
            \ within the ISIS L3 hierarchy, \n          and for all other prefixes\
            \ in L1 and L2 LSPs. (default) \n  Down (1)-used when an L1/L2 router\
            \ advertises L2 prefixes in L1 LSPs. \nThe prefixes are being advertised\
            \ from a higher level (L2) down to a lower level (L1). "
          type: string
          enum:
          - up
          - down
          default: up
        name:
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
        prefix_attr_enabled:
          description: "Specifies whether the sub-TLV for IPv4/IPv6 Extended Reachability\
            \ Attribute Flags\nwill be advertised or not. "
          type: boolean
          default: false
        x_flag:
          description: |-
            External Prefix Flag (Bit 0)
          type: boolean
          default: false
        r_flag:
          description: |-
            Re-advertisement Flag (Bit 1)
          type: boolean
          default: false
        n_flag:
          description: |-
            Node Flag (Bit 2)
          type: boolean
          default: false
      required:
      - name
    V4RouteAddress:
      description: |-
        A container for IPv4 route addresses.
      type: object
      required:
      - address
      properties:
        address:
          description: |-
            The starting address of the network.
          type: string
          format: ipv4
        prefix:
          description: "The IPv4 network prefix length to be applied to the address. "
          type: integer
          default: 24
          minimum: 0
          maximum: 32
        count:
          description: |-
            The total number of addresses in the range.
          type: integer
          default: 1
          minimum: 1
        step:
          description: |-
            Increments the network address prefixes within a route range  where multiple routes are present.  The value is incremented according to the Prefix Length and Step.
          type: integer
          default: 1
          minimum: 1
    V6RouteAddress:
      description: |-
        A container for IPv6 route addresses.
      type: object
      required:
      - address
      properties:
        address:
          description: |-
            The starting address of the network.
          type: string
          format: ipv6
        prefix:
          description: |-
            The IPv6 network prefix length to be applied to the address.
          type: integer
          default: 64
          minimum: 0
          maximum: 128
        count:
          description: |-
            The total number of addresses in the range.
          type: integer
          default: 1
          minimum: 1
        step:
          description: |-
            Increments the network address prefixes within a route range  where multiple routes are present.  The value is incremented according to the Prefix Length and Step.
          type: integer
          default: 1
          minimum: 1
    MACRouteAddress:
      description: |-
        A container for MAC route addresses.
      type: object
      required:
      - address
      properties:
        address:
          description: |-
            The starting address of the MAC Range.
          type: string
          format: mac
        prefix:
          description: "The MAC prefix length to be applied to the address. "
          type: integer
          default: 48
          minimum: 0
          maximum: 48
        count:
          description: |-
            The total number of mac addresses in the range.
          type: integer
          default: 1
          minimum: 1
        step:
          description: |-
            Increments the mac address prefixes within a mac range  where multiple routes are present.  The value is incremented according to the mac prefix Length and Step.
          type: integer
          default: 1
          minimum: 1
    Isis.V6RouteRange:
      description: |-
        Emulated ISIS IPv6 routes.
        Configuration for ISIS route ranges.
        This contains the properties of ISIS Prefix attributes for  the extended IPv4 and IPv6 reachability. https://www.rfc-editor.org/rfc/rfc7794.html
      type: object
      properties:
        addresses:
          description: |-
            A list of group of IPv6 route addresses.
          type: array
          items:
            $ref: '#/components/schemas/V6RouteAddress'
        link_metric:
          description: |-
            The user-defined metric associated with this route range.
          type: integer
          default: 0
          minimum: 0
          maximum: 16777215
        origin_type:
          description: "The origin of the advertised route-internal or external to\
            \ the ISIS area. Options include the following: \n  Internal-for intra-area\
            \ routes, through Level 1 LSPs. \n  External-for inter-area routes redistributed\
            \ within L1, through Level 1 LSPs."
          type: string
          enum:
          - internal
          - external
          default: internal
        redistribution_type:
          description: "Defines the Up/Down (Redistribution) bit defined for TLVs\
            \ 128 and 130 by RFC 2966.  It is used for domain-wide advertisement of\
            \ prefix information. \n  Up (0)-used when a prefix is initially advertised\
            \ within the ISIS L3 hierarchy, \n          and for all other prefixes\
            \ in L1 and L2 LSPs. (default) \n  Down (1)-used when an L1/L2 router\
            \ advertises L2 prefixes in L1 LSPs. \nThe prefixes are being advertised\
            \ from a higher level (L2) down to a lower level (L1). "
          type: string
          enum:
          - up
          - down
          default: up
        name:
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
        prefix_attr_enabled:
          description: "Specifies whether the sub-TLV for IPv4/IPv6 Extended Reachability\
            \ Attribute Flags\nwill be advertised or not. "
          type: boolean
          default: false
        x_flag:
          description: |-
            External Prefix Flag (Bit 0)
          type: boolean
          default: false
        r_flag:
          description: |-
            Re-advertisement Flag (Bit 1)
          type: boolean
          default: false
        n_flag:
          description: |-
            Node Flag (Bit 2)
          type: boolean
          default: false
      required:
      - name
    Device.BgpRouter:
      description: |-
        Configuration for one or more IPv4 or IPv6 BGP peers.
      type: object
      required:
      - router_id
      properties:
        router_id:
          description: |-
            The BGP router ID is a unique identifier used by BGP. It is a 32-bit value that is often represented by an IPv4 address.
          type: string
          format: ipv4
        ipv4_interfaces:
          description: "This contains an array of references to IPv4 interfaces, \
            \ each of which will have list of peers to different destinations.   "
          type: array
          items:
            $ref: '#/components/schemas/Bgp.V4Interface'
        ipv6_interfaces:
          description: |-
            This contains an array of references to IPv6 interfaces,  each of which will have list of peers to different destinations.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.V6Interface'
    Bgp.V4Peer:
      x-status: under-review
      description: |-
        Status: under-review
        Configuration for emulated BGPv4 peers and routes.
        Configuration for basic emulated BGP peer settings.
      type: object
      required:
      - peer_address
      - as_type
      - as_number
      - name
      properties:
        peer_address:
          description: |-
            IPv4 address of the BGP peer for the session.
          type: string
          format: ipv4
        evpn_ethernet_segments:
          description: "This contains the list of EVPN Ethernet Segments Per BGP Peer\
            \ for IPv4 Address Family Identifier (AFI).\n\nEach EthernetSegment contains\
            \ a list of EVIs . \nEach EVI contains a list of Broadcast Domains. \n\
            Each Broadcast Domain contains a list of MAC/IP Ranges. \n\n<Ethernet\
            \ Segment, EVI, Broadcast Domain> is responsible for advertising Ethernet\
            \ Auto-discovery Route Per EVI(Type 1).\n\n<Ethernet Segment, EVI> is\
            \ responsible for advertising Ethernet Auto-discovery Route Per Ethernet\
            \ Segment(Type 1).\n\n<Ethernet Segment, EVI, Broadcast Domain, MAC/IP>\
            \ is responsible for advertising MAC/IP Advertisement Route(Type 2).\n\
            \n<Ethernet Segment, EVI, Broadcast Domain> is responsible for advertising\
            \ Inclusive Multicast Ethernet Tag Route(Type 3).\n\nEthernet Segment\
            \ is responsible for advertising Ethernet Segment Route(Type 4)."
          type: array
          items:
            $ref: '#/components/schemas/BgpV4.EthernetSegment'
        as_type:
          description: |-
            The type of BGP autonomous system. External BGP is used for BGP links between two or more autonomous systems (ebgp). Internal BGP is used within a single autonomous system (ibgp). BGP property defaults are aligned with this object defined as an internal BGP peer. If the as_type is specified as 'ebgp' then other properties will need to be specified as per an external BGP peer. Specifically, for 'ebgp',  'as_set_mode' attribute in 'as_path' field  in any Route Range should be changed from default value 'do_not_include_local_as' to any other value.
          type: string
          enum:
          - ibgp
          - ebgp
        as_number:
          description: |-
            Autonomous System Number (AS number or ASN)
          type: integer
        as_number_width:
          description: |-
            The width in bytes of the as_number values. Any as_number values that exceeds the width MUST result in an error.
          type: string
          enum:
          - two
          - four
          default: four
        advanced:
          $ref: '#/components/schemas/Bgp.Advanced'
        capability:
          $ref: '#/components/schemas/Bgp.Capability'
        v4_routes:
          description: |-
            Emulated BGPv4 route ranges.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.V4RouteRange'
        v6_routes:
          description: |-
            Emulated BGPv6 route ranges.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.V6RouteRange'
        v4_srte_policies:
          description: |-
            Segment Routing Traffic Engineering (SR TE) Policies for IPv4 Address Family Identifier (AFI).
          type: array
          items:
            $ref: '#/components/schemas/BgpSrte.V4Policy'
        v6_srte_policies:
          description: |-
            Segment Routing Traffic Engineering (SR TE) Policies for IPv6 Address Family Identifier (AFI).
          type: array
          items:
            $ref: '#/components/schemas/BgpSrte.V6Policy'
        name:
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
    Bgp.V4Interface:
      description: |-
        Configuration for emulated BGPv4 peers and routes on a single IPv4 interface.
      type: object
      required:
      - ipv4_name
      properties:
        ipv4_name:
          description: |
            The unique name of the IPv4 or Loopback IPv4 interface used as the source IP for this list of BGP peers.

            x-constraint:
            - /components/schemas/Device.Ipv4/properties/name
            - /components/schemas/Device.Ipv4Loopback/properties/name
          type: string
          x-constraint:
          - /components/schemas/Device.Ipv4/properties/name
          - /components/schemas/Device.Ipv4Loopback/properties/name
        peers:
          description: |-
            This contains the list of BGPv4 peers configured on this interface.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.V4Peer'
    Bgp.Advanced:
      x-status: under-review
      description: |-
        Status: under-review
        Configuration for BGP advanced settings.
      type: object
      properties:
        hold_time_interval:
          description: |-
            Number of seconds the sender proposes for the value of the Hold Timer.
          type: integer
          default: 90
        keep_alive_interval:
          description: |-
            Number of seconds between transmissions of Keepalive messages by this peer.
          type: integer
          default: 30
        update_interval:
          description: |-
            The time interval at which Update messages are sent to the DUT, expressed as the number of milliseconds between Update messages. The update interval 0 implies to send all the updates as fast as possible.
          type: integer
          default: 0
        time_to_live:
          description: |-
            The limited number of iterations that a unit of data can experience before the data is discarded. This is placed in the TTL field in the IP header of the  transmitted packets.
          type: integer
          default: 64
        md5_key:
          description: |-
            The value to be used as a secret MD5 key for authentication. If not configured, MD5 authentication will not be enabled.
          type: string
    Bgp.Capability:
      x-status: under-review
      description: |-
        Status: under-review
        Configuration for BGP capability settings.
      type: object
      properties:
        ipv4_unicast:
          description: |-
            Support for the IPv4 Unicast address family.
          type: boolean
          default: true
        ipv4_multicast:
          description: "Support for the IPv4 Multicast address family. "
          type: boolean
          default: false
        ipv6_unicast:
          description: |-
            Support for the IPv4 Unicast address family.
          type: boolean
          default: true
        ipv6_multicast:
          description: |-
            Support for the IPv6 Multicast address family.
          type: boolean
          default: false
        vpls:
          description: "Support for VPLS as below. \nRFC4761 - Virtual Private LAN\
            \ Service (VPLS) using BGP for Auto-Discovery\nand Signaling. \nRFC6624\
            \ - Layer 2 Virtual Private Networks using BGP for Auto-Discovery \nand\
            \ Signaling."
          type: boolean
          default: false
        route_refresh:
          description: |-
            Support for the route refresh capabilities. Route Refresh allows the dynamic exchange of route refresh requests  and routing information between BGP peers and the subsequent re-advertisement  of the outbound or inbound routing table.
          type: boolean
          default: true
        route_constraint:
          description: |-
            Supports for the route constraint capabilities. Route Constraint allows the advertisement of Route Target Membership  information. The BGP peers exchange Route Target Reachability Information,  which is used to build a route distribution graph.  This limits the propagation of VPN Network Layer Reachability Information (NLRI) between different autonomous systems  or distinct clusters of the same autonomous system. This is supported for Layer 3 Virtual Private Network scenario.
          type: boolean
          default: false
        link_state_non_vpn:
          description: |-
            Support for BGP Link State for ISIS and OSPF.
          type: boolean
          default: false
        link_state_vpn:
          description: |-
            Capability advertisement of BGP Link State for VPNs.
          type: boolean
          default: false
        evpn:
          description: |-
            Support for the EVPN address family.
          type: boolean
          default: false
        extended_next_hop_encoding:
          description: |-
            Support for extended Next Hop Encoding for Nexthop field in  IPv4 routes advertisement.  This allows IPv4 routes being advertised by IPv6 peers to  include an IPv6 Nexthop.
          type: boolean
          default: false
        ipv4_multicast_vpn:
          description: |-
            Support for the IPv4 Multicast VPN address family.
          type: boolean
          default: false
        ipv4_mpls_vpn:
          description: |-
            Support for the IPv4 MPLS L3VPN address family.
          type: boolean
          default: false
        ipv4_mdt:
          description: |-
            Supports for IPv4 MDT address family messages.
          type: boolean
          default: false
        ipv4_multicast_mpls_vpn:
          description: |-
            Support for the IPv4 Multicast VPN address family.
          type: boolean
          default: false
        ipv4_unicast_flow_spec:
          description: |-
            Support for propagation of IPv4 unicast flow specification rules.
          type: boolean
          default: false
        ipv4_sr_te_policy:
          description: |-
            Support for IPv4 SRTE policy.
          type: boolean
          default: false
        ipv4_unicast_add_path:
          description: |-
            Support for IPv4 Unicast Add Path Capability.
          type: boolean
          default: false
        ipv6_multicast_vpn:
          description: |-
            Support for the IPv6 Multicast VPN address family.
          type: boolean
          default: false
        ipv6_mpls_vpn:
          description: |-
            Support for the IPv6 MPLS L3VPN address family.
          type: boolean
          default: false
        ipv6_mdt:
          description: |-
            Support for IPv6 MDT address family messages.
          type: boolean
          default: false
        ipv6_multicast_mpls_vpn:
          description: |-
            Support for the IPv6 Multicast VPN address family.
          type: boolean
          default: false
        ipv6_unicast_flow_spec:
          description: |-
            Support for propagation of IPv6 unicast flow specification rules.
          type: boolean
          default: false
        ipv6_sr_te_policy:
          description: |-
            Support for IPv6 SRTE policy.
          type: boolean
          default: false
        ipv6_unicast_add_path:
          description: |-
            Support for IPv6 Unicast Add Path Capability.
          type: boolean
          default: false
    Bgp.V4RouteRange:
      description: |-
        Emulated BGPv4 route range.
        Configuration for BGP route ranges.
      type: object
      properties:
        addresses:
          description: |-
            A list of group of IPv4 route addresses.
          type: array
          items:
            $ref: '#/components/schemas/V4RouteAddress'
        next_hop_mode:
          description: "Specify the NextHop in MP REACH NLRI. The mode for setting\
            \ the IP address  of the NextHop in the MP REACH NLRI can be one of the\
            \ following:\n  Local IP: Automatically fills the Nexthop with the Local\
            \ IP of the BGP peer.\n  If BGP peer is of type IPv6, Nexthop Encoding\
            \ capability should be enabled.\n  Manual: Override the Nexthop with any\
            \ arbitrary IPv4/IPv6 address.   "
          type: string
          enum:
          - local_ip
          - manual
          default: local_ip
        next_hop_address_type:
          description: "If the Nexthop Mode is Manual, it sets the type of the NextHop\
            \ IP address. "
          type: string
          enum:
          - ipv4
          - ipv6
          default: ipv4
        next_hop_ipv4_address:
          description: |-
            The IPv4 address of the next hop if the Nexthop Mode is manual and the Nexthop type is IPv4. If BGP peer is of type IPv6, Nexthop Encoding capability should be enabled.
          type: string
          format: ipv4
          default: 0.0.0.0
        next_hop_ipv6_address:
          description: "The IPv6 address of the next hop if the Nexthop Mode is manual\
            \ and the Nexthop type is IPv6. "
          type: string
          format: ipv6
          default: ::0
        advanced:
          $ref: '#/components/schemas/Bgp.RouteAdvanced'
        communities:
          description: |-
            Optional community settings.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.Community'
        as_path:
          $ref: '#/components/schemas/Bgp.AsPath'
        add_path:
          $ref: '#/components/schemas/Bgp.AddPath'
        name:
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
      required:
      - name
    Bgp.RouteAdvanced:
      description: |-
        Configuration for advanced BGP route range settings.
      type: object
      properties:
        multi_exit_discriminator:
          description: |-
            The multi exit discriminator (MED) value.  A null value means the MED feature is not enabled.
          type: integer
        origin:
          description: |-
            The origin value.  A null value means the origin feature is not enabled.
          type: string
          enum:
          - igp
          - egp
          default: igp
    Bgp.Community:
      description: |-
        BGP communities provide additional capability for tagging routes and  for modifying BGP routing policy on upstream and downstream routers. BGP community is a 32-bit number which is broken into 16-bit AS number and  a 16-bit custom value.
      type: object
      properties:
        type:
          description: |-
            The type of community AS number.
          type: string
          enum:
          - manual_as_number
          - no_export
          - no_advertised
          - no_export_subconfed
          - llgr_stale
          - no_llgr
        as_number:
          description: |-
            First two octets of 32 bit community AS number.
          type: integer
          minimum: 0
          maximum: 65535
          default: 0
        as_custom:
          description: "Last two octets of the community AS number. "
          type: integer
          minimum: 0
          maximum: 65535
          default: 0
    Bgp.AsPath:
      description: |-
        This attribute identifies the autonomous systems through  which routing information carried in this UPDATE message has passed. This contains the configuration of how to include the Local AS in the AS path attribute of the MP REACH NLRI. It also contains optional configuration of additional AS Path Segments that can be included in the AS Path attribute. The AS Path consists of a Set or Sequence of Autonomous Systems (AS) numbers  that a routing information passes through to reach the destination.
      type: object
      properties:
        as_set_mode:
          description: |-
            Defines how the Local AS should be included in the MP REACH NLRI. For iBGP sessions, "Do Not Include Local AS" must be chosen. For eBGP sessions, any choice other than "Do Not Include Local AS" can be chosen.
          type: string
          enum:
          - do_not_include_local_as
          - include_as_seq
          - include_as_set
          - include_as_confed_seq
          - include_as_confed_set
          - prepend_to_first_segment
          default: do_not_include_local_as
        segments:
          description: "The additional AS path segments to be added in the NLRI. \
            \ By default, an empty AS path is always included and  the local AS is\
            \ added to it as per the value of 'as_set_mode' attribute. "
          type: array
          items:
            $ref: '#/components/schemas/Bgp.AsPathSegment'
    Bgp.AsPathSegment:
      description: |-
        Configuration for a single BGP AS path segment
      type: object
      properties:
        type:
          description: |-
            AS sequence is the most common type of AS_PATH, it contains the  list of ASNs starting with the most recent ASN being added read  from left to right.
            The other three AS_PATH types are used for Confederations - AS_SET is the type of AS_PATH attribute that summarizes routes using using the aggregate-address command, allowing AS_PATHs to be  summarized in the update as well. - AS_CONFED_SEQ gives the list of ASNs in the path starting with the  most recent ASN to be added reading left to right - AS_CONFED_SET will allow summarization of multiple AS PATHs to be  sent in BGP Updates.
          type: string
          enum:
          - as_seq
          - as_set
          - as_confed_seq
          - as_confed_set
          default: as_seq
        as_numbers:
          description: |-
            The AS numbers in this AS path segment.
          type: array
          items:
            type: integer
            format: int64
            minimum: 0
            maximum: 4294967295
            default: 1
    Bgp.AddPath:
      description: |-
        The BGP Additional Paths feature is a BGP extension that allows the  advertisement of multiple paths for the same prefix without the new  paths implicitly replacing any previous paths.
      type: object
      properties:
        path_id:
          description: |-
            The id of the additional path.
          type: integer
          default: 1
    Bgp.V6RouteRange:
      description: |-
        Emulated BGPv6 route range.
        Configuration for BGP route ranges.
      type: object
      properties:
        addresses:
          description: |-
            A list of group of IPv6 route addresses.
          type: array
          items:
            $ref: '#/components/schemas/V6RouteAddress'
        next_hop_mode:
          description: "Specify the NextHop in MP REACH NLRI. The mode for setting\
            \ the IP address  of the NextHop in the MP REACH NLRI can be one of the\
            \ following:\n  Local IP: Automatically fills the Nexthop with the Local\
            \ IP of the BGP peer.\n  If BGP peer is of type IPv6, Nexthop Encoding\
            \ capability should be enabled.\n  Manual: Override the Nexthop with any\
            \ arbitrary IPv4/IPv6 address.   "
          type: string
          enum:
          - local_ip
          - manual
          default: local_ip
        next_hop_address_type:
          description: "If the Nexthop Mode is Manual, it sets the type of the NextHop\
            \ IP address. "
          type: string
          enum:
          - ipv4
          - ipv6
          default: ipv6
        next_hop_ipv4_address:
          description: |-
            The IPv4 address of the next hop if the Nexthop Mode is manual and the Nexthop type is IPv4. If BGP peer is of type IPv6, Nexthop Encoding capability should be enabled.
          type: string
          format: ipv4
          default: 0.0.0.0
        next_hop_ipv6_address:
          description: "The IPv6 address of the next hop if the Nexthop Mode is manual\
            \ and the Nexthop type is IPv6. "
          type: string
          format: ipv6
          default: ::0
        advanced:
          $ref: '#/components/schemas/Bgp.RouteAdvanced'
        communities:
          description: |-
            Optional community settings.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.Community'
        as_path:
          $ref: '#/components/schemas/Bgp.AsPath'
        add_path:
          $ref: '#/components/schemas/Bgp.AddPath'
        name:
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
      required:
      - name
    BgpSrte.V4Policy:
      description: "Configuration for BGP Segment Routing Traffic Engineering(SRTE)\
        \ \npolicy.\n"
      type: object
      required:
      - ipv4_endpoint
      - name
      properties:
        distinguisher:
          description: |-
            4-octet value uniquely identifying the policy in the context of (color, endpoint) tuple. It is used by the SR Policy originator to make unique (from an NLRI perspective)  both for multiple candidate  paths of the same SR Policy as well as candidate paths  of different SR Policies (i.e. with different segment list) with the same Color  and Endpoint but meant for different head-ends.
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          default: 1
        color:
          description: |-
            Policy color is used to match the color of the destination prefixes to steer traffic into the SR Policy.
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          default: 100
        ipv4_endpoint:
          description: |-
            Specifies a single node or a set of nodes (e.g. an anycast address). It is selected on the basis of the SR Policy type (AFI).
          type: string
          format: ipv4
        next_hop_mode:
          description: |-
            Mode for choosing the NextHop in MP REACH NLRI. Available modes are : Local IP: Automatically fills the Nexthop with the Local IP of the BGP peer. For IPv6 BGP peer the Nexthop Encoding capability should be enabled. Manual: Override the Nexthop with any arbitrary IPv4/IPv6 address.
          type: string
          enum:
          - local_ip
          - manual
          default: local_ip
        next_hop_address_type:
          description: "Type of next hop IP address to be used when 'next_hop_mode'\
            \ is set to 'manual'. "
          type: string
          enum:
          - ipv4
          - ipv6
          default: ipv4
        next_hop_ipv4_address:
          description: |-
            The IPv4 address of the next hop if the Nexthop type 'next_hop_mode' is 'manual' and the Nexthop type 'next_hop_address_type' is IPv4. If BGP peer is of type IPv6, Nexthop Encoding capability extended_next_hop_encoding should be enabled.
          type: string
          format: ipv4
        next_hop_ipv6_address:
          description: "The IPv6 address of the next hop if the Nexthop Mode 'next_hop_address_type'\
            \ is 'manual' and the Nexthop type 'next_hop_address_type' is IPv6. "
          type: string
          format: ipv6
        advanced:
          $ref: '#/components/schemas/Bgp.RouteAdvanced'
        add_path:
          $ref: '#/components/schemas/Bgp.AddPath'
        as_path:
          $ref: '#/components/schemas/Bgp.AsPath'
        communities:
          description: |-
            Optional Community settings.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.Community'
        ext_communities:
          description: |-
            Optional Extended Community settings.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.ExtCommunity'
        tunnel_tlvs:
          description: |-
            List Tunnel Encapsulation Attributes.
          type: array
          items:
            $ref: '#/components/schemas/BgpSrte.V4TunnelTlv'
        name:
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
        active:
          description: |-
            If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
          type: boolean
          default: true
    Bgp.ExtCommunity:
      description: |-
        The Extended Communities Attribute is a transitive optional BGP attribute, with the Type Code 16. Community and Extended Communities  attributes to trigger routing decisions, such as acceptance, rejection,  preference, or redistribution. An extended community is an 8-Bytes value. It is also divided into two main parts. The first 2 Bytes of the community encode a type and sub-type fields and the last 6 Bytes carry a unique set of data in a  format defined by the type and sub-type field. Extended communities provide a larger  range for grouping or categorizing communities.
      type: object
      properties:
        type:
          description: "Extended Community Type field of 1 Byte.\n - administrator_as_2octet:\
            \ Two-Octet AS Specific Extended Community (RFC 4360).\n - administrator_ipv4_address:\
            \ IPv4 Address Specific Extended Community (RFC 4360).\n - administrator_as_4octet:\
            \  4-Octet AS Specific Extended Community (RFC 5668).\n - opaque: Opaque\
            \ Extended Community (RFC 7432).\n - evpn: EVPN Extended Community (RFC\
            \ 7153).  \n - administrator_as_2octet_link_bandwidth : Link Bandwidth\
            \ Extended Community (RFC 7153)."
          type: string
          enum:
          - administrator_as_2octet
          - administrator_ipv4_address
          - administrator_as_4octet
          - opaque
          - evpn
          - administrator_as_2octet_link_bandwidth
        subtype:
          description: |-
            Extended Community Sub Type field of 1 Byte.
            - route_target: Route Target.
            - origin: Origin.
            - extended_bandwidth: Specifies the link bandwidth.
            - color: Specifies the color value.
            - encapsulation: Specifies the Encapsulation Extended Community.
            - mac_address: Specifies the Extended community MAC address.
          type: string
          enum:
          - route_target
          - origin
          - extended_bandwidth
          - color
          - encapsulation
          - mac_address
        value:
          description: |-
            Extended Community value of 6 Bytes. Example - for the Opaque type and Color subtype value can be '0000000000c8'  for the color value 200.
          type: string
          format: hex
    BgpSrte.V4TunnelTlv:
      description: |-
        Configuration for BGP SRTE Tunnel TLV.
      type: object
      properties:
        remote_endpoint_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.RemoteEndpointSubTlv'
        color_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.ColorSubTlv'
        binding_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.BindingSubTlv'
        preference_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.PreferenceSubTlv'
        policy_priority_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.PolicyPrioritySubTlv'
        policy_name_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.PolicyNameSubTlv'
        explicit_null_label_policy_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.ExplicitNullLabelPolicySubTlv'
        segment_lists:
          type: array
          items:
            $ref: '#/components/schemas/BgpSrte.SegmentList'
        name:
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
        active:
          description: |-
            If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
          type: boolean
          default: true
      required:
      - name
    BgpSrte.RemoteEndpointSubTlv:
      description: |-
        Configuration for the BGP remote endpoint sub TLV.
      type: object
      properties:
        as_number:
          description: |-
            Autonomous system (AS) number
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          default: 0
        address_family:
          description: |-
            Determines the address type
          type: string
          enum:
          - ipv4
          - ipv6
          default: ipv4
        ipv4_address:
          description: |-
            The IPv4 address of the Remote Endpoint.
          type: string
          format: ipv4
          default: 0.0.0.0
        ipv6_address:
          description: |-
            The IPv6 address of the Remote Endpoint.
          type: string
          format: ipv6
          default: ::0
    BgpSrte.ColorSubTlv:
      description: "Configuration for the Policy Color attribute sub-TLV. The Color\
        \ sub-TLV MAY be used as a way to \"color\" the corresponding Tunnel TLV.\
        \ The Value field of the sub-TLV is eight octets long and consists of a Color\
        \ Extended Community. First two octets of its Value field are 0x030b as type\
        \ and subtype of extended  community. Remaining six octets are are exposed\
        \ to configure. "
      type: object
      properties:
        color:
          description: |-
            Six octet values. Example: 000000000064 for color value 100.
          type: string
          format: hex
    BgpSrte.BindingSubTlv:
      description: |-
        Configuration for the binding SID sub-TLV.  This is used to signal the binding SID related information  of the SR Policy candidate path.
      type: object
      properties:
        binding_sid_type:
          description: |-
            Type of the binding SID.  Supported types are "No Binding SID" or "Four Octets Sid" or "IPv6 SID".
          type: string
          enum:
          - no_binding
          - four_octet_sid
          - ipv6_sid
          default: no_binding
        four_octet_sid:
          description: "Binding SID is encoded in 4 octets. "
          type: integer
        ipv6_sid:
          description: |-
            IPv6 SID value.
          type: string
          format: ipv6
        s_flag:
          description: |-
            S-Flag encodes the "Specified-BSID-only" behavior.
          type: boolean
          default: false
        i_flag:
          description: |-
            I-Flag encodes the "Drop Upon Invalid" behavior.
          type: boolean
          default: false
    BgpSrte.PreferenceSubTlv:
      description: |-
        Configuration for BGP preference sub TLV of the SR Policy candidate path.
      type: object
      properties:
        preference:
          description: |-
            The preference value of the SR Policy candidate path.
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          default: 0
    BgpSrte.PolicyPrioritySubTlv:
      description: |-
        Configuration for the Policy Priority sub-TLV. The Policy Priority to indicate the order in which the SR policies  are re-computed upon topological change.
      type: object
      properties:
        policy_priority:
          description: |-
            One-octet Priority value.
          type: integer
          minimum: 0
          maximum: 255
    BgpSrte.PolicyNameSubTlv:
      description: |-
        Configuration for the Policy Name sub-TLV. The Policy Name sub-TLV is used to attach a symbolic name to the SR Policy candidate path.
      type: object
      properties:
        policy_name:
          description: |-
            Symbolic name for the policy that should be a string of printable ASCII characters, without a NULL terminator.
          type: string
          minLength: 1
          maxLength: 32
    BgpSrte.ExplicitNullLabelPolicySubTlv:
      description: |-
        Configuration for BGP explicit null label policy sub TLV settings.
      type: object
      properties:
        explicit_null_label_policy:
          description: "The value of the explicit null label policy "
          type: string
          enum:
          - reserved_enlp
          - push_ipv4_enlp
          - push_ipv6_enlp
          - push_ipv4_ipv6_enlp
          - do_not_push_enlp
          default: do_not_push_enlp
    BgpSrte.SegmentList:
      x-status: under-review
      description: |-
        Status: under-review
        Optional configuration for BGP SR TE Policy segment list. The Segment List sub-TLV encodes a single explicit path towards the Endpoint.
      type: object
      properties:
        weight:
          description: |-
            The Weight associated with a given path and the sub-TLV is optional.
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          default: 0
        segments:
          type: array
          items:
            $ref: '#/components/schemas/BgpSrte.Segment'
        name:
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
        active:
          description: |-
            If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
          type: boolean
          default: true
      required:
      - name
    BgpSrte.Segment:
      x-status: under-review
      description: |-
        Status: under-review
        A Segment sub-TLV describes a single segment in a segment list  i.e., a single element of the explicit path. The Segment sub-TLVs are optional.
      type: object
      required:
      - segment_type
      - name
      properties:
        segment_type:
          description: |-
            Specify one of the segment type.
            https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13
            Type  A: SID only, in the form of MPLS Label.
            Type  B: SID only, in the form of IPv6 Address.
            Type  C: IPv4 Node Address with optional SID.
            Type  D: IPv6 Node Address with optional SID for SR MPLS.
            Type  E: IPv4 Address and index with optional SID.
            Type  F: IPv4 Local and Remote addresses with optional SID.
            Type  G: IPv6 Address and index for local and remote pair with optional
                  SID for SR MPLS.
            Type  H: IPv6 Local and Remote addresses with optional SID for SR MPLS.
            Type  I: IPv6 Node Address with optional SID for SRv6.
            Type  J: IPv6 Address and index for local and remote pair with optional
                  SID for SRv6.
            Type  K: IPv6 Local and Remote addresses for SRv6.
          type: string
          enum:
          - type_a
          - type_b
          - type_c
          - type_d
          - type_e
          - type_f
          - type_g
          - type_h
          - type_i
          - type_j
          - type_k
        type_a:
          $ref: '#/components/schemas/BgpSrte.SegmentATypeSubTlv'
        type_b:
          $ref: '#/components/schemas/BgpSrte.SegmentBTypeSubTlv'
        type_c:
          $ref: '#/components/schemas/BgpSrte.SegmentCTypeSubTlv'
        type_d:
          $ref: '#/components/schemas/BgpSrte.SegmentDTypeSubTlv'
        type_e:
          $ref: '#/components/schemas/BgpSrte.SegmentETypeSubTlv'
        type_f:
          $ref: '#/components/schemas/BgpSrte.SegmentFTypeSubTlv'
        type_g:
          $ref: '#/components/schemas/BgpSrte.SegmentGTypeSubTlv'
        type_h:
          $ref: '#/components/schemas/BgpSrte.SegmentHTypeSubTlv'
        type_i:
          $ref: '#/components/schemas/BgpSrte.SegmentITypeSubTlv'
        type_j:
          $ref: '#/components/schemas/BgpSrte.SegmentJTypeSubTlv'
        type_k:
          $ref: '#/components/schemas/BgpSrte.SegmentKTypeSubTlv'
        name:
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
        active:
          description: |-
            If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
          type: boolean
          default: true
    BgpSrte.SrMplsSid:
      description: |-
        Configuration for SR-MPLS with Label, TC, Bottom-of-Stack and TTL.
      type: object
      properties:
        label:
          description: |-
            Label value in [0, 2^20 -1].
          type: integer
          minimum: 0
          maximum: 1048575
        tc:
          description: |-
            Traffic class in bits.
          type: integer
          minimum: 0
          maximum: 7
        s_bit:
          description: |-
            Bottom-of-Stack bit.
          type: boolean
        ttl:
          description: "Time To Live. "
          type: integer
          minimum: 0
          maximum: 255
    BgpSrte.SRv6SIDEndpointBehaviorAndStructure:
      description: |-
        Configuration for SRv6 Endpoint Behavior and SID Structure.  Its optional. Summation of lengths for Locator Block, Locator Node,  Function, and Argument MUST be less than or equal to 128.
      type: object
      properties:
        lb_length:
          description: |-
            SRv6 SID Locator Block length in bits.
          type: integer
          minimum: 0
          maximum: 128
          default: 0
        ln_length:
          description: |-
            SRv6 SID Locator Node length in bits.
          type: integer
          minimum: 0
          maximum: 128
          default: 0
        func_length:
          description: |-
            SRv6 SID Function length in bits.
          type: integer
          minimum: 0
          maximum: 128
          default: 0
        arg_length:
          description: |-
            SRv6 SID Arguments length in bits.
          type: integer
          minimum: 0
          maximum: 128
          default: 0
    BgpSrte.SegmentATypeSubTlv:
      description: |-
        Type  A: SID only, in the form of MPLS Label.
        Configuration for SR-MPLS with Label, TC, Bottom-of-Stack and TTL.
      type: object
      properties:
        flags:
          description: |-
            One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
          type: string
          format: hex
        label:
          description: |-
            Label value in [0, 2^20 -1].
          type: integer
          minimum: 0
          maximum: 1048575
        tc:
          description: |-
            Traffic class in bits.
          type: integer
          minimum: 0
          maximum: 7
        s_bit:
          description: |-
            Bottom-of-Stack bit.
          type: boolean
        ttl:
          description: "Time To Live. "
          type: integer
          minimum: 0
          maximum: 255
    BgpSrte.SegmentBTypeSubTlv:
      description: |-
        Type  B: SID only, in the form of IPv6 address.
      type: object
      required:
      - srv6_sid
      properties:
        flags:
          description: |-
            One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
          type: string
          format: hex
        srv6_sid:
          description: |-
            SRv6 SID.
          type: string
          format: ipv6
        srv6_sid_endpoint_behavior:
          description: |-
            Optional SRv6 Endpoint Behavior and SID Structure.
          $ref: '#/components/schemas/BgpSrte.SRv6SIDEndpointBehaviorAndStructure'
    BgpSrte.SegmentCTypeSubTlv:
      x-status: under-review
      description: |-
        Status: under-review
        Type C: IPv4 Node Address with optional SID.
      type: object
      required:
      - ipv4_node_address
      properties:
        flags:
          description: |-
            One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
          type: string
          format: hex
        sr_algorithm:
          description: |-
            SR Algorithm identifier when A-Flag in on.
          type: integer
          minimum: 0
          maximum: 255
          default: 0
        ipv4_node_address:
          description: |-
            IPv4 address representing a node.
          type: string
          format: ipv4
        sr_mpls_sid:
          description: |-
            Optional SR-MPLS SID.
          $ref: '#/components/schemas/BgpSrte.SrMplsSid'
    BgpSrte.SegmentDTypeSubTlv:
      description: |-
        Type D: IPv6 Node Address with optional SID for SR MPLS.
      type: object
      required:
      - ipv6_node_address
      properties:
        flags:
          description: |-
            One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
          type: string
          format: hex
        sr_algorithm:
          description: |-
            specifying SR Algorithm when when A-Flag as defined in above flags.
          type: integer
          minimum: 0
          maximum: 255
          default: 0
        ipv6_node_address:
          description: |-
            IPv6 address representing a node.
          type: string
          format: ipv6
        sr_mpls_sid:
          description: |-
            Optional SR-MPLS SID.
          $ref: '#/components/schemas/BgpSrte.SrMplsSid'
    BgpSrte.SegmentETypeSubTlv:
      description: |-
        Type E: IPv4 Address and Local Interface ID with optional SID
      type: object
      required:
      - ipv4_node_address
      properties:
        flags:
          description: |-
            One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
          type: string
          format: hex
        local_interface_id:
          description: |-
            Local Interface ID: The Interface Index as defined in [RFC8664].
          type: integer
          minimum: 0
          maximum: 2147483647
          default: 0
        ipv4_node_address:
          description: |-
            IPv4 address representing a node.
          type: string
          format: ipv4
        sr_mpls_sid:
          description: |-
            Optional SR-MPLS SID.
          $ref: '#/components/schemas/BgpSrte.SrMplsSid'
    BgpSrte.SegmentFTypeSubTlv:
      description: |-
        Type F: IPv4 Local and Remote addresses with optional SID.
      type: object
      required:
      - local_ipv4_address
      - remote_ipv4_address
      properties:
        flags:
          description: |-
            One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
          type: string
          format: hex
        local_ipv4_address:
          description: |-
            Local IPv4 Address.
          type: string
          format: ipv4
        remote_ipv4_address:
          description: |-
            Remote IPv4 Address.
          type: string
          format: ipv4
        sr_mpls_sid:
          description: |-
            Optional SR-MPLS SID.
          $ref: '#/components/schemas/BgpSrte.SrMplsSid'
    BgpSrte.SegmentGTypeSubTlv:
      description: |-
        Type G: IPv6 Address, Interface ID for local and remote pair with optional SID for SR MPLS.
      type: object
      required:
      - local_ipv6_node_address
      - remote_ipv6_node_address
      properties:
        flags:
          description: |-
            One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
          type: string
          format: hex
        local_interface_id:
          description: |-
            Local Interface ID: The Interface Index as defined in [RFC8664].
          type: integer
          minimum: 0
          maximum: 2147483647
          default: 0
        local_ipv6_node_address:
          description: |-
            IPv6 address representing a node.
          type: string
          format: ipv6
        remote_interface_id:
          description: |-
            Local Interface ID: The Interface Index as defined in [RFC8664].
          type: integer
          minimum: 0
          maximum: 2147483647
          default: 0
        remote_ipv6_node_address:
          description: |-
            IPv6 address representing a node.
          type: string
          format: ipv6
        sr_mpls_sid:
          description: |-
            Optional SR-MPLS SID.
          $ref: '#/components/schemas/BgpSrte.SrMplsSid'
    BgpSrte.SegmentHTypeSubTlv:
      description: |-
        Type H: IPv6 Local and Remote addresses with optional SID for SR MPLS.
      type: object
      required:
      - local_ipv6_address
      - remote_ipv6_address
      properties:
        flags:
          description: |-
            One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
          type: string
          format: hex
        local_ipv6_address:
          description: |-
            Local IPv6 Address.
          type: string
          format: ipv6
        remote_ipv6_address:
          description: |-
            Remote IPv6 Address.
          type: string
          format: ipv6
        sr_mpls_sid:
          description: |-
            Optional SR-MPLS SID.
          $ref: '#/components/schemas/BgpSrte.SrMplsSid'
    BgpSrte.SegmentITypeSubTlv:
      description: |-
        Type I: IPv6 Node Address with optional SRv6 SID.
      type: object
      required:
      - ipv6_node_address
      properties:
        flags:
          description: |-
            One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
          type: string
          format: hex
        ipv6_node_address:
          description: |-
            IPv6 address representing a node.
          type: string
          format: ipv6
        srv6_sid:
          description: |-
            Optional SRv6 SID.
          type: string
          format: ipv6
        srv6_sid_endpoint_behavior:
          description: |-
            Optional SRv6 Endpoint Behavior and SID Structure.
          $ref: '#/components/schemas/BgpSrte.SRv6SIDEndpointBehaviorAndStructure'
    BgpSrte.SegmentJTypeSubTlv:
      description: |-
        Type J: IPv6 Address, Interface ID for local and remote pair for SRv6 with optional SID.
      type: object
      required:
      - local_ipv6_node_address
      - remote_ipv6_node_address
      properties:
        flags:
          description: |-
            One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
          type: string
          format: hex
        sr_algorithm:
          description: |-
            SR Algorithm identifier when A-Flag in on.
          type: integer
          minimum: 0
          maximum: 255
          default: 0
        local_interface_id:
          description: |-
            Local Interface ID: The Interface Index as defined in [RFC8664].
          type: integer
          minimum: 0
          maximum: 2147483647
          default: 0
        local_ipv6_node_address:
          description: |-
            IPv6 address representing a node.
          type: string
          format: ipv6
        remote_interface_id:
          description: |-
            Local Interface ID: The Interface Index as defined in [RFC8664].
          type: integer
          minimum: 0
          maximum: 2147483647
          default: 0
        remote_ipv6_node_address:
          description: |-
            IPv6 address representing a node.
          type: string
          format: ipv6
        srv6_sid:
          description: |-
            Optional SRv6 SID.
          type: string
          format: ipv6
        srv6_sid_endpoint_behavior:
          description: |-
            Optional SRv6 Endpoint Behavior and SID Structure.
          $ref: '#/components/schemas/BgpSrte.SRv6SIDEndpointBehaviorAndStructure'
    BgpSrte.SegmentKTypeSubTlv:
      description: |-
        Type K: IPv6 Local and Remote addresses for SRv6 with optional SID.
      type: object
      required:
      - local_ipv6_address
      - remote_ipv6_address
      properties:
        flags:
          description: |-
            One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
          type: string
          format: hex
        sr_algorithm:
          description: |-
            SR Algorithm identifier when A-Flag in on.
          type: integer
          minimum: 0
          maximum: 255
          default: 0
        local_ipv6_address:
          description: |-
            IPv6 address representing a node.
          type: string
          format: ipv6
        remote_ipv6_address:
          description: |-
            IPv6 address representing a node.
          type: string
          format: ipv6
        srv6_sid:
          description: |-
            Optional SRv6 SID.
          type: string
          format: ipv6
        srv6_sid_endpoint_behavior:
          description: |-
            Optional SRv6 Endpoint Behavior and SID Structure.
          $ref: '#/components/schemas/BgpSrte.SRv6SIDEndpointBehaviorAndStructure'
    BgpSrte.V6Policy:
      description: |
        Configuration for BGP Segment Routing Traffic Engineering policy.
      type: object
      required:
      - ipv6_endpoint
      - name
      properties:
        distinguisher:
          description: |-
            Identifies the policy in the context of (color and endpoint) tuple.  It is used by the SR Policy originator to make unique multiple  occurrences of the same SR Policy.
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          default: 1
        color:
          description: "Identifies the policy. It is used to match the color of the\
            \  destination prefixes to steer traffic into the SR Policy. "
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          default: 100
        ipv6_endpoint:
          description: |-
            Specifies a single node or a set of nodes (e.g., an anycast address). It is selected on the basis of the SR Policy type (AFI).
          type: string
          format: ipv6
        next_hop_mode:
          description: |-
            Mode for choosing the NextHop in MP REACH NLRI. Available modes are : Local IP: Automatically fills the Nexthop with the Local IP of the BGP peer. For IPv6 BGP peer the Nexthop Encoding capability should be enabled. Manual: Override the Nexthop with any arbitrary IPv4/IPv6 address.
          type: string
          enum:
          - local_ip
          - manual
          default: local_ip
        next_hop_address_type:
          description: "Type of next hop IP address to be used when 'next_hop_mode'\
            \ is set to 'manual'. "
          type: string
          enum:
          - ipv4
          - ipv6
          default: ipv6
        next_hop_ipv4_address:
          description: |-
            The IPv4 address of the Nexthop if the 'next_hop_mode' is 'manual' and the Nexthop type 'next_hop_address_type' is IPv4. If BGP peer is of type IPv6, Nexthop Encoding capability extended_next_hop_encoding should be enabled.
          type: string
          format: ipv4
          default: 0.0.0.0
        next_hop_ipv6_address:
          description: "The IPv6 address of the next hop if the Nexthop Mode 'next_hop_address_type'\
            \ is 'manual' and the Nexthop type 'next_hop_address_type' is IPv6. "
          type: string
          format: ipv6
          default: ::0
        advanced:
          $ref: '#/components/schemas/Bgp.RouteAdvanced'
        add_path:
          $ref: '#/components/schemas/Bgp.AddPath'
        as_path:
          $ref: '#/components/schemas/Bgp.AsPath'
        communities:
          description: |-
            Optional community settings.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.Community'
        extcommunities:
          description: |-
            Optional Extended Community settings.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.ExtCommunity'
        tunnel_tlvs:
          description: |-
            List of optional tunnel TLV settings.
          type: array
          items:
            $ref: '#/components/schemas/BgpSrte.V6TunnelTlv'
        name:
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
        active:
          description: |-
            If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
          type: boolean
          default: true
    BgpSrte.V6TunnelTlv:
      description: |-
        Configuration for BGP SRTE Tunnel TLV.
      type: object
      properties:
        remote_endpoint_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.RemoteEndpointSubTlv'
        color_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.ColorSubTlv'
        binding_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.BindingSubTlv'
        preference_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.PreferenceSubTlv'
        policy_priority_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.PolicyPrioritySubTlv'
        policy_name_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.PolicyNameSubTlv'
        explicit_null_label_policy_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.ExplicitNullLabelPolicySubTlv'
        segment_lists:
          type: array
          items:
            $ref: '#/components/schemas/BgpSrte.SegmentList'
        name:
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
        active:
          description: |-
            If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
          type: boolean
          default: true
      required:
      - name
    BgpV4.EthernetSegment:
      description: "Configuration for BGP Ethernet Segment ranges. Advertises following\
        \ routes - \n\nType 4 - Ethernet Segment Route"
      type: object
      properties:
        df_election:
          description: |-
            Designated Forwarder election configuration.
          $ref: '#/components/schemas/Bgp.EthernetSegment.DfElection'
        evis:
          description: |-
            This contains the list of EVIs.
          type: array
          items:
            $ref: '#/components/schemas/BgpV4.EvpnEvis'
        esi:
          description: |-
            10-octet Ethernet segment identifier (esi) Example - for example for multi-home nonZero ESI '10000000000000000000' .
          type: string
          format: hex
          default: '00000000000000000000'
        active_mode:
          description: |-
            Single Active or All Active mode Redundancy mode selection for Multi-home.
          type: string
          enum:
          - single_active
          - all_active
          default: all_active
        esi_label:
          description: "The label value to be advertised as ESI Label in ESI Label\
            \ Extended Community. This is included in Ethernet Auto-discovery Routes\
            \ per ES advertised by a PE, "
          type: integer
          minimum: 0
          maximum: 16777215
          default: 0
        advanced:
          $ref: '#/components/schemas/Bgp.RouteAdvanced'
        communities:
          description: |-
            Optional community settings.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.Community'
        ext_communities:
          description: |-
            Optional Extended Community settings.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.ExtCommunity'
        as_path:
          description: |-
            Optional AS PATH settings.
          $ref: '#/components/schemas/Bgp.AsPath'
    Bgp.EthernetSegment.DfElection:
      description: |-
        The BGP Ethernet Segment DF Election Configuration.
      type: object
      properties:
        election_timer:
          description: |-
            The DF election timer in seconds.
          type: integer
          minimum: 1
          maximum: 300
          default: 3
    BgpV4.EvpnEvis:
      description: "This contains a list of different flavors of EVPN like evpn_vxlan\
        \ or evpn_mpls etc to be configured per Ethernet segment. \nNeed to instantiate\
        \ required type of evpn instance as per requirement."
      type: object
      properties:
        choice:
          type: string
          enum:
          - evi_vxlan
          default: evi_vxlan
        evi_vxlan:
          description: "EVPN VXLAN instance to be configured per Ethernet Segment.\
            \                  "
          $ref: '#/components/schemas/BgpV4.EviVxlan'
    BgpV4.EviVxlan:
      description: "Configuration for BGP EVPN EVI. Advertises following routes -\
        \ \n\nType 3 - Inclusive Multicast Ethernet Tag Route\n\nType 1 -  Ethernet\
        \ Auto-discovery Route (Per EVI)\n\nType 1 -  Ethernet Auto-discovery Route\
        \ (Per ES)"
      type: object
      properties:
        broadcast_domains:
          description: |-
            This contains the list of Broadcast Domains to be configured per EVI.
          type: array
          items:
            $ref: '#/components/schemas/BgpV4.EviVxlan.BroadcastDomain'
        replication_type:
          description: "Ingress Replication or PIM multicast tunnel to be used. Currently\
            \ only Ingress Replication is supported. "
          type: string
          enum:
          - ingress_replication
          default: ingress_replication
        ad_label:
          description: |-
            The AD Route label value, which gets advertised in the A-D Route per <EVI, ESI>
          type: integer
          minimum: 0
          maximum: 16777215
          default: 0
        route_distinguisher:
          description: |-
            Colon separated Extended Community value of 6 Bytes - "AS number: Value". Here Value is the EVPN instance identifier or RD EVI. Example - for the as_2octet "60005:100". Here EVI Identifier is 100.
          $ref: '#/components/schemas/Bgp.RouteDistinguisher'
        route_target_export:
          description: "List of L2VNI export targets associated with this VRF (EVPN). "
          type: array
          items:
            $ref: '#/components/schemas/Bgp.RouteTarget'
        route_target_import:
          description: "List of L2VNI import targets associated with this VRF (EVPN). "
          type: array
          items:
            $ref: '#/components/schemas/Bgp.RouteTarget'
        l3_route_target_export:
          description: |-
            List of L3VNI Export Route Targets.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.RouteTarget'
        l3_route_target_import:
          description: |-
            List of L3VNI Import Route Targets.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.RouteTarget'
        advanced:
          $ref: '#/components/schemas/Bgp.RouteAdvanced'
        communities:
          description: |-
            Optional community settings.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.Community'
        ext_communities:
          description: |-
            Optional Extended Community settings.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.ExtCommunity'
        as_path:
          description: |-
            Optional AS PATH settings.
          $ref: '#/components/schemas/Bgp.AsPath'
    Bgp.RouteDistinguisher:
      description: |-
        BGP Route Distinguisher.
      type: object
      properties:
        rd_type:
          description: "Route Distinguisher Type field of 2 Byte.\n - as_2octet: Two-Octet\
            \ AS Specific Extended Community (RFC 4360).\n - ipv4_address: IPv4 Address\
            \ Specific Extended Community (RFC 4360).\n - as_4octet:  4-Octet AS Specific\
            \ Extended Community (RFC 5668). "
          type: string
          enum:
          - as_2octet
          - ipv4_address
          - as_4octet
          default: as_2octet
        rd_value:
          description: |-
            Colon separated Extended Community value of 6 Bytes - "AS number: Value".  Example - for the as_2octet "60005:100".
          type: string
    Bgp.RouteTarget:
      description: |-
        BGP Route Target.
      type: object
      properties:
        rt_type:
          description: "Extended Community Type field of 2 Byte.\n - as_2octet: Two-Octet\
            \ AS Specific Extended Community (RFC 4360).\n - ipv4_address: IPv4 Address\
            \ Specific Extended Community (RFC 4360).\n - as_4octet:  4-Octet AS Specific\
            \ Extended Community (RFC 5668). "
          type: string
          enum:
          - as_2octet
          - ipv4_address
          - as_4octet
        rt_value:
          description: "Colon separated Extended Community value of 6 Bytes - AS number:\
            \ Assigned Number.             Example - for the as_2octet '60005:100'.\
            \            "
          type: string
    BgpV4.EviVxlan.BroadcastDomain:
      description: |-
        Configuration for BroadcastDomains per EVI.
      type: object
      properties:
        cmac_ip_ranges:
          description: "This contains the list of MAC/IP Ranges to be configured per\
            \ Broadcastdomain. \n\nAdvertises following route - \nType 2 - MAC/IP\
            \ Advertisement Route."
          type: array
          items:
            $ref: '#/components/schemas/Bgp.CMacIpRanges'
        ethernet_tag_id:
          description: |-
            The ethernet tag id of the broadcast domain.
          type: integer
          minimum: 0
          maximum: 4294967295
          default: 0
        vlan_aware_service:
          description: |-
            VLAN-Aware service to be enabled or disabled.
          type: boolean
          default: false
    Bgp.CMacIpRanges:
      description: "Configuration for MAC/IP Ranges per BroadcastDomain. \n\nAdvertises\
        \ following route -\n\nType 2 - MAC/IP Advertisement Route"
      type: object
      properties:
        mac_addresses:
          description: "Host MAC address range per Broadcast Domain. "
          $ref: '#/components/schemas/MACRouteAddress'
        l2vni:
          description: |-
            L2VNI to be advertised with MAC/IP Advertisement Route(Type 2)
          type: integer
          minimum: 0
          maximum: 16777215
          default: 0
        ipv4_addresses:
          description: "Host IPv4 address range per Broadcast Domain.         "
          $ref: '#/components/schemas/V4RouteAddress'
        ipv6_addresses:
          description: "Host IPv6 address range per Broadcast Domain.            \
            \     "
          $ref: '#/components/schemas/V6RouteAddress'
        l3vni:
          description: |-
            L3VNI to be advertised with MAC/IP Advertisement Route(Type 2).
          type: integer
          minimum: 0
          maximum: 16777215
          default: 0
        active_tenant:
          description: "True to enable Active TS. "
          type: boolean
          default: true
        include_default_gateway:
          description: |-
            Include default Gateway Extended Community in MAC/IP Advertisement Route(Type 2).
          type: boolean
          default: false
        advanced:
          $ref: '#/components/schemas/Bgp.RouteAdvanced'
        communities:
          description: |-
            Optional community settings.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.Community'
        ext_communities:
          description: |-
            Optional Extended Community settings.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.ExtCommunity'
        as_path:
          description: |-
            Optional AS PATH settings.
          $ref: '#/components/schemas/Bgp.AsPath'
    Bgp.V6Peer:
      x-status: under-review
      description: |-
        Status: under-review
        Configuration for BGPv6 peer settings and routes.
        Configuration for basic emulated BGP peer settings.
      type: object
      required:
      - peer_address
      - as_type
      - as_number
      - name
      properties:
        peer_address:
          description: |-
            IPv6 address of the BGP peer for the session
          type: string
          format: ipv6
        segment_routing:
          $ref: '#/components/schemas/Bgp.V6SegmentRouting'
        evpn_ethernet_segments:
          description: "This contains the list of EVPN Ethernet Segments Per BGP Peer\
            \ for IPv4 Address Family Identifier (AFI).\n\nEach EthernetSegment contains\
            \ a list of EVIs . \nEach EVI contains a list of Broadcast Domains. \n\
            Each Broadcast Domain contains a list of MAC/IP Ranges. \n\n<Ethernet\
            \ Segment, EVI, Broadcast Domain> is responsible for advertising Ethernet\
            \ Auto-discovery Route Per EVI(Type 1).\n\n<Ethernet Segment, EVI> is\
            \ responsible for advertising Ethernet Auto-discovery Route Per Ethernet\
            \ Segment(Type 1).\n\n<Ethernet Segment, EVI, Broadcast Domain, MAC/IP>\
            \ is responsible for advertising MAC/IP Advertisement Route(Type 2).\n\
            \n<Ethernet Segment, EVI, Broadcast Domain> is responsible for advertising\
            \ Inclusive Multicast Ethernet Tag Route(Type 3).\n\nEthernet Segment\
            \ is responsible for advertising Ethernet Segment Route(Type 4)."
          type: array
          items:
            $ref: '#/components/schemas/BgpV6.EthernetSegment'
        as_type:
          description: |-
            The type of BGP autonomous system. External BGP is used for BGP links between two or more autonomous systems (ebgp). Internal BGP is used within a single autonomous system (ibgp). BGP property defaults are aligned with this object defined as an internal BGP peer. If the as_type is specified as 'ebgp' then other properties will need to be specified as per an external BGP peer. Specifically, for 'ebgp',  'as_set_mode' attribute in 'as_path' field  in any Route Range should be changed from default value 'do_not_include_local_as' to any other value.
          type: string
          enum:
          - ibgp
          - ebgp
        as_number:
          description: |-
            Autonomous System Number (AS number or ASN)
          type: integer
        as_number_width:
          description: |-
            The width in bytes of the as_number values. Any as_number values that exceeds the width MUST result in an error.
          type: string
          enum:
          - two
          - four
          default: four
        advanced:
          $ref: '#/components/schemas/Bgp.Advanced'
        capability:
          $ref: '#/components/schemas/Bgp.Capability'
        v4_routes:
          description: |-
            Emulated BGPv4 route ranges.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.V4RouteRange'
        v6_routes:
          description: |-
            Emulated BGPv6 route ranges.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.V6RouteRange'
        v4_srte_policies:
          description: |-
            Segment Routing Traffic Engineering (SR TE) Policies for IPv4 Address Family Identifier (AFI).
          type: array
          items:
            $ref: '#/components/schemas/BgpSrte.V4Policy'
        v6_srte_policies:
          description: |-
            Segment Routing Traffic Engineering (SR TE) Policies for IPv6 Address Family Identifier (AFI).
          type: array
          items:
            $ref: '#/components/schemas/BgpSrte.V6Policy'
        name:
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
    Bgp.V6Interface:
      description: |-
        Configuration for emulated BGPv6 peers and routes on a single IPv6 interface.
      type: object
      required:
      - ipv6_name
      properties:
        ipv6_name:
          description: |
            The unique name of IPv6 or Loopback IPv6 interface used as the source IP for this list of BGP peers.

            x-constraint:
            - /components/schemas/Device.Ipv6/properties/name
            - /components/schemas/Device.Ipv6Loopback/properties/name
          type: string
          x-constraint:
          - /components/schemas/Device.Ipv6/properties/name
          - /components/schemas/Device.Ipv6Loopback/properties/name
        peers:
          description: |-
            This contains the list of BGPv6 peers configured on this interface.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.V6Peer'
    Bgp.V6SegmentRouting:
      x-status: under-review
      description: |-
        Status: under-review
        Configuration for BGPv6 segment routing settings.
      type: object
      properties:
        ingress_supports_vpn:
          description: |-
            TBD
          type: boolean
          default: false
        reduced_encapsulation:
          description: |-
            TBD
          type: boolean
          default: false
        copy_time_to_live:
          description: |-
            TBD
          type: boolean
          default: false
        time_to_live:
          description: |-
            TBD
          type: integer
          default: 0
        max_sids_per_srh:
          description: |-
            TBD
          type: integer
          default: 0
        auto_generate_segment_left_value:
          description: |-
            TBD
          type: boolean
          default: false
        segment_left_value:
          description: |-
            TBD
          type: integer
          default: 0
        advertise_sr_te_policy:
          description: |-
            TBD
          type: boolean
          default: false
    BgpV6.EthernetSegment:
      description: |-
        Configuration for BGP Ethernet Segment ranges. Advertises following routes -

        Type 4 - Ethernet Segment Route
      type: object
      properties:
        df_election:
          description: |-
            Designated Forwarder election configuration.
          $ref: '#/components/schemas/Bgp.EthernetSegment.DfElection'
        evis:
          description: |-
            This contains the list of EVIs.
          type: array
          items:
            $ref: '#/components/schemas/BgpV6.EvpnEvis'
        esi:
          description: |-
            10-octet Ethernet segment identifier (esi) Example - for example for multi-home nonZero ESI '10000000000000000000' .
          type: string
          format: hex
          default: '00000000000000000000'
        active_mode:
          description: |-
            Single Active or All Active mode Redundancy mode selection for Multi-home.
          type: string
          enum:
          - single_active
          - all_active
          default: all_active
        esi_label:
          description: "The label value to be advertised as ESI Label in ESI Label\
            \ Extended Community. This is included in Ethernet Auto-discovery Routes\
            \ per ES advertised by a PE, "
          type: integer
          minimum: 0
          maximum: 16777215
          default: 0
        advanced:
          $ref: '#/components/schemas/Bgp.RouteAdvanced'
        communities:
          description: |-
            Optional community settings.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.Community'
        ext_communities:
          description: |-
            Optional Extended Community settings.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.ExtCommunity'
        as_path:
          description: |-
            Optional AS PATH settings.
          $ref: '#/components/schemas/Bgp.AsPath'
    BgpV6.EvpnEvis:
      description: "This contains a list of different flavors of EVPN like evpn_vxlan\
        \ or evpn_mpls etc to be configured per Ethernet segment. \nNeed to instantiate\
        \ required type of evpn instance as per requirement."
      type: object
      properties:
        choice:
          type: string
          enum:
          - evi_vxlan
          default: evi_vxlan
        evi_vxlan:
          description: "EVPN VXLAN instance to be configured per Ethernet Segment.\
            \                    "
          $ref: '#/components/schemas/BgpV6.EviVxlan'
    BgpV6.EviVxlan:
      description: |-
        Configuration for BGP EVPN EVI. Advertises following routes -

        Type 3 - Inclusive Multicast Ethernet Tag Route

        Type 1 -  Ethernet Auto-discovery Route (Per EVI)

        Type 1 -  Ethernet Auto-discovery Route (Per ES)
      type: object
      properties:
        broadcast_domains:
          description: |-
            This contains the list of Broadcast Domains to be configured per EVI.
          type: array
          items:
            $ref: '#/components/schemas/BgpV6.EviVxlan.BroadcastDomain'
        replication_type:
          description: "Ingress Replication or PIM multicast tunnel to be used. Currently\
            \ only Ingress Replication is supported. "
          type: string
          enum:
          - ingress_replication
          default: ingress_replication
        ad_label:
          description: |-
            The AD Route label value, which gets advertised in the A-D Route per <EVI, ESI>
          type: integer
          minimum: 0
          maximum: 16777215
          default: 0
        route_distinguisher:
          description: |-
            Colon separated Extended Community value of 6 Bytes - "AS number: Value". Here Value is the EVPN instance identifier or RD EVI. Example - for the as_2octet "60005:100". Here EVI Identifier is 100.
          $ref: '#/components/schemas/Bgp.RouteDistinguisher'
        route_target_export:
          description: "List of L2VNI export targets associated with this VRF (EVPN). "
          type: array
          items:
            $ref: '#/components/schemas/Bgp.RouteTarget'
        route_target_import:
          description: "List of L2VNI import targets associated with this VRF (EVPN). "
          type: array
          items:
            $ref: '#/components/schemas/Bgp.RouteTarget'
        l3_route_target_export:
          description: |-
            List of L3VNI Export Route Targets.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.RouteTarget'
        l3_route_target_import:
          description: |-
            List of L3VNI Import Route Targets.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.RouteTarget'
        advanced:
          $ref: '#/components/schemas/Bgp.RouteAdvanced'
        communities:
          description: |-
            Optional community settings.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.Community'
        ext_communities:
          description: |-
            Optional Extended Community settings.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.ExtCommunity'
        as_path:
          description: |-
            Optional AS PATH settings.
          $ref: '#/components/schemas/Bgp.AsPath'
    BgpV6.EviVxlan.BroadcastDomain:
      description: |-
        Configuration for BroadcastDomains per EVI.
      type: object
      properties:
        cmac_ip_ranges:
          description: "This contains the list of MAC/IP Ranges to be configured per\
            \ Broadcastdomain. \n\nAdvertises following route - \nType 2 - MAC/IP\
            \ Advertisement Route."
          type: array
          items:
            $ref: '#/components/schemas/Bgp.CMacIpRanges'
        ethernet_tag_id:
          description: |-
            The ethernet tag id of the broadcast domain.
          type: integer
          minimum: 0
          maximum: 4294967295
          default: 0
        vlan_aware_service:
          description: |-
            VLAN-Aware service to be enabled or disabled.
          type: boolean
          default: false
    Flow:
      description: |-
        A high level data plane traffic flow.
      type: object
      required:
      - tx_rx
      - name
      properties:
        tx_rx:
          description: |-
            The transmit and receive endpoints.
          $ref: '#/components/schemas/Flow.TxRx'
        packet:
          description: "The header is a list of traffic protocol headers.\n\nThe order\
            \ of traffic protocol headers assigned to the list is the\norder they\
            \ will appear on the wire.\n\nIn the case of an empty list the keyword/value\
            \ of minItems: 1 \nindicates that an implementation MUST provide at least\
            \ one \nFlow.Header object.\n\nThe default value for the Flow.Header choice\
            \ property is ethernet \nwhich will result in an implementation by default\
            \ providing at least \none ethernet packet header."
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Flow.Header'
        size:
          description: |-
            The size of the packets.
          $ref: '#/components/schemas/Flow.Size'
        rate:
          description: |-
            The transmit rate of the packets.
          $ref: '#/components/schemas/Flow.Rate'
        duration:
          description: |-
            The transmit duration of the packets.
          $ref: '#/components/schemas/Flow.Duration'
        metrics:
          description: "Flow metrics. "
          $ref: '#/components/schemas/Flow.Metrics'
        name:
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
    Flow.TxRx:
      description: "A container for different types of transmit and receive \nendpoint\
        \ containers."
      type: object
      properties:
        choice:
          description: |-
            The type of transmit and receive container used by the flow.
          type: string
          enum:
          - port
          - device
          default: port
        port:
          $ref: '#/components/schemas/Flow.Port'
        device:
          $ref: '#/components/schemas/Flow.Router'
    Flow.Port:
      description: "A container for a transmit port and 0..n intended receive ports.\n\
        When assigning this container to a flow the flows's \npacket headers will\
        \ not be populated with any address resolution \ninformation such as source\
        \ and/or destination addresses. \nFor example Flow.Ethernet dst mac address\
        \ values will be defaulted to 0. \nFor full control over the Flow.properties.packet\
        \ header contents use this \ncontainer. "
      type: object
      required:
      - tx_name
      properties:
        tx_name:
          description: |
            The unique name of a port that is the transmit port.

            x-constraint:
            - /components/schemas/Port/properties/name
            - /components/schemas/Lag/properties/name
          type: string
          x-constraint:
          - /components/schemas/Port/properties/name
          - /components/schemas/Lag/properties/name
        rx_name:
          description: |
            The unique name of a port that is the intended receive port.

            x-constraint:
            - /components/schemas/Port/properties/name
            - /components/schemas/Lag/properties/name
          type: string
          x-constraint:
          - /components/schemas/Port/properties/name
          - /components/schemas/Lag/properties/name
    Flow.Router:
      description: |-
        A container for declaring a map of 1..n transmit devices to 1..n receive devices. This allows for a single flow to have  different tx to rx device flows such as a single one to one map or a  many to many map.
      type: object
      required:
      - tx_names
      - rx_names
      properties:
        mode:
          description: "Determines the mapping of tx_names to rx_names.\n\nThe mesh\
            \ mode creates traffic between each value in tx_names to\nevery value\
            \ in rx_names except in the case where the individual \ntx_names value\
            \ is equal to rx_names value which will be ignored.\nIdentical values\
            \ in tx_names or rx_names MUST raise an error.\n\nThe one_to_one mode\
            \ creates traffic between each value pair in \nof tx_names and rx_names\
            \ by index.\nThe length of tx_names and rx_name MUST be the same.\nIdentical\
            \ values in tx_names or rx_names MUST raise an error."
          type: string
          enum:
          - mesh
          - one_to_one
          default: mesh
        tx_names:
          type: array
          items:
            description: |-
              The unique name of an emulated device that will be transmitting.
            type: string
          x-constraint:
          - /components/schemas/Device.Ethernet/properties/name
          - /components/schemas/Device.Ipv4/properties/name
          - /components/schemas/Device.Ipv6/properties/name
          - /components/schemas/Bgp.V4RouteRange/properties/name
          - /components/schemas/Bgp.V6RouteRange/properties/name
          example:
          - Eth 1
          - Eth 2
          - Eth 3
          - IPv4 1
          - IPv6 1
          - Bgp V4RouteRange 1
          - Bgp V6RouteRange 1
          description: |
            TBD

            x-constraint:
            - /components/schemas/Device.Ethernet/properties/name
            - /components/schemas/Device.Ipv4/properties/name
            - /components/schemas/Device.Ipv6/properties/name
            - /components/schemas/Bgp.V4RouteRange/properties/name
            - /components/schemas/Bgp.V6RouteRange/properties/name
        rx_names:
          type: array
          items:
            description: |-
              The unique name of an emulated device that will be receiving.
            type: string
          x-constraint:
          - /components/schemas/Device.Ethernet/properties/name
          - /components/schemas/Device.Ipv4/properties/name
          - /components/schemas/Device.Ipv6/properties/name
          - /components/schemas/Bgp.V4RouteRange/properties/name
          - /components/schemas/Bgp.V6RouteRange/properties/name
          example:
          - Eth 1
          - Eth 2
          - Eth 3
          - IPv4 1
          - IPv6 1
          - Bgp V4RouteRange 1
          - Bgp V6RouteRange 1
          description: |
            TBD

            x-constraint:
            - /components/schemas/Device.Ethernet/properties/name
            - /components/schemas/Device.Ipv4/properties/name
            - /components/schemas/Device.Ipv6/properties/name
            - /components/schemas/Bgp.V4RouteRange/properties/name
            - /components/schemas/Bgp.V6RouteRange/properties/name
    Flow.Header:
      description: |-
        Configuration for all traffic packet headers
      type: object
      properties:
        choice:
          description: "The available types of flow headers. If one is not provided\
            \ the \ndefault ethernet packet header MUST be provided."
          type: string
          enum:
          - custom
          - ethernet
          - vlan
          - vxlan
          - ipv4
          - ipv6
          - pfcpause
          - ethernetpause
          - tcp
          - udp
          - gre
          - gtpv1
          - gtpv2
          - arp
          - icmp
          - icmpv6
          - ppp
          - igmpv1
          default: ethernet
        custom:
          $ref: '#/components/schemas/Flow.Custom'
        ethernet:
          $ref: '#/components/schemas/Flow.Ethernet'
        vlan:
          $ref: '#/components/schemas/Flow.Vlan'
        vxlan:
          $ref: '#/components/schemas/Flow.Vxlan'
        ipv4:
          $ref: '#/components/schemas/Flow.Ipv4'
        ipv6:
          $ref: '#/components/schemas/Flow.Ipv6'
        pfcpause:
          $ref: '#/components/schemas/Flow.PfcPause'
        ethernetpause:
          $ref: '#/components/schemas/Flow.EthernetPause'
        tcp:
          $ref: '#/components/schemas/Flow.Tcp'
        udp:
          $ref: '#/components/schemas/Flow.Udp'
        gre:
          $ref: '#/components/schemas/Flow.Gre'
        gtpv1:
          $ref: '#/components/schemas/Flow.Gtpv1'
        gtpv2:
          $ref: '#/components/schemas/Flow.Gtpv2'
        arp:
          $ref: '#/components/schemas/Flow.Arp'
        icmp:
          $ref: '#/components/schemas/Flow.Icmp'
        icmpv6:
          $ref: '#/components/schemas/Flow.Icmpv6'
        ppp:
          $ref: '#/components/schemas/Flow.Ppp'
        igmpv1:
          $ref: '#/components/schemas/Flow.Igmpv1'
    Flow.Custom:
      type: object
      description: |-
        Custom packet header
      required:
      - bytes
      properties:
        bytes:
          description: |-
            A custom packet header defined as a string of hex bytes. The string MUST contain sequence of valid hex bytes. Spaces or colons can be part of the bytes but will be discarded. This packet header can be used in multiple places in the packet.
          type: string
          pattern: '^[A-Fa-f0-9: ]+$'
    Flow.Ethernet:
      description: |-
        Ethernet packet header
      type: object
      properties:
        dst:
          $ref: '#/components/schemas/Pattern.Flow.Ethernet.Dst'
        src:
          $ref: '#/components/schemas/Pattern.Flow.Ethernet.Src'
        ether_type:
          $ref: '#/components/schemas/Pattern.Flow.Ethernet.EtherType'
        pfc_queue:
          $ref: '#/components/schemas/Pattern.Flow.Ethernet.PfcQueue'
    Flow.Vlan:
      description: |-
        VLAN packet header
      type: object
      properties:
        priority:
          $ref: '#/components/schemas/Pattern.Flow.Vlan.Priority'
        cfi:
          $ref: '#/components/schemas/Pattern.Flow.Vlan.Cfi'
        id:
          $ref: '#/components/schemas/Pattern.Flow.Vlan.Id'
        tpid:
          $ref: '#/components/schemas/Pattern.Flow.Vlan.Tpid'
    Flow.Vxlan:
      description: |-
        VXLAN packet header
      type: object
      properties:
        flags:
          $ref: '#/components/schemas/Pattern.Flow.Vxlan.Flags'
        reserved0:
          $ref: '#/components/schemas/Pattern.Flow.Vxlan.Reserved0'
        vni:
          $ref: '#/components/schemas/Pattern.Flow.Vxlan.Vni'
        reserved1:
          $ref: '#/components/schemas/Pattern.Flow.Vxlan.Reserved1'
    Flow.Ipv4:
      description: |-
        IPv4 packet header
      type: object
      properties:
        version:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Version'
        header_length:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.HeaderLength'
        priority:
          $ref: '#/components/schemas/Flow.Ipv4.Priority'
        total_length:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.TotalLength'
        identification:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Identification'
        reserved:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Reserved'
        dont_fragment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.DontFragment'
        more_fragments:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.MoreFragments'
        fragment_offset:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.FragmentOffset'
        time_to_live:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.TimeToLive'
        protocol:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Protocol'
        header_checksum:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.HeaderChecksum'
        src:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Src'
        dst:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Dst'
    Flow.Ipv4.Priority:
      description: |-
        A container for ipv4 raw, tos, dscp ip priorities.
      type: object
      properties:
        choice:
          type: string
          enum:
          - raw
          - tos
          - dscp
          default: dscp
        raw:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Priority.Raw'
        tos:
          $ref: '#/components/schemas/Flow.Ipv4.Tos'
        dscp:
          $ref: '#/components/schemas/Flow.Ipv4.Dscp'
    Flow.Ipv4.Dscp:
      description: |-
        Differentiated services code point (DSCP) packet field.
      type: object
      properties:
        phb:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Dscp.Phb'
        ecn:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Dscp.Ecn'
    Flow.Ipv4.Tos:
      description: |-
        Type of service (TOS) packet field.
      type: object
      properties:
        precedence:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Precedence'
        delay:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Delay'
        throughput:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Throughput'
        reliability:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Reliability'
        monetary:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Monetary'
        unused:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Unused'
    Flow.Ipv6:
      description: |-
        IPv6 packet header
      type: object
      properties:
        version:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.Version'
        traffic_class:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.TrafficClass'
        flow_label:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.FlowLabel'
        payload_length:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.PayloadLength'
        next_header:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.NextHeader'
        hop_limit:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.HopLimit'
        src:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.Src'
        dst:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.Dst'
    Flow.PfcPause:
      description: |-
        IEEE 802.1Qbb PFC Pause packet header.
      type: object
      properties:
        dst:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.Dst'
        src:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.Src'
        ether_type:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.EtherType'
        control_op_code:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.ControlOpCode'
        class_enable_vector:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.ClassEnableVector'
        pause_class_0:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass0'
        pause_class_1:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass1'
        pause_class_2:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass2'
        pause_class_3:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass3'
        pause_class_4:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass4'
        pause_class_5:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass5'
        pause_class_6:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass6'
        pause_class_7:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass7'
    Flow.EthernetPause:
      description: |-
        IEEE 802.3x global ethernet pause packet header
      type: object
      properties:
        dst:
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.Dst'
        src:
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.Src'
        ether_type:
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.EtherType'
        control_op_code:
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.ControlOpCode'
        time:
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.Time'
    Flow.Tcp:
      description: |-
        TCP packet header
      type: object
      properties:
        src_port:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.SrcPort'
        dst_port:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.DstPort'
        seq_num:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.SeqNum'
        ack_num:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.AckNum'
        data_offset:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.DataOffset'
        ecn_ns:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.EcnNs'
        ecn_cwr:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.EcnCwr'
        ecn_echo:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.EcnEcho'
        ctl_urg:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlUrg'
        ctl_ack:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlAck'
        ctl_psh:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlPsh'
        ctl_rst:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlRst'
        ctl_syn:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlSyn'
        ctl_fin:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlFin'
        window:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.Window'
    Flow.Udp:
      description: |-
        UDP packet header
      type: object
      properties:
        src_port:
          $ref: '#/components/schemas/Pattern.Flow.Udp.SrcPort'
        dst_port:
          $ref: '#/components/schemas/Pattern.Flow.Udp.DstPort'
        length:
          $ref: '#/components/schemas/Pattern.Flow.Udp.Length'
        checksum:
          $ref: '#/components/schemas/Pattern.Flow.Udp.Checksum'
    Flow.Gre:
      description: |-
        Standard GRE packet header (RFC2784)
      type: object
      properties:
        checksum_present:
          $ref: '#/components/schemas/Pattern.Flow.Gre.ChecksumPresent'
        reserved0:
          $ref: '#/components/schemas/Pattern.Flow.Gre.Reserved0'
        version:
          $ref: '#/components/schemas/Pattern.Flow.Gre.Version'
        protocol:
          $ref: '#/components/schemas/Pattern.Flow.Gre.Protocol'
        checksum:
          $ref: '#/components/schemas/Pattern.Flow.Gre.Checksum'
        reserved1:
          $ref: '#/components/schemas/Pattern.Flow.Gre.Reserved1'
    Flow.Gtpv1:
      description: |-
        GTPv1 packet header
      type: object
      properties:
        version:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.Version'
        protocol_type:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.ProtocolType'
        reserved:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.Reserved'
        e_flag:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.EFlag'
        s_flag:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.SFlag'
        pn_flag:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.PnFlag'
        message_type:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.MessageType'
        message_length:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.MessageLength'
        teid:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.Teid'
        squence_number:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.SquenceNumber'
        n_pdu_number:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.NPduNumber'
        next_extension_header_type:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.NextExtensionHeaderType'
        extension_headers:
          description: |-
            A list of optional extension headers.
          type: array
          items:
            $ref: '#/components/schemas/Flow.GtpExtension'
    Flow.GtpExtension:
      type: object
      properties:
        extension_length:
          $ref: '#/components/schemas/Pattern.Flow.GtpExtension.ExtensionLength'
        contents:
          $ref: '#/components/schemas/Pattern.Flow.GtpExtension.Contents'
        next_extension_header:
          $ref: '#/components/schemas/Pattern.Flow.GtpExtension.NextExtensionHeader'
    Flow.Gtpv2:
      description: |-
        GTPv2 packet header
      type: object
      properties:
        version:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Version'
        piggybacking_flag:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.PiggybackingFlag'
        teid_flag:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.TeidFlag'
        spare1:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Spare1'
        message_type:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.MessageType'
        message_length:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.MessageLength'
        teid:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Teid'
        sequence_number:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.SequenceNumber'
        spare2:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Spare2'
    Flow.Arp:
      description: |-
        ARP packet header
      type: object
      properties:
        hardware_type:
          $ref: '#/components/schemas/Pattern.Flow.Arp.HardwareType'
        protocol_type:
          $ref: '#/components/schemas/Pattern.Flow.Arp.ProtocolType'
        hardware_length:
          $ref: '#/components/schemas/Pattern.Flow.Arp.HardwareLength'
        protocol_length:
          $ref: '#/components/schemas/Pattern.Flow.Arp.ProtocolLength'
        operation:
          $ref: '#/components/schemas/Pattern.Flow.Arp.Operation'
        sender_hardware_addr:
          $ref: '#/components/schemas/Pattern.Flow.Arp.SenderHardwareAddr'
        sender_protocol_addr:
          $ref: '#/components/schemas/Pattern.Flow.Arp.SenderProtocolAddr'
        target_hardware_addr:
          $ref: '#/components/schemas/Pattern.Flow.Arp.TargetHardwareAddr'
        target_protocol_addr:
          $ref: '#/components/schemas/Pattern.Flow.Arp.TargetProtocolAddr'
    Flow.Icmp:
      description: |-
        ICMP packet header
      type: object
      properties:
        choice:
          type: string
          enum:
          - echo
          default: echo
        echo:
          $ref: '#/components/schemas/Flow.Icmp.Echo'
    Flow.Icmp.Echo:
      description: |-
        Packet Header for ICMP echo request
        Common properties for ICMP packet headers that require checksum
        Common properties for ICMP packet headers that require identifier and sequence number properties
      type: object
      properties:
        type:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.Type'
        code:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.Code'
        checksum:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.Checksum'
        identifier:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.Identifier'
        sequence_number:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.SequenceNumber'
    Flow.Icmpv6:
      description: |-
        ICMPv6 packet header
      type: object
      properties:
        choice:
          type: string
          enum:
          - echo
          default: echo
        echo:
          $ref: '#/components/schemas/Flow.Icmpv6.Echo'
    Flow.Icmpv6.Echo:
      description: |-
        Packet Header for ICMPv6 Echo
        Common properties for ICMPv6 packet headers that require checksum
      type: object
      properties:
        type:
          $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.Type'
        code:
          $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.Code'
        identifier:
          $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.Identifier'
        sequence_number:
          $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.SequenceNumber'
        checksum:
          $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.Checksum'
    Flow.Ppp:
      description: |-
        PPP packet header
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Pattern.Flow.Ppp.Address'
        control:
          $ref: '#/components/schemas/Pattern.Flow.Ppp.Control'
        protocol_type:
          $ref: '#/components/schemas/Pattern.Flow.Ppp.ProtocolType'
    Flow.Igmpv1:
      description: |-
        IGMPv1 packet header
      type: object
      properties:
        version:
          $ref: '#/components/schemas/Pattern.Flow.Igmpv1.Version'
        type:
          $ref: '#/components/schemas/Pattern.Flow.Igmpv1.Type'
        unused:
          $ref: '#/components/schemas/Pattern.Flow.Igmpv1.Unused'
        checksum:
          $ref: '#/components/schemas/Pattern.Flow.Igmpv1.Checksum'
        group_address:
          $ref: '#/components/schemas/Pattern.Flow.Igmpv1.GroupAddress'
    Flow.Size:
      description: |-
        The frame size which overrides the total length of the packet
      type: object
      properties:
        choice:
          type: string
          enum:
          - fixed
          - increment
          - random
          default: fixed
        fixed:
          type: integer
          default: 64
        increment:
          $ref: '#/components/schemas/Flow.SizeIncrement'
        random:
          $ref: '#/components/schemas/Flow.SizeRandom'
    Flow.SizeIncrement:
      type: object
      description: "Frame size that increments from a starting size to \nan ending\
        \ size incrementing by a step size."
      properties:
        start:
          description: |-
            Starting frame size in bytes
          type: integer
          minimum: 1
          default: 64
        end:
          description: |-
            Ending frame size in bytes
          type: integer
          minimum: 64
          default: 1518
        step:
          description: |-
            Step frame size in bytes
          type: integer
          default: 1
    Flow.SizeRandom:
      type: object
      description: |-
        Random frame size from a min value to a max value.
      properties:
        min:
          type: integer
          default: 64
        max:
          type: integer
          default: 1518
    Flow.Rate:
      type: object
      description: |-
        The rate of packet transmission
      properties:
        choice:
          description: |-
            The available types of flow rate.
          type: string
          enum:
          - pps
          - bps
          - kbps
          - mbps
          - gbps
          - percentage
          default: pps
        pps:
          description: |-
            Packets per second.
          type: integer
          format: int64
          minimum: 1
          default: 1000
        bps:
          description: |-
            Bits per second.
          type: integer
          format: int64
          minimum: 672
          default: 1000000000
        kbps:
          description: |-
            Kilobits per second.
          type: integer
          format: int64
          minimum: 1
          default: 1000000
        mbps:
          description: "Megabits per second. "
          type: integer
          format: int64
          minimum: 1
          default: 1000
        gbps:
          description: |-
            Gigabits per second.
          type: integer
          format: int32
          minimum: 1
          default: 1
        percentage:
          description: |-
            The percentage of a port location's available bandwidth.
          type: number
          format: float
          minimum: 0
          maximum: 100
          default: 100
    Flow.Duration:
      description: "A container for different transmit durations. "
      type: object
      properties:
        choice:
          description: |-
            A choice used to determine the type of duration.
          type: string
          enum:
          - fixed_packets
          - fixed_seconds
          - burst
          - continuous
          default: continuous
        fixed_packets:
          $ref: '#/components/schemas/Flow.FixedPackets'
        fixed_seconds:
          $ref: '#/components/schemas/Flow.FixedSeconds'
        burst:
          $ref: '#/components/schemas/Flow.Burst'
        continuous:
          $ref: '#/components/schemas/Flow.Continuous'
    Flow.Continuous:
      description: "Transmit will be continuous and will not stop automatically. "
      type: object
      properties:
        gap:
          description: |-
            The minimum gap between packets expressed as bytes.
          type: integer
          minimum: 0
          default: 12
        delay:
          $ref: '#/components/schemas/Flow.Delay'
    Flow.Delay:
      description: "The optional container to specify the delay before starting \n\
        transmission of packets."
      type: object
      properties:
        choice:
          type: string
          enum:
          - bytes
          - nanoseconds
          - microseconds
          default: bytes
        bytes:
          description: |-
            The delay before starting transmission of packets.
            A value of 0 indicates no delay.
          type: number
          format: float
          minimum: 0
          default: 0
        nanoseconds:
          description: |-
            The delay before starting transmission of packets.
            A value of 0 indicates no delay.
          type: number
          format: float
          minimum: 0
          default: 0
        microseconds:
          description: |-
            The delay before starting transmission of packets.
            A value of 0 indicates no delay.
          type: number
          format: float
          minimum: 0
          default: 0
    Flow.FixedPackets:
      description: |-
        Transmit a fixed number of packets after which the flow will stop.
      type: object
      properties:
        packets:
          description: |-
            Stop transmit of the flow after this number of packets.
          type: integer
          minimum: 1
          default: 1
        gap:
          description: |-
            The minimum gap between packets expressed as bytes.
          type: integer
          minimum: 0
          default: 12
        delay:
          $ref: '#/components/schemas/Flow.Delay'
    Flow.FixedSeconds:
      description: |-
        Transmit for a fixed number of seconds after which the flow will stop.
      type: object
      properties:
        seconds:
          description: |-
            Stop transmit of the flow after this number of seconds.
          type: number
          minimum: 0
          default: 1
        gap:
          description: |-
            The minimum gap between packets expressed as bytes.
          type: integer
          minimum: 0
          default: 12
        delay:
          $ref: '#/components/schemas/Flow.Delay'
    Flow.Burst:
      description: "Transmits continuous or fixed burst of packets. \nFor continuous\
        \ burst of packets, it will not automatically stop.\nFor fixed burst of packets,\
        \ it will stop after transmitting fixed number of bursts.      "
      type: object
      properties:
        bursts:
          description: |-
            The number of packet bursts transmitted per flow.
            A value of 0 implies continuous burst of packets.
          type: integer
          minimum: 0
          default: 0
        packets:
          description: |-
            The number of packets transmitted per burst.
          type: integer
          minimum: 1
          default: 1
        gap:
          description: |-
            The minimum gap between packets expressed as bytes.
          type: integer
          minimum: 0
          default: 12
        inter_burst_gap:
          $ref: '#/components/schemas/Flow.Duration.InterBurstGap'
    Flow.Duration.InterBurstGap:
      type: object
      description: |-
        The optional container for specifying a gap between bursts.
      properties:
        choice:
          description: |-
            The type of inter burst gap units.
          type: string
          enum:
          - bytes
          - nanoseconds
          - microseconds
          default: bytes
        bytes:
          description: |-
            The amount of time between bursts expressed in bytes.
            A value of 0 indicates no gap between bursts.
          type: number
          format: double
          minimum: 0
          default: 12
        nanoseconds:
          description: |-
            The amount of time between bursts expressed in nanoseconds.
            A value of 0 indicates no gap between bursts.
          type: number
          format: double
          minimum: 0
          default: 96
        microseconds:
          description: |-
            The amount of time between bursts expressed in microseconds.
            A value of 0 indicates no gap between bursts.
          type: number
          format: double
          minimum: 0
          default: 0.096
    Flow.Metrics:
      description: |-
        The optional container for configuring flow metrics.
      type: object
      properties:
        enable:
          description: "Enables flow metrics.\nEnabling this option may affect the\
            \ resultant packet payload due to \nadditional instrumentation data."
          type: boolean
          default: false
        loss:
          description: |-
            Enables additional flow metric loss calculation.
          type: boolean
          default: false
        timestamps:
          description: |-
            Enables additional flow metric first and last timestamps.
          type: boolean
          default: false
        latency:
          description: |-
            Latency metrics.
          $ref: '#/components/schemas/Flow.Latency.Metrics'
    Flow.Latency.Metrics:
      description: |-
        The optional container for per flow latency metric configuration.
      type: object
      properties:
        enable:
          description: "True to enable latency metrics using timestamps.\n\nEnabling\
            \ this option may affect the resultant packet payload due to \nadditional\
            \ instrumentation data."
          type: boolean
          default: false
        mode:
          description: "Select the type of latency measurement. The different types\
            \ of \nlatency measurements are:\n\n\nstore_forward:\nThe time interval\
            \ starting when the last bit of the frame leaves the\nsending port and\
            \ ending when the first bit of the frame is seen on\nthe receiving port\
            \ (LIFO).  This is based on the RFC 1242 standard.\n\n\ncut_through:\n\
            The time interval starting when the first bit of the frame leaves\nthe\
            \ sending port and ending when the first bit of the frame is seen\non\
            \ the receiving port (FIFO).  This is based on the RFC 1242 \nstandard."
          type: string
          enum:
          - store_forward
          - cut_through
          default: store_forward
    Event:
      description: |-
        The optional container for event configuration.
      type: object
      properties:
        enable:
          description: "True to enable all events. \nEnabling this option may affect\
            \ the resultant packet payload due to \nadditional instrumentation data."
          type: boolean
          default: false
        link:
          $ref: '#/components/schemas/Event.Link'
        rx_rate_threshold:
          $ref: '#/components/schemas/Event.RxRateThreshold'
        route_advertise_withdraw:
          $ref: '#/components/schemas/Event.RouteAdvertiseWithdraw'
    Event.RxRateThreshold:
      description: |-
        The optional container for rx rate threshold event configuration.
      type: object
      properties:
        enable:
          description: "True to enable the rx_rate_threshold event. \nEnabling this\
            \ option may affect the resultant packet payload due to \nadditional instrumentation\
            \ data."
          type: boolean
          default: false
        threshold:
          description: "True to enable notifications when the rx rate of a flow passes\
            \ above \nor below the threshold value. "
          type: number
          format: float
          maximum: 100
          minimum: 0
          default: 95
    Event.Link:
      description: |-
        The optional container for link up/down event configuration.
      type: object
      properties:
        enable:
          description: "True to enable notifications when a link up/down event occurs. "
          type: boolean
          default: false
    Event.RouteAdvertiseWithdraw:
      description: |-
        The optional container for route advertise/withdraw event configuration.
      type: object
      properties:
        enable:
          description: "True to enable notifications when a route advertise/withdraw\
            \ \nevent occurs. "
          type: boolean
          default: false
    Event.Request:
      type: object
      properties:
        type:
          description: "Constrain the events being returned by specifying event types.\n\
            If the list is empty then all event types will be returned. "
          type: array
          items:
            type: string
            enum:
            - link_down
            - link_up
            - route_withdraw
            - route_advertise
            - flow_rx_rate_above_threshold
            - flow_rx_rate_below_threshold
            example: route_withdraw
        source:
          description: "Constrain the events being returned by specifying event sources.\
            \ \nIf the list is empty then all event sources will be returned. \n\n\
            x-constraint:\n- /components/schemas/Port/properties/name\n- /components/schemas/Bgp.V4RouteRange/name\n\
            - /components/schemas/Bgp.V6RouteRange/name\n"
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Port/properties/name
          - /components/schemas/Bgp.V4RouteRange/name
          - /components/schemas/Bgp.V6RouteRange/name
    Event.Subscription:
      description: "A container that describes what events a system should provide\
        \ and \noptionally where to publish them.  "
      type: object
      properties:
        events:
          $ref: '#/components/schemas/Event.Request'
        callbackUrl:
          description: |-
            Indicates where a client wants to be notified of the events set in
            the events property.
            If this property is empty or null then no event notifications will
            be forwarded.
          type: string
          format: uri
          example: https://127.0.0.1/event/notification
    Response.Error:
      description: |-
        A list of errors that may have occurred while executing the request.
      type: object
      properties:
        errors:
          description: "A list of any system specific errors that have occurred while\
            \ \nexecuting the request."
          type: array
          items:
            type: string
    Response.Warning:
      description: |-
        A list of warnings that have occurred while executing the request.
      type: object
      properties:
        warnings:
          description: "A list of any system specific warnings that have occurred\
            \ while \nexecuting the request."
          type: array
          items:
            type: string
    Link.State:
      description: |-
        Port link state.
      type: object
      required:
      - state
      properties:
        port_names:
          description: |
            The names of port objects to. An empty or null list will control all port objects.

            x-constraint:
            - /components/schemas/Port/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Port/properties/name
        state:
          description: |-
            The link state.
          type: string
          enum:
          - up
          - down
    Transmit.State:
      description: |-
        Control the transmit state of flows.
      type: object
      required:
      - state
      properties:
        flow_names:
          description: |
            The names of flows to which the transmit state will be applied to. If the list of flow_names is empty or null the state will be applied to all configured flows.

            x-constraint:
            - /components/schemas/Flow/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Flow/properties/name
        state:
          description: |-
            The transmit state.
          type: string
          enum:
          - start
          - stop
          - pause
    Capture.State:
      description: |-
        Control port capture state
      type: object
      required:
      - state
      properties:
        port_names:
          description: |
            The name of ports to start capturing packets on. An empty or null list will control all port objects.

            x-constraint:
            - /components/schemas/Port/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Port/properties/name
        state:
          description: |-
            The capture state.
          type: string
          enum:
          - start
          - stop
    Flows.Update:
      description: |-
        A container of flows with associated properties to be updated without affecting the transmit state
      type: object
      required:
      - property_names
      - flows
      properties:
        property_names:
          description: |-
            Flow properties to be updated without affecting the transmit state
          type: array
          items:
            type: string
            enum:
            - rate
            - size
        flows:
          description: |-
            The list of configured flows for which given property will be updated.
          type: array
          items:
            $ref: '#/components/schemas/Flow'
    Route.State:
      description: |-
        Sets the device route state
      type: object
      required:
      - state
      properties:
        names:
          description: |
            The names of device route objects to control. If no names are specified then all route objects that match the x-constraint will be affected.

            x-constraint:
            - /components/schemas/Bgp.V4RouteRange/properties/name
            - /components/schemas/Bgp.V6RouteRange/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Bgp.V4RouteRange/properties/name
          - /components/schemas/Bgp.V6RouteRange/properties/name
        state:
          description: |-
            Route specific states
          type: string
          enum:
          - withdraw
          - advertise
    Ping.Request:
      description: |-
        Ping request details
      type: object
      properties:
        endpoints:
          description: |-
            Array of ping requests
          type: array
          items:
            $ref: '#/components/schemas/Ping'
    Protocol.State:
      description: |-
        Sets all configured protocols to `start` or `stop` state.
      type: object
      required:
      - state
      properties:
        state:
          description: |-
            Protocol specific states
          type: string
          enum:
          - start
          - stop
    Ping:
      type: object
      properties:
        choice:
          description: |-
            IPv4 or IPv6 ping.
          type: string
          enum:
          - ipv4
          - ipv6
          default: ipv4
        ipv4:
          $ref: '#/components/schemas/Ping.Ipv4'
        ipv6:
          $ref: '#/components/schemas/Ping.Ipv6'
    Ping.Ipv4:
      type: object
      properties:
        src_name:
          description: |
            A base IPv4 interface

            x-constraint:
            - /components/schemas/Device.Ipv4Base/properties/name
          type: string
          x-constraint:
          - /components/schemas/Device.Ipv4Base/properties/name
        dst_ip:
          description: |-
            IPv4 address to ping
          type: string
          format: ipv4
    Ping.Ipv6:
      type: object
      properties:
        src_name:
          description: |
            A base IPv6 interface

            x-constraint:
            - /components/schemas/Device.Ipv6Base/properties/name
          type: string
          x-constraint:
          - /components/schemas/Device.Ipv6Base/properties/name
        dst_ip:
          description: |-
            IPv6 addresses to ping.
          type: string
          format: ipv6
    Ping.Response:
      description: |-
        A container for ping responses.
      type: object
      properties:
        responses:
          type: array
          items:
            $ref: '#/components/schemas/Response'
    Response:
      type: object
      properties:
        src_name:
          description: |
            The name of the source IPv4 or IPv6 interface from which ping was sent.

            x-constraint:
            - /components/schemas/Device.Ipv4Base/properties/name
            - /components/schemas/Device.Ipv6Base/properties/name
          type: string
          x-constraint:
          - /components/schemas/Device.Ipv4Base/properties/name
          - /components/schemas/Device.Ipv6Base/properties/name
        dst_ip:
          description: |-
            Destination address.
          type: string
        result:
          description: |-
            Result of the ping request.
          type: string
          enum:
          - success
          - failure
          default: failure
    Metrics.Request:
      description: |-
        Request to traffic generator for metrics of choice
      type: object
      properties:
        choice:
          type: string
          enum:
          - port
          - flow
          - bgpv4
          - bgpv6
          - isis
          default: port
        port:
          $ref: '#/components/schemas/Port.Metrics.Request'
        flow:
          $ref: '#/components/schemas/Flow.Metrics.Request'
        bgpv4:
          $ref: '#/components/schemas/Bgpv4.Metrics.Request'
        bgpv6:
          $ref: '#/components/schemas/Bgpv6.Metrics.Request'
        isis:
          $ref: '#/components/schemas/Isis.Metrics.Request'
    Metrics.Response:
      description: |-
        Response containing chosen traffic generator metrics
      type: object
      properties:
        choice:
          type: string
          enum:
          - flow_metrics
          - port_metrics
          - bgpv4_metrics
          - bgpv6_metrics
          - isis_metrics
          default: port_metrics
        port_metrics:
          type: array
          items:
            $ref: '#/components/schemas/Port.Metric'
        flow_metrics:
          type: array
          items:
            $ref: '#/components/schemas/Flow.Metric'
        bgpv4_metrics:
          type: array
          items:
            $ref: '#/components/schemas/Bgpv4.Metric'
        bgpv6_metrics:
          type: array
          items:
            $ref: '#/components/schemas/Bgpv6.Metric'
        isis_metrics:
          type: array
          items:
            $ref: '#/components/schemas/Isis.Metric'
    Port.Metrics.Request:
      description: |-
        The port result request to the traffic generator
      type: object
      properties:
        port_names:
          description: |
            The names of objects to return results for. An empty list will return all port row results.

            x-constraint:
            - /components/schemas/Port/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Port/properties/name
        column_names:
          description: |-
            The list of column names that the returned result set will contain. If the list is empty then all columns will be returned. The name of the port cannot be excluded.
          type: array
          items:
            type: string
            enum:
            - transmit
            - location
            - link
            - capture
            - frames_tx
            - frames_rx
            - bytes_tx
            - bytes_rx
            - frames_tx_rate
            - frames_rx_rate
            - bytes_tx_rate
            - bytes_rx_rate
    Port.Metric:
      type: object
      properties:
        name:
          description: |
            The name of a configured port

            x-constraint:
            - /components/schemas/Port/properties/name
          type: string
          x-constraint:
          - /components/schemas/Port/properties/name
        location:
          description: |-
            The state of the connection to the test port location. The format should be the configured port location along with  any custom connection state message.
          type: string
        link:
          description: |-
            The state of the test port link The string can be up, down or a custom error message.
          type: string
          enum:
          - up
          - down
        capture:
          description: |-
            The state of the test port capture infrastructure. The string can be started, stopped or a custom error message.
          type: string
          enum:
          - started
          - stopped
        frames_tx:
          description: |-
            The current total number of frames transmitted
          type: integer
          format: int64
          minimum: 0
        frames_rx:
          description: |-
            The current total number of valid frames received
          type: integer
          format: int64
          minimum: 0
        bytes_tx:
          description: |-
            The current total number of bytes transmitted
          type: integer
          format: int64
          minimum: 0
        bytes_rx:
          description: |-
            The current total number of valid bytes received
          type: integer
          format: int64
          minimum: 0
        frames_tx_rate:
          description: |-
            The current rate of frames transmitted
          type: number
        frames_rx_rate:
          description: |-
            The current rate of valid frames received
          type: number
        bytes_tx_rate:
          description: |-
            The current rate of bytes transmitted
          type: number
        bytes_rx_rate:
          description: |-
            The current rate of bytes received
          type: number
    Flow.Metrics.Request:
      description: |-
        The container for a flow metric request.
      type: object
      properties:
        flow_names:
          description: |
            Flow metrics will be retrieved for these flow names.
            If no flow names are specified then all flows will be returned.

            x-constraint:
            - /components/schemas/Flow/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Flow/properties/name
        metric_groups:
          description: |-
            A list of metric groups used to disaggregate flows. A metric group that does not exist for a flow group MUST return an error.
          $ref: '#/components/schemas/Flow.MetricGroup.Request'
        metric_names:
          description: |-
            The list of metric names that the returned result set will contain. If the list is empty then all metrics will be returned.
          type: array
          items:
            type: string
            enum:
            - transmit
            - frames_tx
            - frames_rx
            - bytes_tx
            - bytes_rx
            - frames_tx_rate
            - frames_rx_rate
    Flow.MetricGroup.Request:
      type: object
      properties:
        choice:
          description: |-
            The type of disaggregation to be applied to the flow metrics.
          type: string
          enum:
          - ingress
          - egress
          default: ingress
        ingress:
          description: "Disaggregate the flow metrics by ingress packet header field\
            \ names.\nIf the items is empty then no disaggregation will be done. \n\
            \nx-constraint:\n- /components/schemas/Flow/properties/packet/../metric_group\n"
          type: array
          default: []
          items:
            type: string
          x-constraint:
          - /components/schemas/Flow/properties/packet/../metric_group
        egress:
          description: "Disaggregate the flow metrics by egress packet header field\
            \ names \nIf the items is empty then no disaggregation will be done. \n\
            \nx-constraint:\n- /components/schemas/Flow/properties/egress/../metric_group\n"
          type: array
          default: []
          items:
            type: string
          x-constraint:
          - /components/schemas/Flow/properties/egress/../metric_group
    Flow.Metric:
      description: |-
        A container for flow metrics.
        The container is keyed by the name, port_tx, port_rx and metric_groups
        values.
      type: object
      properties:
        name:
          description: |-
            The name of the flow
          type: string
          example: Tx -> Rx
        port_tx:
          description: |-
            The name of the transmit port
          type: string
        port_rx:
          description: |-
            The name of the receive port
          type: string
        metric_groups:
          description: |-
            Flow disaggregation groups.
          type: array
          items:
            $ref: '#/components/schemas/Flow.MetricGroup'
        transmit:
          description: |-
            The transmit state of the flow.
          type: string
          enum:
          - started
          - stopped
          - paused
        frames_tx:
          description: |-
            The current total number of frames transmitted
          type: integer
          format: int64
          minimum: 0
        frames_rx:
          description: |-
            The current total number of valid frames received
          type: integer
          format: int64
          minimum: 0
        bytes_tx:
          description: |-
            The current total number of bytes transmitted
          type: integer
          format: int64
          minimum: 0
        bytes_rx:
          description: |-
            The current total number of bytes received
          type: integer
          format: int64
          minimum: 0
        frames_tx_rate:
          description: |-
            The current rate of frames transmitted
          type: number
        frames_rx_rate:
          description: |-
            The current rate of valid frames received
          type: number
        loss:
          description: |-
            The percentage of lost frames
          type: number
        timestamps:
          $ref: '#/components/schemas/Metric.Timestamp'
        latency:
          $ref: '#/components/schemas/Metric.Latency'
    Flow.MetricGroup:
      type: object
      properties:
        name:
          description: |-
            Name of packet field metric group
          type: string
        value:
          description: |-
            Value of named packet field metric group
          type: string
    Metric.Timestamp:
      description: |-
        The container for timestamp metrics.
        The container will be empty if the timestamp has not been configured for
        the flow.
      type: object
      properties:
        first_timestamp_ns:
          description: |-
            First timestamp in nanoseconds
          type: number
          format: double
        last_timestamp_ns:
          description: |-
            Last timestamp in nanoseconds
          type: number
          format: double
    Metric.Latency:
      description: "The container for latency metrics. \nThe min/max/avg values are\
        \ dependent on the type of latency measurement \nmode that is configured.\n\
        The container will be empty if the latency has not been configured for\nthe\
        \ flow."
      type: object
      properties:
        minimum_ns:
          description: |-
            Minimum latency in nanoseconds
          type: number
          format: double
        maximum_ns:
          description: |-
            Maximum latency in nanoseconds
          type: number
          format: double
        average_ns:
          description: |-
            Average latency in nanoseconds
          type: number
          format: double
    Bgpv4.Metrics.Request:
      description: |-
        The request to retrieve BGPv4 per peer metrics/statistics.
      type: object
      properties:
        peer_names:
          description: |
            The names of BGPv4 peers to return results for. An empty list will return results for all BGPv4 peers.

            x-constraint:
            - /components/schemas/Bgp.V4peer/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Bgp.V4peer/properties/name
        column_names:
          description: |-
            The list of column names that the returned result set will contain. If the list is empty then all columns will be returned except for any result_groups. The name of the BGPv4 peer cannot be excluded.
          type: array
          items:
            type: string
            enum:
            - session_state
            - session_flap_count
            - routes_advertised
            - routes_received
            - route_withdraws_sent
            - route_withdraws_received
            - updates_sent
            - updates_received
            - opens_sent
            - opens_received
            - keepalives_sent
            - keepalives_received
            - notifications_sent
            - notifications_received
    Bgpv4.Metric:
      description: |-
        BGPv4 per peer statistics information.
      type: object
      properties:
        name:
          description: |-
            The name of a configured BGPv4 peer.
          type: string
        session_state:
          description: |-
            Session state as up or down. Up refers to an Established state and Down refers to any other state.
          type: string
          enum:
          - up
          - down
        session_flap_count:
          description: |-
            Number of times the session went from Up to Down state.
          type: integer
        routes_advertised:
          description: |-
            Number of routes advertised.
          type: integer
        routes_received:
          description: |-
            Number of routes received.
          type: integer
        route_withdraws_sent:
          description: |-
            Number of route withdraws sent.
          type: integer
        route_withdraws_received:
          description: |-
            Number of route withdraws received.
          type: integer
        updates_sent:
          description: |-
            Number of Update messages sent.
          type: integer
        updates_received:
          description: |-
            Number of Update messages received.
          type: integer
        opens_sent:
          description: |-
            Number of Open messages sent.
          type: integer
        opens_received:
          description: |-
            Number of Open messages received.
          type: integer
        keepalives_sent:
          description: |-
            Number of Keepalive messages sent.
          type: integer
        keepalives_received:
          description: |-
            Number of Keepalive messages received.
          type: integer
        notifications_sent:
          description: |-
            Number of Notification messages sent.
          type: integer
        notifications_received:
          description: |-
            Number of Notification messages received.
          type: integer
    Bgpv6.Metrics.Request:
      description: |-
        The request to retrieve BGPv6 per peer metrics/statistics.
      type: object
      properties:
        peer_names:
          description: |
            The names of BGPv6 peers to return results for. An empty list will return results for all BGPv6 peers.

            x-constraint:
            - /components/schemas/Bgp.V6peer/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Bgp.V6peer/properties/name
        column_names:
          description: |-
            The list of column names that the returned result set will contain. If the list is empty then all columns will be returned except for any result_groups. The name of the BGPv6 peer cannot be excluded.
          type: array
          items:
            type: string
            enum:
            - session_state
            - session_flap_count
            - routes_advertised
            - routes_received
            - route_withdraws_sent
            - route_withdraws_received
            - updates_sent
            - updates_received
            - opens_sent
            - opens_received
            - keepalives_sent
            - keepalives_received
            - notifications_sent
            - notifications_received
    Bgpv6.Metric:
      description: |-
        BGPv6 per peer statistics information.
      type: object
      properties:
        name:
          description: |-
            The name of a configured BGPv6 peer.
          type: string
        session_state:
          description: |-
            Session state as up or down. Up refers to an Established state and Down refers to any other state.
          type: string
          enum:
          - up
          - down
        session_flap_count:
          description: |-
            Number of times the session went from Up to Down state.
          type: integer
        routes_advertised:
          description: |-
            Number of routes advertised.
          type: integer
        routes_received:
          description: |-
            Number of routes received.
          type: integer
        route_withdraws_sent:
          description: |-
            Number of route withdraws sent.
          type: integer
        route_withdraws_received:
          description: |-
            Number of route withdraws received.
          type: integer
        updates_sent:
          description: |-
            Number of Update messages sent.
          type: integer
        updates_received:
          description: |-
            Number of Update messages received.
          type: integer
        opens_sent:
          description: |-
            Number of Open messages sent.
          type: integer
        opens_received:
          description: |-
            Number of Open messages received.
          type: integer
        keepalives_sent:
          description: |-
            Number of Keepalive messages sent.
          type: integer
        keepalives_received:
          description: |-
            Number of Keepalive messages received.
          type: integer
        notifications_sent:
          description: |-
            Number of Notification messages sent.
          type: integer
        notifications_received:
          description: |-
            Number of Notification messages received.
          type: integer
    Isis.Metrics.Request:
      description: |-
        The request to retrieve ISIS per Router metrics/statistics.
      type: object
      properties:
        router_names:
          description: |
            The names of ISIS Routers to return results for. An empty list will return results for all ISIS router.

            x-constraint:
            - /components/schemas/Device.IsisRouter/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Device.IsisRouter/properties/name
        column_names:
          description: |-
            The list of column names that the returned result set will contain. If the list is empty then all columns will be returned except for any result_groups. The name of the ISIS Router cannot be excluded.
          type: array
          items:
            type: string
            enum:
            - l1_sessions_up
            - l1_session_flap
            - l1_database_size
            - l1_broadcast_hellos_sent
            - l1_broadcast_hellos_received
            - l1_point_to_point_hellos_sent
            - l1_point_to_point_hellos_received
            - l1_psnp_sent
            - l1_psnp_received
            - l1_csnp_sent
            - l1_csnp_received
            - l1_lsp_sent
            - l1_lsp_received
            - l2_sessions_up
            - l2_session_flap
            - l2_database_size
            - l2_broadcast_hellos_sent
            - l2_broadcast_hellos_received
            - l2_point_to_point_hellos_sent
            - l2_point_to_point_hellos_received
            - l2_psnp_sent
            - l2_psnp_received
            - l2_csnp_sent
            - l2_csnp_received
            - l2_lsp_sent
            - l2_lsp_received
    Isis.Metric:
      description: |-
        ISIS per router statistics information.
      type: object
      properties:
        name:
          description: |-
            The name of a configured ISIS router.
          type: string
        l1_sessions_up:
          description: |-
            The number of Level 1 (L1) sessions that are fully up.
          type: integer
        l1_session_flap:
          description: |-
            The number of Level 1 Sessions Flap.
          type: integer
        l1_broadcast_hellos_sent:
          description: |-
            Number of Level 1 Hello messages sent.
          type: integer
        l1_broadcast_hellos_received:
          description: |-
            Number of Level 1 Hello messages received.
          type: integer
        l1_point_to_point_hellos_sent:
          description: |-
            Number of Level 1 Point-to-Point(P2P) Hello messages sent.
          type: integer
        l1_point_to_point_hellos_received:
          description: |-
            Number of Level 1 Point-to-Point(P2P) Hello messages received.
          type: integer
        l1_database_size:
          description: |-
            Number of Link State Updates (LSPs) in the Level 1 LSP Databases.
          type: integer
        l1_psnp_sent:
          description: |-
            Number of Level 1 (L1) Partial Sequence Number Packet (PSNPs) sent.
          type: integer
        l1_psnp_received:
          description: |-
            Number of Level 1 (L1) Complete Sequence Number Packet (PSNPs) received.
          type: integer
        l1_csnp_sent:
          description: |-
            Number of Level 1 (L1) Complete Sequence Number Packet (CSNPs) sent.
          type: integer
        l1_csnp_received:
          description: |-
            Number of Level 1 (L1) Complete Sequence Number Packet (CSNPs) received.
          type: integer
        l1_lsp_sent:
          description: |-
            Number of Level 1 (L1) Link State Protocol Data Units (LSPs) sent.
          type: integer
        l1_lsp_received:
          description: |-
            Number of Level 1 (L1) Link State Protocol Data Units (LSPs) received.
          type: integer
        l2_sessions_up:
          description: |-
            The number of Level 2 (L2) sessions that are fully up.
          type: integer
        l2_session_flap:
          description: |-
            The number of Level 2 Sessions Flap.
          type: integer
        l2_broadcast_hellos_sent:
          description: |-
            Number of Level 2 Hello messages sent.
          type: integer
        l2_broadcast_hellos_received:
          description: |-
            Number of Level 2 Hello messages received.
          type: integer
        l2_point_to_point_hellos_sent:
          description: |-
            Number of Level 2 Point-to-Point(P2P) Hello messages sent.
          type: integer
        l2_point_to_point_hellos_received:
          description: |-
            Number of Level 2 Point-to-Point(P2P) Hello messages received.
          type: integer
        l2_database_size:
          description: |-
            Number of Link State Updates (LSPs) in the Level 2 LSP Databases.
          type: integer
        l2_psnp_sent:
          description: |-
            Number of Level 2 (L2) Partial Sequence Number Packet (PSNPs) sent.
          type: integer
        l2_psnp_received:
          description: |-
            Number of Level 2 (L2) Complete Sequence Number Packet (PSNPs) received.
          type: integer
        l2_csnp_sent:
          description: |-
            Number of Level 2 (L2) Complete Sequence Number Packet (CSNPs) sent.
          type: integer
        l2_csnp_received:
          description: |-
            Number of Level 2 (L2) Complete Sequence Number Packet (CSNPs) received.
          type: integer
        l2_lsp_sent:
          description: |-
            Number of Level 2 (L2) Link State Protocol Data Units (LSPs) sent.
          type: integer
        l2_lsp_received:
          description: |-
            Number of Level 2 (L2) Link State Protocol Data Units (LSPs) received.
          type: integer
    States.Request:
      description: |-
        Request to traffic generator for states of choice
      type: object
      properties:
        choice:
          type: string
          enum:
          - ipv4_neighbors
          - ipv6_neighbors
          default: ipv4_neighbors
        ipv4_neighbors:
          $ref: '#/components/schemas/Neighborsv4.States.Request'
        ipv6_neighbors:
          $ref: '#/components/schemas/Neighborsv6.States.Request'
    States.Response:
      description: |-
        Response containing chosen traffic generator states
      type: object
      properties:
        choice:
          type: string
          enum:
          - ipv4_neighbors
          - ipv6_neighbors
          default: ipv4_neighbors
        ipv4_neighbors:
          type: array
          items:
            $ref: '#/components/schemas/Neighborsv4.State'
        ipv6_neighbors:
          type: array
          items:
            $ref: '#/components/schemas/Neighborsv6.State'
    Neighborsv4.States.Request:
      description: |-
        The request to retrieve IPv4 Neighbor state (ARP cache entries) of a network interface(s).
      type: object
      properties:
        ethernet_names:
          description: |
            The names of Ethernet interfaces for which Neighbor state (ARP cache entries) will be retrieved. If no names are specified then the results will contain Neighbor state (ARP cache entries) for all available Ethernet interfaces.

            x-constraint:
            - /components/schemas/Device.Ethernet/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Device.Ethernet/properties/name
    Neighborsv4.State:
      description: |-
        IPv4 Neighbor state (ARP cache entry).
      type: object
      required:
      - ethernet_name
      - ipv4_address
      properties:
        ethernet_name:
          description: |-
            The name of the Ethernet interface associated with the Neighbor state (ARP cache entry).
          type: string
        ipv4_address:
          description: |-
            The IPv4 address of the neighbor.
          type: string
          format: ipv4
        link_layer_address:
          description: |-
            The link-layer address (MAC) of the neighbor.
          type: string
          format: mac
    Neighborsv6.States.Request:
      description: |-
        The request to retrieve IPv6 Neighbor state (NDISC cache entries) of a network interface(s).
      type: object
      properties:
        ethernet_names:
          description: |
            The names of Ethernet interfaces for which Neighbor state (NDISC cache entries) will be retrieved. If no names are specified then the results will contain Neighbor state (NDISC cache entries) for all available Ethernet interfaces.

            x-constraint:
            - /components/schemas/Device.Ethernet/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Device.Ethernet/properties/name
    Neighborsv6.State:
      description: |-
        IPv6 Neighbor state (NDISC cache entry).
      type: object
      required:
      - ethernet_name
      - ipv6_address
      properties:
        ethernet_name:
          description: |-
            The name of the Ethernet interface associated with the Neighbor state (NDISC cache entry).
          type: string
        ipv6_address:
          description: |-
            The IPv6 address of the neighbor.
          type: string
          format: ipv6
        link_layer_address:
          description: |-
            The link-layer address (MAC) of the neighbor.
          type: string
          format: mac
    Capture.Request:
      description: |-
        The capture result request to the traffic generator. Stops the port capture on the port_name and returns the capture.
      type: object
      required:
      - port_name
      properties:
        port_name:
          description: |
            The name of a port a capture is started on.

            x-constraint:
            - /components/schemas/Port/properties/name
          type: string
          x-constraint:
          - /components/schemas/Port/properties/name
    Pattern.Flow.Ethernet.Dst.Counter:
      description: |-
        mac counter pattern
      type: object
      properties:
        start:
          type: string
          default: 00:00:00:00:00:00
          format: mac
        step:
          type: string
          default: 00:00:00:00:00:01
          format: mac
        count:
          type: integer
          default: 1
    Pattern.Flow.Ethernet.Dst:
      description: |-
        Destination MAC address
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: string
          default: 00:00:00:00:00:00
          format: mac
        values:
          type: array
          items:
            type: string
          default:
          - 00:00:00:00:00:00
          format: mac
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ethernet.Dst.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ethernet.Dst.Counter'
    Pattern.Flow.Ethernet.Src.Counter:
      description: |-
        mac counter pattern
      type: object
      properties:
        start:
          type: string
          default: 00:00:00:00:00:00
          format: mac
        step:
          type: string
          default: 00:00:00:00:00:01
          format: mac
        count:
          type: integer
          default: 1
    Pattern.Flow.Ethernet.Src:
      description: |-
        Source MAC address
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: string
          default: 00:00:00:00:00:00
          format: mac
        values:
          type: array
          items:
            type: string
          default:
          - 00:00:00:00:00:00
          format: mac
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ethernet.Src.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ethernet.Src.Counter'
    Pattern.Flow.Ethernet.EtherType.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 65535
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
      x-constants:
        ipv4: 2048
        ipv6: 34525
        arp: 2054
        vlan_802_1_q: 33024
        reserved: 65535
    Pattern.Flow.Ethernet.EtherType:
      description: |-
        Ethernet type
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - auto
          - increment
          - decrement
          default: auto
        value:
          type: integer
          default: 65535
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 65535
          minimum: 0
          maximum: 65535
        auto:
          type: string
          enum:
          - auto
          default: auto
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ethernet.EtherType.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ethernet.EtherType.Counter'
      x-constants:
        ipv4: 2048
        ipv6: 34525
        arp: 2054
        vlan_802_1_q: 33024
        reserved: 65535
    Pattern.Flow.Ethernet.PfcQueue.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 7
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 7
        count:
          type: integer
          default: 1
    Pattern.Flow.Ethernet.PfcQueue:
      description: |-
        Priority flow control queue
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 7
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 7
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ethernet.PfcQueue.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ethernet.PfcQueue.Counter'
    Pattern.Flow.Vlan.Priority.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 7
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 7
        count:
          type: integer
          default: 1
    Pattern.Flow.Vlan.Priority:
      description: |-
        Priority code point
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 7
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 7
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Vlan.Priority.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Vlan.Priority.Counter'
    Pattern.Flow.Vlan.Cfi.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        count:
          type: integer
          default: 1
    Pattern.Flow.Vlan.Cfi:
      description: |-
        Canonical format indicator or drop elegible indicator
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 1
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Vlan.Cfi.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Vlan.Cfi.Counter'
    Pattern.Flow.Vlan.Id.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 4095
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 4095
        count:
          type: integer
          default: 1
    Pattern.Flow.Vlan.Id:
      description: |-
        Vlan identifier
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 4095
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 4095
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Vlan.Id.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Vlan.Id.Counter'
    Pattern.Flow.Vlan.Tpid.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 33024
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
      x-constants:
        x8100: 33024
        x88A8: 34984
        x9100: 37120
        x9200: 37376
        x9300: 37632
    Pattern.Flow.Vlan.Tpid:
      description: |-
        Protocol identifier
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 33024
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 33024
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Vlan.Tpid.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Vlan.Tpid.Counter'
      x-constants:
        x8100: 33024
        x88A8: 34984
        x9100: 37120
        x9200: 37376
        x9300: 37632
    Pattern.Flow.Vxlan.Flags.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 8
          minimum: 0
          maximum: 255
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 255
        count:
          type: integer
          default: 1
    Pattern.Flow.Vxlan.Flags:
      description: |-
        Flags field with a bit format of RRRRIRRR. The I flag MUST be set to 1 for a valid vxlan network id (VNI).   The other 7 bits (designated "R") are reserved fields and MUST be  set to zero on transmission and ignored on receipt.
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 8
          minimum: 0
          maximum: 255
        values:
          type: array
          items:
            type: integer
          default:
          - 8
          minimum: 0
          maximum: 255
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Vxlan.Flags.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Vxlan.Flags.Counter'
    Pattern.Flow.Vxlan.Reserved0.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 16777215
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 16777215
        count:
          type: integer
          default: 1
    Pattern.Flow.Vxlan.Reserved0:
      description: |-
        Reserved field
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 16777215
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 16777215
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Vxlan.Reserved0.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Vxlan.Reserved0.Counter'
    Pattern.Flow.Vxlan.Vni.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 16777215
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 16777215
        count:
          type: integer
          default: 1
    Pattern.Flow.Vxlan.Vni:
      description: |-
        VXLAN network id
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 16777215
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 16777215
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Vxlan.Vni.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Vxlan.Vni.Counter'
    Pattern.Flow.Vxlan.Reserved1.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 255
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 255
        count:
          type: integer
          default: 1
    Pattern.Flow.Vxlan.Reserved1:
      description: |-
        Reserved field
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 255
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 255
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Vxlan.Reserved1.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Vxlan.Reserved1.Counter'
    Pattern.Flow.Ipv4.Version.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 4
          minimum: 0
          maximum: 15
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 15
        count:
          type: integer
          default: 1
    Pattern.Flow.Ipv4.Version:
      description: |-
        Version
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 4
          minimum: 0
          maximum: 15
        values:
          type: array
          items:
            type: integer
          default:
          - 4
          minimum: 0
          maximum: 15
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Version.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Version.Counter'
    Pattern.Flow.Ipv4.HeaderLength.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 5
          minimum: 0
          maximum: 15
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 15
        count:
          type: integer
          default: 1
    Pattern.Flow.Ipv4.HeaderLength:
      description: |-
        Header length
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - auto
          - increment
          - decrement
          default: auto
        value:
          type: integer
          default: 5
          minimum: 0
          maximum: 15
        values:
          type: array
          items:
            type: integer
          default:
          - 5
          minimum: 0
          maximum: 15
        auto:
          type: string
          enum:
          - auto
          default: auto
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.HeaderLength.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.HeaderLength.Counter'
    Pattern.Flow.Ipv4.TotalLength.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 46
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.Ipv4.TotalLength:
      description: |-
        Total length
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - auto
          - increment
          - decrement
          default: auto
        value:
          type: integer
          default: 46
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 46
          minimum: 0
          maximum: 65535
        auto:
          type: string
          enum:
          - auto
          default: auto
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.TotalLength.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.TotalLength.Counter'
    Pattern.Flow.Ipv4.Identification.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.Ipv4.Identification:
      description: |-
        Identification
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Identification.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Identification.Counter'
    Pattern.Flow.Ipv4.Reserved.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        count:
          type: integer
          default: 1
    Pattern.Flow.Ipv4.Reserved:
      description: |-
        Reserved flag.
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 1
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Reserved.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Reserved.Counter'
    Pattern.Flow.Ipv4.DontFragment.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        count:
          type: integer
          default: 1
    Pattern.Flow.Ipv4.DontFragment:
      description: |-
        Dont fragment flag If the dont_fragment flag is set and fragmentation is required to route the packet then the packet is dropped.
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 1
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.DontFragment.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.DontFragment.Counter'
    Pattern.Flow.Ipv4.MoreFragments.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        count:
          type: integer
          default: 1
    Pattern.Flow.Ipv4.MoreFragments:
      description: |-
        More fragments flag
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 1
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.MoreFragments.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.MoreFragments.Counter'
    Pattern.Flow.Ipv4.FragmentOffset.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 31
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 31
        count:
          type: integer
          default: 1
    Pattern.Flow.Ipv4.FragmentOffset:
      description: |-
        Fragment offset
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 31
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 31
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.FragmentOffset.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.FragmentOffset.Counter'
    Pattern.Flow.Ipv4.TimeToLive.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 64
          minimum: 0
          maximum: 255
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 255
        count:
          type: integer
          default: 1
    Pattern.Flow.Ipv4.TimeToLive:
      description: |-
        Time to live
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 64
          minimum: 0
          maximum: 255
        values:
          type: array
          items:
            type: integer
          default:
          - 64
          minimum: 0
          maximum: 255
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.TimeToLive.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.TimeToLive.Counter'
    Pattern.Flow.Ipv4.Protocol.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 61
          minimum: 0
          maximum: 255
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 255
        count:
          type: integer
          default: 1
    Pattern.Flow.Ipv4.Protocol:
      description: |-
        Protocol, default is 61 any host internal protocol
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - auto
          - increment
          - decrement
          default: auto
        value:
          type: integer
          default: 61
          minimum: 0
          maximum: 255
        values:
          type: array
          items:
            type: integer
          default:
          - 61
          minimum: 0
          maximum: 255
        auto:
          type: string
          enum:
          - auto
          default: auto
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Protocol.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Protocol.Counter'
    Pattern.Flow.Ipv4.HeaderChecksum:
      description: |-
        Header checksum
      type: object
      properties:
        choice:
          description: |-
            The type of checksum
          type: string
          enum:
          - generated
          - custom
          default: generated
        generated:
          description: |-
            A system generated checksum value
          type: string
          enum:
          - good
          - bad
          default: good
        custom:
          description: |-
            A custom checksum value
          type: integer
          minimum: 0
          maximum: 65535
    Pattern.Flow.Ipv4.Src.Counter:
      description: |-
        ipv4 counter pattern
      type: object
      properties:
        start:
          type: string
          default: 0.0.0.0
          format: ipv4
        step:
          type: string
          default: 0.0.0.1
          format: ipv4
        count:
          type: integer
          default: 1
    Pattern.Flow.Ipv4.Src:
      description: |-
        Source address
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: string
          default: 0.0.0.0
          format: ipv4
        values:
          type: array
          items:
            type: string
          default:
          - 0.0.0.0
          format: ipv4
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Src.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Src.Counter'
    Pattern.Flow.Ipv4.Dst.Counter:
      description: |-
        ipv4 counter pattern
      type: object
      properties:
        start:
          type: string
          default: 0.0.0.0
          format: ipv4
        step:
          type: string
          default: 0.0.0.1
          format: ipv4
        count:
          type: integer
          default: 1
    Pattern.Flow.Ipv4.Dst:
      description: |-
        Destination address
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: string
          default: 0.0.0.0
          format: ipv4
        values:
          type: array
          items:
            type: string
          default:
          - 0.0.0.0
          format: ipv4
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Dst.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Dst.Counter'
    Pattern.Flow.Ipv4.Priority.Raw.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 255
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 255
        count:
          type: integer
          default: 1
    Pattern.Flow.Ipv4.Priority.Raw:
      description: |-
        Raw priority
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 255
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 255
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Priority.Raw.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Priority.Raw.Counter'
    Pattern.Flow.Ipv4.Dscp.Phb.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 63
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 63
        count:
          type: integer
          default: 1
      x-constants:
        default: 0
        cs1: 8
        cs2: 16
        cs3: 24
        cs4: 32
        cs5: 40
        cs6: 48
        cs7: 56
        af11: 10
        af12: 12
        af13: 14
        af21: 18
        af22: 20
        af23: 22
        af31: 26
        af32: 28
        af33: 30
        af41: 34
        af42: 36
        af43: 38
        ef46: 46
    Pattern.Flow.Ipv4.Dscp.Phb:
      description: |-
        Per hop behavior
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 63
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 63
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Dscp.Phb.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Dscp.Phb.Counter'
      x-constants:
        default: 0
        cs1: 8
        cs2: 16
        cs3: 24
        cs4: 32
        cs5: 40
        cs6: 48
        cs7: 56
        af11: 10
        af12: 12
        af13: 14
        af21: 18
        af22: 20
        af23: 22
        af31: 26
        af32: 28
        af33: 30
        af41: 34
        af42: 36
        af43: 38
        ef46: 46
    Pattern.Flow.Ipv4.Dscp.Ecn.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 3
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 3
        count:
          type: integer
          default: 1
      x-constants:
        non_capable: 0
        capable_transport_0: 1
        capable_transport_1: 2
        congestion_encountered: 3
    Pattern.Flow.Ipv4.Dscp.Ecn:
      description: |-
        Explicit congestion notification
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 3
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 3
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Dscp.Ecn.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Dscp.Ecn.Counter'
      x-constants:
        non_capable: 0
        capable_transport_0: 1
        capable_transport_1: 2
        congestion_encountered: 3
    Pattern.Flow.Ipv4.Tos.Precedence.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 7
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 7
        count:
          type: integer
          default: 1
      x-constants:
        routine: 0
        priority: 1
        immediate: 2
        flash: 3
        flash_override: 4
        critic_ecp: 5
        internetwork_control: 6
        network_control: 7
    Pattern.Flow.Ipv4.Tos.Precedence:
      description: |-
        Precedence
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 7
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 7
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Precedence.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Precedence.Counter'
      x-constants:
        routine: 0
        priority: 1
        immediate: 2
        flash: 3
        flash_override: 4
        critic_ecp: 5
        internetwork_control: 6
        network_control: 7
    Pattern.Flow.Ipv4.Tos.Delay.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        count:
          type: integer
          default: 1
      x-constants:
        normal: 0
        low: 1
    Pattern.Flow.Ipv4.Tos.Delay:
      description: |-
        Delay
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 1
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Delay.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Delay.Counter'
      x-constants:
        normal: 0
        low: 1
    Pattern.Flow.Ipv4.Tos.Throughput.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        count:
          type: integer
          default: 1
      x-constants:
        normal: 0
        low: 1
    Pattern.Flow.Ipv4.Tos.Throughput:
      description: |-
        Throughput
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 1
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Throughput.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Throughput.Counter'
      x-constants:
        normal: 0
        low: 1
    Pattern.Flow.Ipv4.Tos.Reliability.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        count:
          type: integer
          default: 1
      x-constants:
        normal: 0
        low: 1
    Pattern.Flow.Ipv4.Tos.Reliability:
      description: |-
        Reliability
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 1
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Reliability.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Reliability.Counter'
      x-constants:
        normal: 0
        low: 1
    Pattern.Flow.Ipv4.Tos.Monetary.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        count:
          type: integer
          default: 1
      x-constants:
        normal: 0
        low: 1
    Pattern.Flow.Ipv4.Tos.Monetary:
      description: |-
        Monetary
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 1
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Monetary.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Monetary.Counter'
      x-constants:
        normal: 0
        low: 1
    Pattern.Flow.Ipv4.Tos.Unused.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        count:
          type: integer
          default: 1
    Pattern.Flow.Ipv4.Tos.Unused:
      description: |-
        Unused
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 1
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Unused.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Unused.Counter'
    Pattern.Flow.Ipv6.Version.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 6
          minimum: 0
          maximum: 15
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 15
        count:
          type: integer
          default: 1
    Pattern.Flow.Ipv6.Version:
      description: |-
        Version number
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 6
          minimum: 0
          maximum: 15
        values:
          type: array
          items:
            type: integer
          default:
          - 6
          minimum: 0
          maximum: 15
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.Version.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.Version.Counter'
    Pattern.Flow.Ipv6.TrafficClass.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 255
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 255
        count:
          type: integer
          default: 1
    Pattern.Flow.Ipv6.TrafficClass:
      description: |-
        Traffic class
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 255
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 255
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.TrafficClass.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.TrafficClass.Counter'
    Pattern.Flow.Ipv6.FlowLabel.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 1048575
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 1048575
        count:
          type: integer
          default: 1
    Pattern.Flow.Ipv6.FlowLabel:
      description: |-
        Flow label
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 1048575
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 1048575
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.FlowLabel.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.FlowLabel.Counter'
    Pattern.Flow.Ipv6.PayloadLength.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.Ipv6.PayloadLength:
      description: |-
        Payload length
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - auto
          - increment
          - decrement
          default: auto
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        auto:
          type: string
          enum:
          - auto
          default: auto
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.PayloadLength.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.PayloadLength.Counter'
    Pattern.Flow.Ipv6.NextHeader.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 59
          minimum: 0
          maximum: 255
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 255
        count:
          type: integer
          default: 1
      x-constants:
        hopopt: 0
        icmp: 1
        igmp: 2
        ggp: 3
        ip_in_ip: 4
        st: 5
        tcp: 6
        cpt: 7
        egp: 8
        igp: 9
        no_next_header: 59
    Pattern.Flow.Ipv6.NextHeader:
      description: |-
        Next header
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 59
          minimum: 0
          maximum: 255
        values:
          type: array
          items:
            type: integer
          default:
          - 59
          minimum: 0
          maximum: 255
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.NextHeader.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.NextHeader.Counter'
      x-constants:
        hopopt: 0
        icmp: 1
        igmp: 2
        ggp: 3
        ip_in_ip: 4
        st: 5
        tcp: 6
        cpt: 7
        egp: 8
        igp: 9
        no_next_header: 59
    Pattern.Flow.Ipv6.HopLimit.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 64
          minimum: 0
          maximum: 255
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 255
        count:
          type: integer
          default: 1
    Pattern.Flow.Ipv6.HopLimit:
      description: |-
        Hop limit
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 64
          minimum: 0
          maximum: 255
        values:
          type: array
          items:
            type: integer
          default:
          - 64
          minimum: 0
          maximum: 255
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.HopLimit.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.HopLimit.Counter'
    Pattern.Flow.Ipv6.Src.Counter:
      description: |-
        ipv6 counter pattern
      type: object
      properties:
        start:
          type: string
          default: ::0
          format: ipv6
        step:
          type: string
          default: ::1
          format: ipv6
        count:
          type: integer
          default: 1
    Pattern.Flow.Ipv6.Src:
      description: |-
        Source address
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: string
          default: ::0
          format: ipv6
        values:
          type: array
          items:
            type: string
          default:
          - ::0
          format: ipv6
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.Src.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.Src.Counter'
    Pattern.Flow.Ipv6.Dst.Counter:
      description: |-
        ipv6 counter pattern
      type: object
      properties:
        start:
          type: string
          default: ::0
          format: ipv6
        step:
          type: string
          default: ::1
          format: ipv6
        count:
          type: integer
          default: 1
    Pattern.Flow.Ipv6.Dst:
      description: |-
        Destination address
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: string
          default: ::0
          format: ipv6
        values:
          type: array
          items:
            type: string
          default:
          - ::0
          format: ipv6
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.Dst.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.Dst.Counter'
    Pattern.Flow.PfcPause.Dst.Counter:
      description: |-
        mac counter pattern
      type: object
      properties:
        start:
          type: string
          default: 01:80:c2:00:00:01
          format: mac
        step:
          type: string
          default: 00:00:00:00:00:01
          format: mac
        count:
          type: integer
          default: 1
    Pattern.Flow.PfcPause.Dst:
      description: |-
        Destination MAC address
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: string
          default: 01:80:c2:00:00:01
          format: mac
        values:
          type: array
          items:
            type: string
          default:
          - 01:80:c2:00:00:01
          format: mac
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.Dst.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.Dst.Counter'
    Pattern.Flow.PfcPause.Src.Counter:
      description: |-
        mac counter pattern
      type: object
      properties:
        start:
          type: string
          default: 00:00:00:00:00:00
          format: mac
        step:
          type: string
          default: 00:00:00:00:00:01
          format: mac
        count:
          type: integer
          default: 1
    Pattern.Flow.PfcPause.Src:
      description: |-
        Source MAC address
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: string
          default: 00:00:00:00:00:00
          format: mac
        values:
          type: array
          items:
            type: string
          default:
          - 00:00:00:00:00:00
          format: mac
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.Src.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.Src.Counter'
    Pattern.Flow.PfcPause.EtherType.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 34824
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
      x-constants:
        x8808: 34824
    Pattern.Flow.PfcPause.EtherType:
      description: |-
        Ethernet type
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 34824
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 34824
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.EtherType.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.EtherType.Counter'
      x-constants:
        x8808: 34824
    Pattern.Flow.PfcPause.ControlOpCode.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 257
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.PfcPause.ControlOpCode:
      description: |-
        Control operation code
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 257
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 257
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.ControlOpCode.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.ControlOpCode.Counter'
    Pattern.Flow.PfcPause.ClassEnableVector.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.PfcPause.ClassEnableVector:
      description: |-
        Destination
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.ClassEnableVector.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.ClassEnableVector.Counter'
    Pattern.Flow.PfcPause.PauseClass0.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.PfcPause.PauseClass0:
      description: |-
        Pause class 0
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass0.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass0.Counter'
    Pattern.Flow.PfcPause.PauseClass1.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.PfcPause.PauseClass1:
      description: |-
        Pause class 1
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass1.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass1.Counter'
    Pattern.Flow.PfcPause.PauseClass2.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.PfcPause.PauseClass2:
      description: |-
        Pause class 2
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass2.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass2.Counter'
    Pattern.Flow.PfcPause.PauseClass3.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.PfcPause.PauseClass3:
      description: |-
        Pause class 3
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass3.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass3.Counter'
    Pattern.Flow.PfcPause.PauseClass4.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.PfcPause.PauseClass4:
      description: |-
        Pause class 4
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass4.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass4.Counter'
    Pattern.Flow.PfcPause.PauseClass5.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.PfcPause.PauseClass5:
      description: |-
        Pause class 5
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass5.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass5.Counter'
    Pattern.Flow.PfcPause.PauseClass6.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.PfcPause.PauseClass6:
      description: |-
        Pause class 6
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass6.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass6.Counter'
    Pattern.Flow.PfcPause.PauseClass7.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.PfcPause.PauseClass7:
      description: |-
        Pause class 7
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass7.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass7.Counter'
    Pattern.Flow.EthernetPause.Dst.Counter:
      description: |-
        mac counter pattern
      type: object
      properties:
        start:
          type: string
          default: 01:80:c2:00:00:01
          format: mac
        step:
          type: string
          default: 00:00:00:00:00:01
          format: mac
        count:
          type: integer
          default: 1
    Pattern.Flow.EthernetPause.Dst:
      description: |-
        Destination MAC address
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: string
          default: 01:80:c2:00:00:01
          format: mac
        values:
          type: array
          items:
            type: string
          default:
          - 01:80:c2:00:00:01
          format: mac
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.Dst.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.Dst.Counter'
    Pattern.Flow.EthernetPause.Src.Counter:
      description: |-
        mac counter pattern
      type: object
      properties:
        start:
          type: string
          default: 00:00:00:00:00:00
          format: mac
        step:
          type: string
          default: 00:00:00:00:00:01
          format: mac
        count:
          type: integer
          default: 1
    Pattern.Flow.EthernetPause.Src:
      description: |-
        Source MAC address
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: string
          default: 00:00:00:00:00:00
          format: mac
        values:
          type: array
          items:
            type: string
          default:
          - 00:00:00:00:00:00
          format: mac
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.Src.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.Src.Counter'
    Pattern.Flow.EthernetPause.EtherType.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 34824
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
      x-constants:
        flow_control: 34824
    Pattern.Flow.EthernetPause.EtherType:
      description: |-
        Ethernet type
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 34824
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 34824
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.EtherType.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.EtherType.Counter'
      x-constants:
        flow_control: 34824
    Pattern.Flow.EthernetPause.ControlOpCode.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.EthernetPause.ControlOpCode:
      description: |-
        Control operation code
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 1
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.ControlOpCode.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.ControlOpCode.Counter'
    Pattern.Flow.EthernetPause.Time.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.EthernetPause.Time:
      description: |-
        Time
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.Time.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.Time.Counter'
    Pattern.Flow.Tcp.SrcPort.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.Tcp.SrcPort:
      description: |-
        Source port
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.SrcPort.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.SrcPort.Counter'
    Pattern.Flow.Tcp.DstPort.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.Tcp.DstPort:
      description: |-
        Destination port
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.DstPort.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.DstPort.Counter'
    Pattern.Flow.Tcp.SeqNum.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 4294967295
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 4294967295
        count:
          type: integer
          default: 1
    Pattern.Flow.Tcp.SeqNum:
      description: |-
        Sequence number
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 4294967295
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 4294967295
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.SeqNum.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.SeqNum.Counter'
    Pattern.Flow.Tcp.AckNum.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 4294967295
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 4294967295
        count:
          type: integer
          default: 1
    Pattern.Flow.Tcp.AckNum:
      description: |-
        Acknowledgement number
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 4294967295
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 4294967295
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.AckNum.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.AckNum.Counter'
    Pattern.Flow.Tcp.DataOffset.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 15
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 15
        count:
          type: integer
          default: 1
    Pattern.Flow.Tcp.DataOffset:
      description: |-
        The number of 32 bit words in the TCP header. This indicates where the data begins.
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 15
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 15
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.DataOffset.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.DataOffset.Counter'
    Pattern.Flow.Tcp.EcnNs.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        count:
          type: integer
          default: 1
    Pattern.Flow.Tcp.EcnNs:
      description: |-
        Explicit congestion notification, concealment protection.
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 1
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.EcnNs.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.EcnNs.Counter'
    Pattern.Flow.Tcp.EcnCwr.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        count:
          type: integer
          default: 1
    Pattern.Flow.Tcp.EcnCwr:
      description: |-
        Explicit congestion notification, congestion window reduced.
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 1
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.EcnCwr.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.EcnCwr.Counter'
    Pattern.Flow.Tcp.EcnEcho.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        count:
          type: integer
          default: 1
    Pattern.Flow.Tcp.EcnEcho:
      description: |-
        Explicit congestion notification, echo. 1 indicates the peer is ecn capable. 0 indicates that a packet with ipv4.ecn = 11 in the ip header was  received during normal transmission.
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 1
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.EcnEcho.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.EcnEcho.Counter'
    Pattern.Flow.Tcp.CtlUrg.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        count:
          type: integer
          default: 1
    Pattern.Flow.Tcp.CtlUrg:
      description: |-
        A value of 1 indicates that the urgent pointer field is significant.
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 1
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlUrg.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlUrg.Counter'
    Pattern.Flow.Tcp.CtlAck.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        count:
          type: integer
          default: 1
    Pattern.Flow.Tcp.CtlAck:
      description: |-
        A value of 1 indicates that the ackknowledgment field is significant.
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 1
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlAck.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlAck.Counter'
    Pattern.Flow.Tcp.CtlPsh.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        count:
          type: integer
          default: 1
    Pattern.Flow.Tcp.CtlPsh:
      description: "Asks to push the buffered data to the receiving application. "
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 1
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlPsh.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlPsh.Counter'
    Pattern.Flow.Tcp.CtlRst.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        count:
          type: integer
          default: 1
    Pattern.Flow.Tcp.CtlRst:
      description: "Reset the connection. "
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 1
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlRst.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlRst.Counter'
    Pattern.Flow.Tcp.CtlSyn.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        count:
          type: integer
          default: 1
    Pattern.Flow.Tcp.CtlSyn:
      description: "Synchronize sequenece numbers. "
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 1
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlSyn.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlSyn.Counter'
    Pattern.Flow.Tcp.CtlFin.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        count:
          type: integer
          default: 1
    Pattern.Flow.Tcp.CtlFin:
      description: "Last packet from the sender. "
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 1
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlFin.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlFin.Counter'
    Pattern.Flow.Tcp.Window.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.Tcp.Window:
      description: |-
        Tcp connection window.
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.Window.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.Window.Counter'
    Pattern.Flow.Udp.SrcPort.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.Udp.SrcPort:
      description: |-
        Source port
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Udp.SrcPort.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Udp.SrcPort.Counter'
    Pattern.Flow.Udp.DstPort.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.Udp.DstPort:
      description: |-
        Destination port
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Udp.DstPort.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Udp.DstPort.Counter'
    Pattern.Flow.Udp.Length.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.Udp.Length:
      description: |-
        Length
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Udp.Length.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Udp.Length.Counter'
    Pattern.Flow.Udp.Checksum:
      description: |-
        UDP checksum
      type: object
      properties:
        choice:
          description: |-
            The type of checksum
          type: string
          enum:
          - generated
          - custom
          default: generated
        generated:
          description: |-
            A system generated checksum value
          type: string
          enum:
          - good
          - bad
          default: good
        custom:
          description: |-
            A custom checksum value
          type: integer
          minimum: 0
          maximum: 65535
    Pattern.Flow.Gre.ChecksumPresent.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        count:
          type: integer
          default: 1
    Pattern.Flow.Gre.ChecksumPresent:
      description: |-
        Checksum present bit
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 1
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gre.ChecksumPresent.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gre.ChecksumPresent.Counter'
    Pattern.Flow.Gre.Reserved0.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 4095
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 4095
        count:
          type: integer
          default: 1
    Pattern.Flow.Gre.Reserved0:
      description: |-
        Reserved bits
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 4095
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 4095
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gre.Reserved0.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gre.Reserved0.Counter'
    Pattern.Flow.Gre.Version.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 7
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 7
        count:
          type: integer
          default: 1
    Pattern.Flow.Gre.Version:
      description: |-
        GRE version number
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 7
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 7
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gre.Version.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gre.Version.Counter'
    Pattern.Flow.Gre.Protocol.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 2048
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
      x-constants:
        ipv4: 2048
        ipv6: 34525
    Pattern.Flow.Gre.Protocol:
      description: |-
        Protocol type of encapsulated payload
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 2048
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 2048
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gre.Protocol.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gre.Protocol.Counter'
      x-constants:
        ipv4: 2048
        ipv6: 34525
    Pattern.Flow.Gre.Checksum:
      description: |-
        Optional checksum of GRE header and payload. Only present if the checksum_present bit is set.
      type: object
      properties:
        choice:
          description: |-
            The type of checksum
          type: string
          enum:
          - generated
          - custom
          default: generated
        generated:
          description: |-
            A system generated checksum value
          type: string
          enum:
          - good
          - bad
          default: good
        custom:
          description: |-
            A custom checksum value
          type: integer
          minimum: 0
          maximum: 65535
    Pattern.Flow.Gre.Reserved1.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.Gre.Reserved1:
      description: |-
        Optional reserved field. Only present if the checksum_present bit is set.
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gre.Reserved1.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gre.Reserved1.Counter'
    Pattern.Flow.Gtpv1.Version.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 1
          minimum: 0
          maximum: 7
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 7
        count:
          type: integer
          default: 1
    Pattern.Flow.Gtpv1.Version:
      description: |-
        GTPv1 version
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 1
          minimum: 0
          maximum: 7
        values:
          type: array
          items:
            type: integer
          default:
          - 1
          minimum: 0
          maximum: 7
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.Version.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.Version.Counter'
    Pattern.Flow.Gtpv1.ProtocolType.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        count:
          type: integer
          default: 1
    Pattern.Flow.Gtpv1.ProtocolType:
      description: |-
        Protocol type, GTP is 1, GTP' is 0
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        values:
          type: array
          items:
            type: integer
          default:
          - 1
          minimum: 0
          maximum: 1
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.ProtocolType.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.ProtocolType.Counter'
    Pattern.Flow.Gtpv1.Reserved.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        count:
          type: integer
          default: 1
    Pattern.Flow.Gtpv1.Reserved:
      description: |-
        Reserved field
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 1
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.Reserved.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.Reserved.Counter'
    Pattern.Flow.Gtpv1.EFlag.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        count:
          type: integer
          default: 1
    Pattern.Flow.Gtpv1.EFlag:
      description: |-
        Extension header field present
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 1
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.EFlag.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.EFlag.Counter'
    Pattern.Flow.Gtpv1.SFlag.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        count:
          type: integer
          default: 1
    Pattern.Flow.Gtpv1.SFlag:
      description: |-
        Sequence number field present
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 1
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.SFlag.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.SFlag.Counter'
    Pattern.Flow.Gtpv1.PnFlag.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        count:
          type: integer
          default: 1
    Pattern.Flow.Gtpv1.PnFlag:
      description: |-
        N-PDU field present
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 1
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.PnFlag.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.PnFlag.Counter'
    Pattern.Flow.Gtpv1.MessageType.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 255
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 255
        count:
          type: integer
          default: 1
    Pattern.Flow.Gtpv1.MessageType:
      description: |-
        The type of GTP message Different types of messages are defined in 3GPP TS 29.060 section 7.1
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 255
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 255
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.MessageType.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.MessageType.Counter'
    Pattern.Flow.Gtpv1.MessageLength.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.Gtpv1.MessageLength:
      description: |-
        The length of the payload (the bytes following the mandatory 8-byte GTP header) in bytes that includes any optional fields
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.MessageLength.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.MessageLength.Counter'
    Pattern.Flow.Gtpv1.Teid.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 4294967295
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 4294967295
        count:
          type: integer
          default: 1
    Pattern.Flow.Gtpv1.Teid:
      description: |-
        Tunnel endpoint identifier (TEID) used to multiplex connections in the same GTP tunnel
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 4294967295
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 4294967295
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.Teid.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.Teid.Counter'
    Pattern.Flow.Gtpv1.SquenceNumber.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.Gtpv1.SquenceNumber:
      description: |-
        Sequence number. Exists if any of the e_flag, s_flag, or pn_flag bits are on.  Must be interpreted only if the s_flag bit is on.
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.SquenceNumber.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.SquenceNumber.Counter'
    Pattern.Flow.Gtpv1.NPduNumber.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 255
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 255
        count:
          type: integer
          default: 1
    Pattern.Flow.Gtpv1.NPduNumber:
      description: |-
        N-PDU number. Exists if any of the e_flag, s_flag, or pn_flag bits are on.  Must be interpreted only if the pn_flag bit is on.
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 255
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 255
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.NPduNumber.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.NPduNumber.Counter'
    Pattern.Flow.Gtpv1.NextExtensionHeaderType.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 255
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 255
        count:
          type: integer
          default: 1
    Pattern.Flow.Gtpv1.NextExtensionHeaderType:
      description: |-
        Next extension header. Exists if any of the e_flag, s_flag, or pn_flag bits are on.  Must be interpreted only if the e_flag bit is on.
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 255
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 255
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.NextExtensionHeaderType.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.NextExtensionHeaderType.Counter'
    Pattern.Flow.GtpExtension.ExtensionLength.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 255
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 255
        count:
          type: integer
          default: 1
    Pattern.Flow.GtpExtension.ExtensionLength:
      description: |-
        This field states the length of this extension header,  including the length, the contents, and the next extension header field, in 4-octet units, so the length of the extension must  always be a multiple of 4.
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 255
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 255
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.GtpExtension.ExtensionLength.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.GtpExtension.ExtensionLength.Counter'
    Pattern.Flow.GtpExtension.Contents.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 281474976710655
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 281474976710655
        count:
          type: integer
          default: 1
    Pattern.Flow.GtpExtension.Contents:
      description: |-
        The extension header contents
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 281474976710655
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 281474976710655
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.GtpExtension.Contents.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.GtpExtension.Contents.Counter'
    Pattern.Flow.GtpExtension.NextExtensionHeader.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 255
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 255
        count:
          type: integer
          default: 1
    Pattern.Flow.GtpExtension.NextExtensionHeader:
      description: |-
        It states the type of the next extension, or 0 if no next  extension exists.  This permits chaining several next extension headers.
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 255
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 255
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.GtpExtension.NextExtensionHeader.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.GtpExtension.NextExtensionHeader.Counter'
    Pattern.Flow.Gtpv2.Version.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 2
          minimum: 0
          maximum: 7
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 7
        count:
          type: integer
          default: 1
    Pattern.Flow.Gtpv2.Version:
      description: |-
        Version number
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 2
          minimum: 0
          maximum: 7
        values:
          type: array
          items:
            type: integer
          default:
          - 2
          minimum: 0
          maximum: 7
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Version.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Version.Counter'
    Pattern.Flow.Gtpv2.PiggybackingFlag.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        count:
          type: integer
          default: 1
    Pattern.Flow.Gtpv2.PiggybackingFlag:
      description: |-
        If piggybacking_flag is set to 1 then another GTP-C message with its own header shall be present at the end of the current message
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 1
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.PiggybackingFlag.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.PiggybackingFlag.Counter'
    Pattern.Flow.Gtpv2.TeidFlag.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 1
        count:
          type: integer
          default: 1
    Pattern.Flow.Gtpv2.TeidFlag:
      description: |-
        If teid_flag is set to 1 then the TEID field will be present  between the message length and the sequence number. All messages except Echo and Echo reply require TEID to be present
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 1
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 1
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.TeidFlag.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.TeidFlag.Counter'
    Pattern.Flow.Gtpv2.Spare1.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 7
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 7
        count:
          type: integer
          default: 1
    Pattern.Flow.Gtpv2.Spare1:
      description: |-
        A 3-bit reserved field (must be 0).
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 7
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 7
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Spare1.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Spare1.Counter'
    Pattern.Flow.Gtpv2.MessageType.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 255
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 255
        count:
          type: integer
          default: 1
    Pattern.Flow.Gtpv2.MessageType:
      description: |-
        An 8-bit field that indicates the type of GTP message. Different types of messages are defined in 3GPP TS 29.060 section 7.1
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 255
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 255
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.MessageType.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.MessageType.Counter'
    Pattern.Flow.Gtpv2.MessageLength.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.Gtpv2.MessageLength:
      description: |-
        A 16-bit field that indicates the length of the payload in bytes, excluding the mandatory GTP-c header (first 4 bytes). Includes the TEID and sequence_number if they are present.
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.MessageLength.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.MessageLength.Counter'
    Pattern.Flow.Gtpv2.Teid.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 4294967295
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 4294967295
        count:
          type: integer
          default: 1
    Pattern.Flow.Gtpv2.Teid:
      description: |-
        Tunnel endpoint identifier. A 32-bit (4-octet) field used to multiplex different connections in the same GTP tunnel. Is present only if the teid_flag is set.
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 4294967295
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 4294967295
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Teid.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Teid.Counter'
    Pattern.Flow.Gtpv2.SequenceNumber.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 16777215
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 16777215
        count:
          type: integer
          default: 1
    Pattern.Flow.Gtpv2.SequenceNumber:
      description: |-
        The sequence number
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 16777215
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 16777215
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.SequenceNumber.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.SequenceNumber.Counter'
    Pattern.Flow.Gtpv2.Spare2.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 255
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 255
        count:
          type: integer
          default: 1
    Pattern.Flow.Gtpv2.Spare2:
      description: |-
        Reserved field
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 255
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 255
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Spare2.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Spare2.Counter'
    Pattern.Flow.Arp.HardwareType.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
      x-constants:
        ethernet: 1
    Pattern.Flow.Arp.HardwareType:
      description: |-
        Network link protocol type
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 1
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Arp.HardwareType.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Arp.HardwareType.Counter'
      x-constants:
        ethernet: 1
    Pattern.Flow.Arp.ProtocolType.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 2048
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
      x-constants:
        ipv4: 2048
        ipv6: 34525
    Pattern.Flow.Arp.ProtocolType:
      description: |-
        The internetwork protocol for which the ARP request is intended
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 2048
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 2048
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Arp.ProtocolType.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Arp.ProtocolType.Counter'
      x-constants:
        ipv4: 2048
        ipv6: 34525
    Pattern.Flow.Arp.HardwareLength.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 6
          minimum: 0
          maximum: 255
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 255
        count:
          type: integer
          default: 1
    Pattern.Flow.Arp.HardwareLength:
      description: |-
        Length (in octets) of a hardware address
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 6
          minimum: 0
          maximum: 255
        values:
          type: array
          items:
            type: integer
          default:
          - 6
          minimum: 0
          maximum: 255
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Arp.HardwareLength.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Arp.HardwareLength.Counter'
    Pattern.Flow.Arp.ProtocolLength.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 4
          minimum: 0
          maximum: 255
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 255
        count:
          type: integer
          default: 1
    Pattern.Flow.Arp.ProtocolLength:
      description: |-
        Length (in octets) of internetwork addresses
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 4
          minimum: 0
          maximum: 255
        values:
          type: array
          items:
            type: integer
          default:
          - 4
          minimum: 0
          maximum: 255
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Arp.ProtocolLength.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Arp.ProtocolLength.Counter'
    Pattern.Flow.Arp.Operation.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
      x-constants:
        request: 1
        reply: 2
    Pattern.Flow.Arp.Operation:
      description: |-
        The operation that the sender is performing
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 1
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Arp.Operation.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Arp.Operation.Counter'
      x-constants:
        request: 1
        reply: 2
    Pattern.Flow.Arp.SenderHardwareAddr.Counter:
      description: |-
        mac counter pattern
      type: object
      properties:
        start:
          type: string
          default: 00:00:00:00:00:00
          format: mac
        step:
          type: string
          default: 00:00:00:00:00:01
          format: mac
        count:
          type: integer
          default: 1
    Pattern.Flow.Arp.SenderHardwareAddr:
      description: |-
        Media address of the sender
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: string
          default: 00:00:00:00:00:00
          format: mac
        values:
          type: array
          items:
            type: string
          default:
          - 00:00:00:00:00:00
          format: mac
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Arp.SenderHardwareAddr.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Arp.SenderHardwareAddr.Counter'
    Pattern.Flow.Arp.SenderProtocolAddr.Counter:
      description: |-
        ipv4 counter pattern
      type: object
      properties:
        start:
          type: string
          default: 0.0.0.0
          format: ipv4
        step:
          type: string
          default: 0.0.0.1
          format: ipv4
        count:
          type: integer
          default: 1
    Pattern.Flow.Arp.SenderProtocolAddr:
      description: |-
        Internetwork address of the sender
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: string
          default: 0.0.0.0
          format: ipv4
        values:
          type: array
          items:
            type: string
          default:
          - 0.0.0.0
          format: ipv4
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Arp.SenderProtocolAddr.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Arp.SenderProtocolAddr.Counter'
    Pattern.Flow.Arp.TargetHardwareAddr.Counter:
      description: |-
        mac counter pattern
      type: object
      properties:
        start:
          type: string
          default: 00:00:00:00:00:00
          format: mac
        step:
          type: string
          default: 00:00:00:00:00:01
          format: mac
        count:
          type: integer
          default: 1
    Pattern.Flow.Arp.TargetHardwareAddr:
      description: |-
        Media address of the target
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: string
          default: 00:00:00:00:00:00
          format: mac
        values:
          type: array
          items:
            type: string
          default:
          - 00:00:00:00:00:00
          format: mac
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Arp.TargetHardwareAddr.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Arp.TargetHardwareAddr.Counter'
    Pattern.Flow.Arp.TargetProtocolAddr.Counter:
      description: |-
        ipv4 counter pattern
      type: object
      properties:
        start:
          type: string
          default: 0.0.0.0
          format: ipv4
        step:
          type: string
          default: 0.0.0.1
          format: ipv4
        count:
          type: integer
          default: 1
    Pattern.Flow.Arp.TargetProtocolAddr:
      description: |-
        Internetwork address of the target
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: string
          default: 0.0.0.0
          format: ipv4
        values:
          type: array
          items:
            type: string
          default:
          - 0.0.0.0
          format: ipv4
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Arp.TargetProtocolAddr.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Arp.TargetProtocolAddr.Counter'
    Pattern.Flow.Icmp.Echo.Type.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 8
          minimum: 0
          maximum: 255
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 255
        count:
          type: integer
          default: 1
      x-constants:
        reply: 0
        request: 8
    Pattern.Flow.Icmp.Echo.Type:
      description: |-
        The type of ICMP echo packet
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 8
          minimum: 0
          maximum: 255
        values:
          type: array
          items:
            type: integer
          default:
          - 8
          minimum: 0
          maximum: 255
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.Type.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.Type.Counter'
      x-constants:
        reply: 0
        request: 8
    Pattern.Flow.Icmp.Echo.Code.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 255
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 255
        count:
          type: integer
          default: 1
    Pattern.Flow.Icmp.Echo.Code:
      description: |-
        The ICMP subtype.  The default code for ICMP echo request and reply is 0.
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 255
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 255
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.Code.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.Code.Counter'
    Pattern.Flow.Icmp.Echo.Checksum:
      description: |-
        ICMP checksum
      type: object
      properties:
        choice:
          description: |-
            The type of checksum
          type: string
          enum:
          - generated
          - custom
          default: generated
        generated:
          description: |-
            A system generated checksum value
          type: string
          enum:
          - good
          - bad
          default: good
        custom:
          description: |-
            A custom checksum value
          type: integer
          minimum: 0
          maximum: 65535
    Pattern.Flow.Icmp.Echo.Identifier.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.Icmp.Echo.Identifier:
      description: |-
        ICMP identifier
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.Identifier.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.Identifier.Counter'
    Pattern.Flow.Icmp.Echo.SequenceNumber.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.Icmp.Echo.SequenceNumber:
      description: |-
        ICMP sequence number
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.SequenceNumber.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.SequenceNumber.Counter'
    Pattern.Flow.Icmp.Common.Checksum:
      description: |-
        ICMP checksum
      type: object
      properties:
        choice:
          description: |-
            The type of checksum
          type: string
          enum:
          - generated
          - custom
          default: generated
        generated:
          description: |-
            A system generated checksum value
          type: string
          enum:
          - good
          - bad
          default: good
        custom:
          description: |-
            A custom checksum value
          type: integer
          minimum: 0
          maximum: 65535
    Pattern.Flow.Icmp.NextFields.Identifier.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.Icmp.NextFields.Identifier:
      description: |-
        ICMP identifier
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.NextFields.Identifier.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.NextFields.Identifier.Counter'
    Pattern.Flow.Icmp.NextFields.SequenceNumber.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.Icmp.NextFields.SequenceNumber:
      description: |-
        ICMP sequence number
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.NextFields.SequenceNumber.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.NextFields.SequenceNumber.Counter'
    Pattern.Flow.Icmpv6.Echo.Type.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 128
          minimum: 0
          maximum: 255
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 255
        count:
          type: integer
          default: 1
      x-constants:
        request: 128
        reply: 129
    Pattern.Flow.Icmpv6.Echo.Type:
      description: |-
        ICMPv6 echo type
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 128
          minimum: 0
          maximum: 255
        values:
          type: array
          items:
            type: integer
          default:
          - 128
          minimum: 0
          maximum: 255
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.Type.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.Type.Counter'
      x-constants:
        request: 128
        reply: 129
    Pattern.Flow.Icmpv6.Echo.Code.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 255
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 255
        count:
          type: integer
          default: 1
    Pattern.Flow.Icmpv6.Echo.Code:
      description: |-
        ICMPv6 echo sub type
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 255
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 255
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.Code.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.Code.Counter'
    Pattern.Flow.Icmpv6.Echo.Identifier.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.Icmpv6.Echo.Identifier:
      description: |-
        ICMPv6 echo identifier
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.Identifier.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.Identifier.Counter'
    Pattern.Flow.Icmpv6.Echo.SequenceNumber.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.Icmpv6.Echo.SequenceNumber:
      description: |-
        ICMPv6 echo sequence number
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 65535
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.SequenceNumber.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.SequenceNumber.Counter'
    Pattern.Flow.Icmpv6.Echo.Checksum:
      description: |-
        ICMPv6 checksum
      type: object
      properties:
        choice:
          description: |-
            The type of checksum
          type: string
          enum:
          - generated
          - custom
          default: generated
        generated:
          description: |-
            A system generated checksum value
          type: string
          enum:
          - good
          - bad
          default: good
        custom:
          description: |-
            A custom checksum value
          type: integer
          minimum: 0
          maximum: 65535
    Pattern.Flow.Icmpv6.Common.Checksum:
      description: |-
        ICMPv6 checksum
      type: object
      properties:
        choice:
          description: |-
            The type of checksum
          type: string
          enum:
          - generated
          - custom
          default: generated
        generated:
          description: |-
            A system generated checksum value
          type: string
          enum:
          - good
          - bad
          default: good
        custom:
          description: |-
            A custom checksum value
          type: integer
          minimum: 0
          maximum: 65535
    Pattern.Flow.Ppp.Address.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 255
          minimum: 0
          maximum: 255
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 255
        count:
          type: integer
          default: 1
      x-constants:
        standard_address: 255
    Pattern.Flow.Ppp.Address:
      description: |-
        PPP address
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 255
          minimum: 0
          maximum: 255
        values:
          type: array
          items:
            type: integer
          default:
          - 255
          minimum: 0
          maximum: 255
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ppp.Address.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ppp.Address.Counter'
      x-constants:
        standard_address: 255
    Pattern.Flow.Ppp.Control.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 3
          minimum: 0
          maximum: 255
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 255
        count:
          type: integer
          default: 1
      x-constants:
        unnumbered_data: 3
    Pattern.Flow.Ppp.Control:
      description: |-
        PPP control
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 3
          minimum: 0
          maximum: 255
        values:
          type: array
          items:
            type: integer
          default:
          - 3
          minimum: 0
          maximum: 255
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ppp.Control.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ppp.Control.Counter'
      x-constants:
        unnumbered_data: 3
    Pattern.Flow.Ppp.ProtocolType.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          minimum: 0
          maximum: 65535
        step:
          type: integer
          minimum: 0
          maximum: 65535
        count:
          type: integer
          default: 1
    Pattern.Flow.Ppp.ProtocolType:
      description: |-
        PPP protocol type
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - auto
          - increment
          - decrement
          default: auto
        value:
          type: integer
          minimum: 0
          maximum: 65535
        values:
          type: array
          items:
            type: integer
          minimum: 0
          maximum: 65535
        auto:
          type: string
          enum:
          - auto
          default: auto
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ppp.ProtocolType.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ppp.ProtocolType.Counter'
    Pattern.Flow.Igmpv1.Version.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 1
          minimum: 0
          maximum: 15
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 15
        count:
          type: integer
          default: 1
    Pattern.Flow.Igmpv1.Version:
      description: |-
        Version number
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 1
          minimum: 0
          maximum: 15
        values:
          type: array
          items:
            type: integer
          default:
          - 1
          minimum: 0
          maximum: 15
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Igmpv1.Version.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Igmpv1.Version.Counter'
    Pattern.Flow.Igmpv1.Type.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 1
          minimum: 0
          maximum: 15
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 15
        count:
          type: integer
          default: 1
      x-constants:
        query: 1
        report: 2
    Pattern.Flow.Igmpv1.Type:
      description: |-
        Type of message
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 1
          minimum: 0
          maximum: 15
        values:
          type: array
          items:
            type: integer
          default:
          - 1
          minimum: 0
          maximum: 15
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Igmpv1.Type.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Igmpv1.Type.Counter'
      x-constants:
        query: 1
        report: 2
    Pattern.Flow.Igmpv1.Unused.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          default: 0
          minimum: 0
          maximum: 255
        step:
          type: integer
          default: 1
          minimum: 0
          maximum: 255
        count:
          type: integer
          default: 1
    Pattern.Flow.Igmpv1.Unused:
      description: |-
        Unused
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: integer
          default: 0
          minimum: 0
          maximum: 255
        values:
          type: array
          items:
            type: integer
          default:
          - 0
          minimum: 0
          maximum: 255
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Igmpv1.Unused.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Igmpv1.Unused.Counter'
    Pattern.Flow.Igmpv1.Checksum:
      description: |-
        Checksum
      type: object
      properties:
        choice:
          description: |-
            The type of checksum
          type: string
          enum:
          - generated
          - custom
          default: generated
        generated:
          description: |-
            A system generated checksum value
          type: string
          enum:
          - good
          - bad
          default: good
        custom:
          description: |-
            A custom checksum value
          type: integer
          minimum: 0
          maximum: 65535
    Pattern.Flow.Igmpv1.GroupAddress.Counter:
      description: |-
        ipv4 counter pattern
      type: object
      properties:
        start:
          type: string
          default: 0.0.0.0
          format: ipv4
        step:
          type: string
          default: 0.0.0.1
          format: ipv4
        count:
          type: integer
          default: 1
    Pattern.Flow.Igmpv1.GroupAddress:
      description: |-
        Group address
      type: object
      properties:
        choice:
          type: string
          enum:
          - value
          - values
          - increment
          - decrement
          default: value
        value:
          type: string
          default: 0.0.0.0
          format: ipv4
        values:
          type: array
          items:
            type: string
          default:
          - 0.0.0.0
          format: ipv4
        metric_group:
          description: |-
            A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
          type: string
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Igmpv1.GroupAddress.Counter'
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Igmpv1.GroupAddress.Counter'
