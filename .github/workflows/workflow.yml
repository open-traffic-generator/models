name: Models CI/CD

# Trigger everytime a push occurs
on:
  push:
  workflow_dispatch:
    paths:
    - '!artifacts/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - name: Build container image
        run: docker build . -t models || exit 1

      - name: Generate artifacts
        id: gen_artifact
        # 1. Mount local dir to a dir inside container where build artifacts are
        #    generated so that we don't have to actually get inside the container.
        # 2. 'artifacts/tag' file containing version number is generated if there's
        #    no tag for current API version.
        # 3. Set 'tag' variable to '0' if 'artifacts/tag' is not generated (i.e.
        #    tag for that version already exists), otherwise store version.
        #    This will be used later to indicate whether we need to create new tag/release or not.
        run: |
          mkdir -p artifacts
          docker run -v $(pwd)/artifacts:/home/otg/models/artifacts/ models /bin/bash -c "./do.sh art" || exit 1
          echo "::set-output name=tag::$(cat artifacts/tag || echo 0)"

      - name: Upload artifacts
        # upload all files in the artifacts directory
        # the artifact zip is available using the following github API 
        # curl https://api.github.com/repos/open-traffic-generator/models/actions/artifacts
        # the artifact is only available for the amount of time dictated by the 
        # repo settings which is defaulted to 90 days
        uses: actions/upload-artifact@v2
        with:
          path: artifacts

      - name: Commit auto generated content
        id: commit_generated
        run: |
          git config user.name "Github Actions Bot"
          git config user.email "actions@github.com"
          git add --force artifacts/openapi.yaml
          git add --force artifacts/otg.proto
          if git status --porcelain | grep .
            then
              git commit -m "Update auto generated content" 
              git push
            else
              echo "No changed auto generated content"
          fi

      # to create a release it just needs a tag
      # the tag name MUST be in the following format:
      #   v<major>.<minor>.<build>
      # git tag -a <tag name> -m "message"
      # git push origin --tags
      - name: Get git tag
        run: echo "HEAD_TAG=$(git tag --points-at HEAD)" >> $GITHUB_ENV

      - name: Create Release
        if: env.HEAD_TAG != ''
        uses: actions/github-script@v2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            console.log('environment', process.versions);
            const fs = require('fs').promises;
            const { repo: { owner, repo }, sha } = context;
            console.log({ owner, repo, sha });
            const tag = process.env.GITHUB_REF.split('/').slice(-1)[0];
            const release = await github.repos.createRelease({
              owner, 
              repo,
              tag_name: tag,
              name: `Release ${tag}`,
              draft: false,
              prerelease: false,
              target_commitish: sha
            });

            console.log('created release', { release });
            let upload_files = [
              'openapi.yaml',
              'openapi.json',
              'protobuf3.tar.gz',
              'pyclient.tar.gz',
              'goclient.tar.gz',
              'goserver.tar.gz'
            ]
            for (let file of upload_files) {
              await github.repos.uploadReleaseAsset({
                owner, repo,
                release_id: release.data.id,
                name: file,
                data: await fs.readFile(`./artifacts/${file}`)
              });            
            }

