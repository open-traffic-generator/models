openapi: 3.1.0

info:
  title: Flow endpoint models
  version: ^0.0.0


components:
  schemas:
    Flow.SrcDst:
      description: >-
        A container for different types of source and destination containers.
      type: object
      required: [choice]
      properties:
        choice:
          description: >-
            The type of source destination container used by the flow.
          type: string
          enum: [port, device]
        port:
          $ref: '#/components/schemas/Flow.PortSrcDst'
        device:
          $ref: '#/components/schemas/Flow.DeviceSrcDst'

    Flow.PortSrcDst:
      description: >-
        A container for a source transmit port and 0..n intended destination
        receive ports.
        When assigning this container to a flow's src_dst property the flows's 
        packet headers will not be populated with any source or destination 
        addresses. 
        For example Flow.Ethernet dst mac address values will be defaulted to 0. 
        For full control over the Flow.properties.packet contents use this 
        container. 
      type: object
      required: [tx_port_name]
      properties:
        tx_port_name:
          description: >-
            The unique name of a port that is the transmit port.
          type: string
          x-constraint:
          - '/components/schemas/Port.properties.name'
        rx_port_names:
          description: >-
            The unique names of ports that are the intended receive ports.
          type: array
          items:
            type: string
            x-constraint:
            - '/components/schemas/Port.properties.name'

    Flow.DeviceSrcDst:
      description: >-
        A container for 1..n transmit devices and 1..n receive devices.
        Implemementations may use learned information from the devices to 
        pre-populate Flow.properties.packet[Flow.Header fields].
        
        For example an implementation may automatically start devices, get arp 
        table information and pre-populate the Flow.Ethernet dst mac address values.

        To discover what the implementation supports use the 
        /results/capabilities API.
      type: object
      required: [tx_device_names, rx_device_names]
      properties:
        tx_device_names:
          description: >-
            The unique names of devices that will be transmitting.
          type: array
          items:
            type: string
            x-constraint:
            - '/components/schemas/Device.properties.name'
            - '/components/schemas/Device.Ethernet.properties.name'
            - '/components/schemas/Device.Ipv4.properties.name'
        rx_device_names:
          description: >-
            The unique names of emulated devices that will be receiving.
          type: array
          items:
            type: string
            x-constraint:
            - '/components/schemas/Device.properties.name'
            - '/components/schemas/Device.Ethernet.properties.name'
            - '/components/schemas/Device.Ipv4.properties.name'
