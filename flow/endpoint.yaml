components:
  schemas:
    Flow.TxRx:
      description: |-
        A container for different types of transmit and receive 
        endpoint containers.
      type: object
      properties:
        choice:
          description: |-
            The type of transmit and receive container used by the flow.
          type: string
          default: port
          x-field-uid: 1
          x-enum:
            port:
              x-field-uid: 1
            device:
              x-field-uid: 2
        port:
          $ref: '#/components/schemas/Flow.Port'
          x-field-uid: 2
        device:
          $ref: '#/components/schemas/Flow.Router'
          x-field-uid: 3
    Flow.Port:
      description: |-
        A container for a transmit port and 0..n intended receive ports.
        When assigning this container to a flow the flows's 
        packet headers will not be populated with any address resolution 
        information such as source and/or destination addresses. 
        For example Flow.Ethernet dst mac address values will be defaulted to 0. 
        For full control over the Flow.properties.packet header contents use this 
        container. 
      type: object
      required: [tx_name]
      properties:
        tx_name:
          description: |-
            The unique name of a port that is the transmit port.
          type: string
          x-constraint:
          - '/components/schemas/Port/properties/name'
          - '/components/schemas/Lag/properties/name'
          x-field-uid: 1
        rx_name:
          description: |-
            The unique name of a port that is the intended receive port.
          x-status:
            status: deprecated
            information: |-
              This property is deprecated in favor of property rx_names
          type: string
          x-constraint:
          - '/components/schemas/Port/properties/name'
          - '/components/schemas/Lag/properties/name'

          x-field-uid: 2
        rx_names:
          description: |-
            Unique name of ports or lags that are intended receive endpoints.
          type: array
          items:
            description: |-
              The unique name of a port or lag that is the intended receive port.
            type: string
          x-constraint:
          - '/components/schemas/Port/properties/name'
          - '/components/schemas/Lag/properties/name'
          x-field-uid: 3
    Flow.Router:
      description: >-
        A container for declaring a map of 1..n transmit devices
        to 1..n receive devices. This allows for a single flow to have  different
        tx to rx device flows such as a single one to one map or a  many to many map.
      type: object
      required: [tx_names, rx_names]
      properties:
        mode:
          description: |-
            Determines the intent of creating traffic sub-flow(s) between the device 
            endpoints, from the entities of <b>tx_names</b> to the entities of <b>rx_names</b> 
            to derive how <b>auto</b> packet fields can be populated with 
            the actual value(s) by the implementation.

            The <b>one_to_one</b> mode creates traffic sub-flow(s) between each device endpoint pair in 
            tx_names to rx_names by index.
            The length of tx_names and rx_names MUST be the same.
            The same device name can be repeated multiple times in tx_names or rx_names, in any order to create desired meshing between device(s).
            For 2 values in tx_names and 2 values in rx_names, 2 device endpoint pairs would be generated (each pair representing a traffic sub-flow).

            The <b>mesh</b> mode creates traffic sub-flow(s) between each value in tx_names to
            every value in rx_names, forming the device endpoint pair(s).
            For 2 values in tx_names and 3 values in rx_names, generated device endpoint pairs would be 2x3=6. 

            A generated device endpoint pair with same device endpoint name for both transmit & receive device endpoint MUST raise an error.

            Packet fields of type <b>auto</b> would be populated with one value for each device endpoint pair (representing the traffic sub-flow). 
            The value would be determined considering transmit & receive device of the sub-flow. And the sequence of the populated value(s) 
            would be in the order of generated device endpoint pair(s).
            If 2 device endpoint pairs are generated (based on mode, tx_names and rx_names), say (d1 to d3) and (d2 to d3), and ethernet.dst is set as <b>auto</b>, then 
            the auto field would be <b>replaced</b> by the implementation with a sequence of 2 values, [v1,v2] where 
            v1 is determined using context (d1,d3) and v2 using context (d2,d3).
            The final outcome is that packets generated on the wire will contain the values v1,v2,v1,... for ethernet.dst field. Any non-auto packet fields 
            should be configured accordingly. For example, non-auto packet field ethernet.src can be configured with values [u1, u2], where 
            u1 & u2 are source MAC of the connected interface of device d1 and d2 respectively. Then packets on the wire will contain correct value pairs 
            (u1,v1),(u2,v2),(u1,v1),... for (ethernet.src,ethernet.dst) fields.
            
          type: string
          default: mesh
          x-field-uid: 1
          x-enum:
            mesh:
              x-field-uid: 1
            one_to_one:
              x-field-uid: 2
        tx_names:
          type: array
          items:
            description: |-
              The unique name of an emulated device that will be transmitting.
            type: string
          x-constraint:
          - '/components/schemas/Device.Ethernet/properties/name'
          - '/components/schemas/Device.Ipv4/properties/name'
          - '/components/schemas/Device.Ipv6/properties/name'
          - '/components/schemas/Bgp.V4RouteRange/properties/name'
          - '/components/schemas/Bgp.V6RouteRange/properties/name'
          - '/components/schemas/Bgp.CMacIpRange/properties/name'
          - '/components/schemas/Rsvp.LspIpv4Interface.P2PIngressIpv4Lsp/properties/name'
          - '/components/schemas/Isis.V4RouteRange/properties/name'
          - '/components/schemas/Isis.V6RouteRange/properties/name'
          example: ['Eth 1', 'Eth 2', 'Eth 3', 'IPv4 1', 'IPv6 1', 'Bgp V4RouteRange
              1', 'Bgp V6RouteRange 1']
          x-field-uid: 2
        rx_names:
          type: array
          items:
            description: |-
              The unique name of an emulated device that will be receiving.
            type: string
          x-constraint:
          - '/components/schemas/Device.Ethernet/properties/name'
          - '/components/schemas/Device.Ipv4/properties/name'
          - '/components/schemas/Device.Ipv6/properties/name'
          - '/components/schemas/Bgp.V4RouteRange/properties/name'
          - '/components/schemas/Bgp.V6RouteRange/properties/name'
          - '/components/schemas/Bgp.CMacIpRange/properties/name'
          - '/components/schemas/Rsvp.LspIpv4Interface.P2PEgressIpv4Lsp/properties/name'
          - '/components/schemas/Isis.V4RouteRange/properties/name'
          - '/components/schemas/Isis.V6RouteRange/properties/name'
          example: ['Eth 1', 'Eth 2', 'Eth 3', 'IPv4 1', 'IPv6 1', 'Bgp V4RouteRange
              1', 'Bgp V6RouteRange 1']
          x-field-uid: 3
