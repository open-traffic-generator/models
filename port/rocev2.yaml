components:
  schemas:
    Rocev2.PerPortSettings:
      description: |-
        Data plane traffic flow configuration for a test port.
      type: object
      properties:
        cnp:
          $ref: '#/components/schemas/Rocev2.CNP'
          x-field-uid: 1
        connection_type:
          $ref : '#/components/schemas/Rocev2.QPConnectionType'
          x-field-uid: 2
        dcqcn_settings:
          $ref: '#/components/schemas/Rocev2.DCQCN'
          x-field-uid: 3
    Rocev2.CNP:
      description: |-
        CNP parameters.
      type: object
      properties:
        choice:
          type: string
          default: ip_dscp
          x-enum:
            ip_dscp:
              x-field-uid: 1
          x-field-uid: 1
        ip_dscp:
          description: |-
            IP DSCP value for the CNP packets.
          $ref: '#/components/schemas/Rocev2.PriorityValue'
          x-field-uid: 2
        ecn_value:
          description: |-
            CNP ECN Value.
          type: string
          default: ect_1
          x-enum:
            non_ect:
              x-field-uid: 1
            ect_1:
              x-field-uid: 2
            ect_0:
              x-field-uid: 3
            ce:
              x-field-uid: 4
          x-field-uid: 3
        cnp_delay_timer:
          description: |-
            The interval duration between the generation of successive CNP packets should be specified in microseconds.
          type: integer
          format: uint32
          default: 55
          minimum: 0
          maximum: 255
          x-field-uid: 4
    Rocev2.QPConnectionType:
      description: >-
        It describes the degree of reliability and to what and how the QP transfers data. There are different types.
      type: object
      properties:
        choice:
          type: string
          default: reliable_connection
          x-enum:
            reliable_connection:
              x-field-uid: 1
          x-field-uid: 1
        reliable_connection:
          $ref: '#/components/schemas/Rocev2.AckAndNak'
          x-field-uid: 2
    Rocev2.AckAndNak:
      description: |-
        ****Description here****
      type: object
      properties:
        ack:
          $ref: '#/components/schemas/Rocev2.ACK'
          x-field-uid: 1
        nak:
          $ref: '#/components/schemas/Rocev2.NAK'
          x-field-uid: 2
        enable_retransmission_timeout:
          description: |-
            Enable Retransmission on Timeout.
          type: boolean
          default: true
          x-field-uid: 3
        retransmission_timeout_value:
          description: |-
            The duration to wait before retrying transmission upon not receiving an acknowledgment (ACK) or negative acknowledgment (NAK) is specified in milliseconds.
          type: integer
          format: uint32
          default: 1
          minimum: 0
          maximum: 5369
          x-field-uid: 4
        retransmission_retry_count:
          description: |-
            Number of retransmission attempts before stopping due to missing ACK/NAK.
          type: integer
          format: uint32
          default: 3
          minimum: 0
          maximum: 254
          x-field-uid: 5
    Rocev2.ACK:
      description: |-
        ACK parameters.
      type: object
      properties:
        choice:
          type: string
          default: ip_dscp
          x-enum:
            ip_dscp:
              x-field-uid: 1
          x-field-uid: 1
        ip_dscp:
          description: |-
            IP DSCP value for the ACK packets.
          $ref: '#/components/schemas/Rocev2.PriorityValue'
          x-field-uid: 2
        ecn_value:
          description: |-
            ACK ECN Value.
          type: string
          default: ect_1
          x-enum:
            non_ect:
              x-field-uid: 1
            ect_1:
              x-field-uid: 2
            ect_0:
              x-field-uid: 3
            ce:
              x-field-uid: 4
          x-field-uid: 3
    Rocev2.NAK:
      description: |-
        NAK parameters.
      type: object
      properties:
        choice:
          type: string
          default: ip_dscp
          x-enum:
            ip_dscp:
              x-field-uid: 1
          x-field-uid: 1
        ip_dscp:
          description: |-
            IP DSCP value for the NAK packets.
          $ref: '#/components/schemas/Rocev2.PriorityValue'
          x-field-uid: 2
        ecn_value:
          description: |-
            ECN Code point to add in NAK packets.
          type: string
          default: ect_1
          x-enum:
            non_ect:
              x-field-uid: 1
            ect_1:
              x-field-uid: 2
            ect_0:
              x-field-uid: 3
            ce:
              x-field-uid: 4
          x-field-uid: 3
    Rocev2.PriorityValue:
      description: |-
        Value.
      type: object
      properties:
        value:
          type: integer
          format: uint32
          default: 48
          minimum: 0
          maximum: 63
          x-field-uid: 1
    Rocev2.DCQCN:
      description: |-
        RoCEv2 DCQCN Settings.
      type: object
      properties:
        enable_dcqcn:
          description: |-
            Enable DCQCN port settigns.
          type: boolean
          default: true
          x-field-uid: 1
        alpha_g:
          description: |-
            Controls the increment / decrement of the alpha parameter in DCQCN algorithm.
          type: integer
          format: uint64
          default: 1019
          minimum: 1
          maximum: 1023
          x-field-uid: 2
        initial_alpha:
          description: |-
            Value of the alpha at the time when the first CNP is received. 
          type: integer
          format: uint64
          default: 1023
          minimum: 1
          maximum: 1023
          x-field-uid: 3
        alpha_update_period:
          description: |-
            timer after which the alpha parameter will update according to the algorithm. Unit is microseconds.
          type: integer
          format: uint64
          default: 21
          x-field-uid: 4
        rate_reduction_time_period:
          description: |-
            timer after which the algorithm will check if CNP is there or not and if CNP is present it will reduce the rate.
            Unit is microseconds. 
          type: integer
          format: uint64
          default: 21
          x-field-uid: 5
        initial_rate_after_first_cnp:
          description: |-
            This is the percentage of rate user wants to set on receiving the first CNP.
          type: number
          format: float
          minimum: 0
          maximum: 100
          default: 0.002
          x-field-uid: 6
        minimum_rate_limmit:
          description: |-
            This is the minimum line rate which user wants to restrict. Below this the algorithm cannot set the rate. 
          type: number
          format: float
          minimum: 0
          maximum: 100
          default: 0.002
          x-field-uid: 7
        maximum_rate_decrement_at_time:
          description: |-
            This is the maximum that line rate can be decreased on triggering a rate reduce algorithm.
          type: integer
          format: uint32
          default: 10
          minimum: 0
          maximum: 100
          x-field-uid: 8
        clamp_target_rate:
          description: |-
            Is used to reduce the target rate by remembering the current rate.
            If it is not set, then only the target rate will be reduced for the
            first CNP after each rate increment otherwise if its set then the target
            rate will be reduced for each rate reduce. 
          type: boolean
          default: false
          x-field-uid: 9
        rate_increment_time:
          description: |-
            After the expiry of this timer, the rate recovery algorithms will be triggered. Unit is microseconds.
          type: integer
          format: uint64
          default: 250
          x-field-uid: 10
        rate_increment_byte_counter:
          description: |-
            This is the bytes counter.
            After the expiry of this bytes also counter the rate recovery algorithms will be triggered, and the rate will be recovered. 
          type: integer
          format: uint64
          default: 32767
          minimum: 1
          maximum: 32767
          x-field-uid: 11
        rate_increment_threshold:
          description: |-
            This is the threshold value which will ensure how many times, each rate recovery algorithms will execute before moving to the next value. 
          type: integer
          format: uint32
          default: 25
          minimum: 1
          maximum: 31
          x-field-uid: 12
        additive_increment_rate:
          description: |-
            This is the rate at which the target rates will increase when the DCQCN will be in the additive increase rate recovery mode. 
          type: number
          format: float
          minimum: 0
          maximum: 100
          default: 0.001
          x-field-uid: 13
        hyper_increment_rate:
          description: |-
            This is the rate at which the target rates will increase when the DCQCN will be in the hyper increment rate recovery mode. 
          type: number
          format: float
          minimum: 0
          maximum: 100
          default: 0.001
          x-field-uid: 14
        