components:
  schemas:
    Bgp.UpdateReplay:
      description: >-
        Ordered BGP Updates ( including both Advertise and Withdraws ) to be sent in the order given in the input to the peer after the BGP session is established.
      type: object
      properties:
        choice:
          type: string 
          default: structured_pdus           
          x-enum:
            structured_pdus:
              x-field-uid: 1
            raw_bytes:
              x-field-uid: 2
          x-field-uid: 1
        structured_pdus:        
          x-field-uid: 2
          $ref: '#/components/schemas/Bgp.StructuredPdus'
        raw_bytes:        
          x-field-uid: 3
          $ref: '#/components/schemas/Bgp.RawBytes'
    Bgp.RawBytes:
      description: >-
        Ordered BGP Updates ( including both Advertise and Withdraws ) to be sent in the order given in the input to the peer after the BGP session is established.
      type: object 
      properties:
        updates:
          description: >-
            Array of ordered BGP Updates ( including both Advertise and Withdraws ) to be sent in the order given in the input to the peer after the BGP session is established. 
          type: array
          items:
            $ref: '#/components/schemas/Bgp.OneUpdateReplay'
          x-field-uid: 1
    Bgp.OneUpdateReplay:
      description: >-
        Specification of one BGP Update to be sent to the BGP peer.        
      type: object
      required: [update_bytes]
      properties:
        time_gap:
          description: |-
            Minimum time interval in milliseconds from previous Update from the sequence of BGP Updates to be replayed.
          type: integer
          format : uint32
          default: 0
          x-field-uid: 1
        update_bytes:    
          description: >-
            Bytes specified in hex format to be sent to peer after the BGP Update Header. The Update Header will always have the 
            initial 16 bytes containing Marker bytes, 2 bytes containing the Length and 1 byte containing the Type.The string MUST 
            contain sequence of valid hex bytes. The bytes specified in hex format should be appended to the Update message to be sent 
            to the peer after the fixed 19 bytes described above. This byte stream can be of any length from 1 to 4077 bytes.The value 
            4077 is derived from the maximum length allowed for a BGP message in RFC4271 which is 4096 minus mandatory 19 bytes described 
            above. In the imported byte stream, one byte is represented as string of 2 characters, for example 2 character string (0x)AB 
            represents value of a single byte. So the maximum length of this attribute is 8154 (4077 * 2 hex characters per byte).
          type: string
          format: hex          
          minLength: 1
          maxLength: 8154
          x-field-uid: 2
    Bgp.StructuredPdus:
      description: >-
        Ordered BGP Updates ( including both Advertise and Withdraws ) to be sent in the order given in the input to the peer after the BGP session is established.
      type: object 
      properties:
        updates:
          description: |-
            Array of ordered BGP Updates ( including both Advertise and Withdraws ) to be sent in the order given in the input to the peer after the BGP session is established.            
          type: array
          items:
            $ref: '#/components/schemas/Bgp.OneStructuredUpdateReplay'
          x-field-uid: 1 
    Bgp.OneStructuredUpdateReplay:
      description: >-
        One structured BGP Update.        
      type: object 
      properties:
        time_gap:
          description: |-
            Minimum time interval in milliseconds from previous Update from the sequence of BGP Updates to be replayed.
          type: integer
          format : uint32
          default: 0
          x-field-uid: 1
        path_attributes:
          description: |-
            Attributes carried in the Update packet alongwith the reach/unreach prefixes.          
          $ref: '#/components/schemas/Bgp.Attributes' 
          x-field-uid: 2        
        traditional_unreach_nlris:
          description: >-
            The IPv4 prefixes to be included in the traditional UNREACH_NLRI. 
          type: array
          items:
            $ref: '#/components/schemas/Bgp.OneTraditionalNlriPrefix' 
          x-field-uid: 3
        traditional_reach_nlris:
          description: >-
            The IPv4 prefixes to be included in the traditional REACH_NLRI. 
          type: array
          items:
            $ref: '#/components/schemas/Bgp.OneTraditionalNlriPrefix' 
          x-field-uid: 4
    Bgp.OneTraditionalNlriPrefix:
      description: |-
        TRADITIONAL_NLRI is an optional part of the the BGP Update which can carry only IPv4 prefix information as defined in https://www.rfc-editor.org/rfc/rfc4271.html#section-4.3 
        and extended by https://datatracker.ietf.org/doc/html/rfc7911#section-3 to carry additional Path Id information per prefix.
      type: object 
      properties:
        address:
          description: >-
            The IPv4 address of the network.
          type: string
          format: ipv4
          default: 0.0.0.0
          x-field-uid: 1
        prefix:
          description: >-
            The IPv4 network prefix length to be applied to the address. 
          type: integer
          format: uint32
          default: 24
          maximum: 32
          x-field-uid: 2
        path_id:
          $ref: '#/components/schemas/Bgp.NLRIPrefixPathId'
          x-field-uid: 3
    Bgp.OneIpv4NLRIPrefix:     
      description: >-
          One IPv4 NLRI Prefix.
      type: object 
      properties:
        address:
          description: >-
            The IPv4 address of the network.
          type: string
          format: ipv4
          default: 0.0.0.0
          x-field-uid: 1
        prefix:
          description: >-
            The IPv4 network prefix length to be applied to the address. 
          type: integer
          format: uint32
          default: 24
          maximum: 32
          x-field-uid: 2
        path_id:
          $ref: '#/components/schemas/Bgp.NLRIPrefixPathId'
          x-field-uid: 3
    Bgp.OneIpv6NLRIPrefix:
      description: >-
          One IPv6 NLRI Prefix.
      type: object 
      properties:
        address:
          description: >-
            The IPv6 address of the network.
          type: string
          format: ipv6
          default: 0::0
          x-field-uid: 1
        prefix:
          description: >-
            The IPv6 network prefix length to be applied to the address. 
          type: integer
          format: uint32
          default: 64
          maximum: 128        
          x-field-uid: 2
        path_id:
          $ref: '#/components/schemas/Bgp.NLRIPrefixPathId'
          x-field-uid: 3
    Bgp.NLRIPrefixPathId:
      description: >-
          Optional field in the NLRI carrying Path Id of the prefix.
      type: object 
      properties:
        value:
          description: >-
            The value of the optional Path ID of the prefix. 
          type: integer
          format: uint32
          default: 1          
          x-field-uid: 1
    
    Bgp.Ipv4SrPolicyNLRIPrefix:     
      description: >-
          IPv4 Segment Routing Policy NLRI Prefix.
      type: object 
      properties:
        distinguisher:
          description: >-        
            The 4-octet value uniquely identifying the policy in the context of <color, endpoint> tuple. 
            The distinguisher has no semantic value and is solely used by the SR Policy originator to make unique (from an NLRI perspective) 
            both for multiple candidate paths of the same SR Policy as well as candidate paths of different SR Policies 
            (i.e. with different segment lists) with the same Color and Endpoint but meant for different headends. 
          type: integer
          format: uint32
          default: 1          
          x-field-uid: 1          
        color:
          description: >-
            4-octet value identifying (with the endpoint) the policy. The color is used to match the color of the destination 
            prefixes to steer traffic into the SR Policy as specified in section 8 of RFC9256.
          type: integer
          format: uint32
          default: 1          
          x-field-uid: 2
        endpoint:
          description: >-
            Identifies the endpoint of a policy. 
            The Endpoint is an IPv4 address and can be either a unicast or an unspecified address (0.0.0.0) as specified in section 2.1 of RFC9256.
          type: string
          format: ipv4
          default: "0.0.0.0"
          x-field-uid: 3
    Bgp.Ipv6SrPolicyNLRIPrefix:
      description: >-
          One IPv6 Segment Routing Policy NLRI Prefix.
      type: object 
      properties:
        distinguisher:
          description: >-        
            The 4-octet value uniquely identifying the policy in the context of <color, endpoint> tuple. 
            The distinguisher has no semantic value and is solely used by the SR Policy originator to make unique (from an NLRI perspective) 
            both for multiple candidate paths of the same SR Policy as well as candidate paths of different SR Policies 
            (i.e. with different segment lists) with the same Color and Endpoint but meant for different headends. 
          type: integer
          format: uint32
          default: 1          
          x-field-uid: 1          
        color:
          description: >-
            4-octet value identifying (with the endpoint) the policy. The color is used to match the color of the destination 
            prefixes to steer traffic into the SR Policy as specified in section 8 of RFC9256.
          type: integer
          format: uint32
          default: 1          
          x-field-uid: 2
        endpoint:
          description: >-
            Identifies the endpoint of a policy. 
            The Endpoint may represent a single node or a set of nodes (e.g., an anycast address).
            The Endpoint is an IPv6 address and can be either a unicast or an unspecified address (0::0) as specified in section 2.1 of RFC9256.
          type: string
          format: ipv6
          default: "0::0"
          x-field-uid: 3   
    Bgp.Attributes:
      description: |-
          Attributes carried in the Update packet alongwith the reach/unreach prefixes.
      type: object 
      properties:
        other_attributes:
          description: |-
            Any attributes not present in the list of configurable attributes should be added to the list of unknown attributes.            
          type: array
          items:
            $ref: '#/components/schemas/Bgp.Attributes.OtherAttribute' 
          x-field-uid: 1
        origin:
          description: |-
            The ORIGIN attribute is a mandatory attribute which can take three values: 
            the prefix originates from an interior routing protocol 'igp', it originates from 'egp' 
            or the origin is 'incomplete',if the prefix is learned through other means.                    
          type: string
          default: incomplete
          x-field-uid: 2
          x-enum:
            igp:
              x-field-uid: 1
            egp:
              x-field-uid: 2
            incomplete:
              x-field-uid: 3
        as_path:
          description: >-
            AS_PATH attribute to be included in the Update. 
          $ref: './bgpaspath.yaml#/components/schemas/Bgp.Attributes.AsPath'
          x-field-uid: 3
        as4_path:
          description: >-
            AS4_PATH attribute to be included in the Update.             
          $ref: './bgpaspath.yaml#/components/schemas/Bgp.Attributes.As4Path'
          x-field-uid: 4
        next_hop:                 
          $ref: './bgpaspath.yaml#/components/schemas/Bgp.Attributes.NextHop'
          x-field-uid: 5
        multi_exit_discriminator:
          $ref: './bgpaspath.yaml#/components/schemas/Bgp.Attributes.MultiExitDiscriminator'         
          x-field-uid: 6
        local_preference:
          $ref: './bgpaspath.yaml#/components/schemas/Bgp.Attributes.LocalPreference' 
          x-field-uid: 7
        include_atomic_aggregator:
          description: |-
            If enabled, it indicates that the ATOMIC_AGGREGATOR attribute should be included in the Update.
            Presence of this attribute Indicates that this route might not be getting sent on a fully optimized path 
            since some intermediate BGP speaker has aggregated the route.                         
          type: boolean
          default: false
          x-field-uid: 8
        aggregator:          
          $ref: '#/components/schemas/Bgp.Attributes.Aggregator'
          x-field-uid:  9
        as4_aggregator:          
          $ref: '#/components/schemas/Bgp.Attributes.As4Aggregator'
          x-field-uid:  10
        community:  
          type: array
          items:        
            $ref: '#/components/schemas/Bgp.Attributes.Community'            
          x-field-uid:  11
        originator_id:
          $ref: '#/components/schemas/Bgp.Attributes.OriginatorId'
          x-field-uid:  12         
        cluster_ids:
          description: >-
            When a Route Reflector reflects a route, it prepends the local CLUSTER_ID to the CLUSTER_LIST as defined in RFC4456.  
          type: array
          items:
            type: string
            format: ipv4
            default: "0.0.0.0"
          x-field-uid: 13
        extended_communities:
          description: |-
            Optional EXTENDED_COMMUNITY attribute settings.
            The EXTENDED_COMMUNITY Attribute is a transitive optional BGP attribute, with the Type Code 16. Community and Extended Communities  attributes
            are utilized to trigger routing decisions, such as acceptance, rejection,  preference, or redistribution. An extended community is an eight byte value.
            It is divided into two main parts. The first two bytes of the community encode a type and sub-type fields and the last six bytes carry a unique set
            of data in a format defined by the type and sub-type field. Extended communities provide a larger range for grouping or categorizing communities.            
          type: array
          items:
            $ref: './bgpextendedcommunity.yaml#/components/schemas/Bgp.ExtendedCommunity'
          x-field-uid: 14
        tunnel_encapsulation:
          $ref: '#/components/schemas/Bgp.Attributes.TunnelEncapsulation'
          x-field-uid: 15
        mp_reach:
          $ref: '#/components/schemas/Bgp.Attributes.MpReachNlri'
          x-field-uid: 16
        mp_unreach:
          $ref: '#/components/schemas/Bgp.Attributes.MpUnreachNlri'
          x-field-uid: 17          
    Bgp.Attributes.OtherAttribute:
      description: |-
        One unknown attribute stored as hex bytes.
      type: object 
      required: [type, raw_value]
      properties:
        flag_optional:
          description: |-
            Optional flag in the BGP attribute.
          type: boolean
          default: false 
          x-field-uid: 1
        flag_transitive:
          description: |-
            Transitive flag in the BGP attribute.
          type: boolean
          default: false 
          x-field-uid: 2
        flag_partial:
          description: |-
            Partial flag in the BGP attribute.
          type: boolean
          default: false 
          x-field-uid: 3
        flag_extended_length:
          description: |-
            Extended length flag in the BGP attribute.
          type: boolean
          default: false 
          x-field-uid: 4
        type: 
          description: |- 
            The value of the Type field in the attribute.
          type: integer
          format: uint32
          x-field-uid: 5
        raw_value:
          description: |-
            Contents of the value field ( the contents after the initial two bytes containing the Flags and Type field ) of the attribute in hex bytes. 
            It includes the contents of length of the extended length field if included.
          type: string
          format : hex          
          x-field-uid: 6                  
    Bgp.Attributes.AsPath:
      description: |-
        The AS_PATH attribute identifies the autonomous systems through  which routing information
        carried in this UPDATE message has passed.
        This contains the configuration of how to include the Local AS in the AS path
        attribute of the MP REACH NLRI. It also contains optional configuration of
        additional AS Path Segments that can be included in the AS Path attribute.
        The AS Path consists of a Set or Sequence of Autonomous Systems (AS) numbers  that
        a routing information passes through to reach the destination.
        There are two modes in which AS numbers can be encoded in the AS Path Segments
        - When the AS Path is being exchanged between old and new BGP speakers or between two old BGP speakers , the AS numbers are encoded as 2 byte values.
        - When the AS Path is being exchanged between two new BGP speakers supporting 4 byte AS , the AS numbers are encoded as 4 byte values.
      type: object
      properties:
        choice:
          type: string 
          default: four_byte_as_path
          x-enum:
            four_byte_as_path:
              x-field-uid: 1
            two_byte_as_path:
              x-field-uid: 2            
          x-field-uid: 1
        four_byte_as_path:
          x-field-uid: 2
          $ref: '#/components/schemas/Bgp.Attributes.AsPath.FourByteAsPath'
        two_byte_as_path:
          x-field-uid: 3
          $ref: '#/components/schemas/Bgp.Attributes.AsPath.TwoByteAsPath'
    Bgp.Attributes.AsPath.FourByteAsPath:
      description: |-
        AS Paths with 4 byte AS numbers can be exchanged only if both BGP speakers support 4 byte AS number extensions.
      type: object
      properties:
        segments:
          description: >-
            The AS path segments containing 4 byte AS numbers to be added in the AS Path attribute.  By default,
            an empty AS path should always be included and for EBGP at minimum the local AS number should be present in the AS Path.            
          type: array
          items:
            $ref: '#/components/schemas/Bgp.Attributes.FourByteAsPathSegment'
          x-field-uid: 1
    Bgp.Attributes.FourByteAsPathSegment:
      description: >-
        Configuration for a single BGP AS path segment containing 4 byte AS numbers.
      type: object
      properties:
        type:
          description: |-
            AS sequence is the most common type of AS_PATH, it contains the  list
            of ASNs starting with the most recent ASN being added read  from left
            to right.
            The other three AS_PATH types are used for Confederations
            - AS_SET is the type of AS_PATH attribute that summarizes routes using
            using the aggregate-address command, allowing AS_PATHs to be  summarized
            in the update as well.
            - AS_CONFED_SEQ gives the list of ASNs in the path starting with the  most
            recent ASN to be added reading left to right
            - AS_CONFED_SET will allow summarization of multiple AS PATHs to be  sent
            in BGP Updates.
          type: string
          default: as_seq
          x-field-uid: 1
          x-enum:
            as_seq:
              x-field-uid: 1
            as_set:
              x-field-uid: 2
            as_confed_seq:
              x-field-uid: 3
            as_confed_set:
              x-field-uid: 4
        as_numbers:
          description: >-
            The 4 byte AS numbers in this AS path segment.
          type: array
          items:
            type: integer
            format: uint32
            default: 1
          x-field-uid: 2
    Bgp.Attributes.AsPath.TwoByteAsPath:
      description: |-
        AS Paths with 2 byte AS numbers is used when any of the two scenarios occur :
          - An old BGP speaker and new BGP speaker are sending BGP Updates to one another.
          - Two old BGP speakers are sending BGP Updates to one another.
      type: object
      properties:
        segments:
          description: >-
            The AS path segments containing 2 byte AS numbers to be added in the AS Path attribute.  By default,
            an empty AS path should always be included and for EBGP the sender's AS number should be prepended to the AS Path.            
          type: array
          items:
            $ref: '#/components/schemas/Bgp.Attributes.TwoByteAsPathSegment'
          x-field-uid: 1
    Bgp.Attributes.TwoByteAsPathSegment:
      description: >-
        Configuration for a single BGP AS path segment containing 2 byte AS numbers.
      type: object
      properties:
        type:
          description: |-
            AS sequence is the most common type of AS_PATH, it contains the  list
            of ASNs starting with the most recent ASN being added read  from left
            to right.
            The other three AS_PATH types are used for Confederations
            - AS_SET is the type of AS_PATH attribute that summarizes routes using
            using the aggregate-address command, allowing AS_PATHs to be  summarized
            in the update as well.
            - AS_CONFED_SEQ gives the list of ASNs in the path starting with the  most
            recent ASN to be added reading left to right
            - AS_CONFED_SET will allow summarization of multiple AS PATHs to be  sent
            in BGP Updates.
          type: string
          default: as_seq
          x-field-uid: 1
          x-enum:
            as_seq:
              x-field-uid: 1
            as_set:
              x-field-uid: 2
            as_confed_seq:
              x-field-uid: 3
            as_confed_set:
              x-field-uid: 4
        as_numbers:
          description: >-
            The 2 byte AS numbers in this AS path segment.
          type: array
          items:
            type: integer
            format: uint32
            default: 1
            maximum: 65535
          x-field-uid: 2
    Bgp.Attributes.As4Path:
      description: |-
        The AS4_PATH attribute identifies the autonomous systems through  which routing information
        carried in this UPDATE message has passed.
        This contains the configuration of how to include the Local AS in the AS path
        attribute of the MP REACH NLRI. It also contains optional configuration of
        additional AS Path Segments that can be included in the AS Path attribute.
        The AS Path consists of a Set or Sequence of Autonomous Systems (AS) numbers  that
        a routing information passes through to reach the destination.
        AS4_PATH is only exchanged in two scenarios:
        - When an old BGP speaker has to forward a received AS4_PATH containing 4 byte AS numbers to new BGP speaker.
        - When a new BGP speaker is connected to an old BGP speaker and has to propagate 4 byte AS numbers via the old BGP speaker.
        Its usage is described in RFC4893.
      type: object
      properties:
       segments:
          description: >-
            The AS path segments containing 4 byte AS numbers to be added in the AS4_PATH attribute.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.Attributes.FourByteAsPathSegment'
          x-field-uid: 1    
    Bgp.Attributes.Aggregator:
      description: |-
        Optional AGGREGATOR attribute which maybe be added by a BGP speaker which performs route aggregation.
        When AGGREGATOR attribute is being sent to a new BGP speaker , the AS number is encoded as a 4 byte value.
        When AGGREGATOR attribute is being exchanged between a new and an old BGP speaker or between two old BGP speakers, 
        the AS number is encoded as a 2 byte value.
        It contain the AS number and IP address of the speaker performing the aggregation.         
      type: object 
      properties:
        choice:
          type: string 
          default: four_byte_as
          x-enum:
            four_byte_as:
              x-field-uid: 1
            two_byte_as:
              x-field-uid: 2
          x-field-uid: 1
        four_byte_as:                  
          description: >-
              The value of the 4 byte  AS number of the BGP speaker which aggregated the route.
              If the value of the AS number is less than 2 octets ( 65535 or less), the AS4_AGGREGATOR object should not be sent.
          type: integer
          format: uint32 
          default: 65536                   
          x-field-uid: 2
        two_byte_as:               
          description: >-
              The value of the 2 byte AS number of the BGP speaker which aggregated the route.              
          type: integer
          format: uint32
          default: 1 
          maximum: 65535                     
          x-field-uid: 3
        ipv4_address:
          description: >-
              The IPv4 address of the BGP speaker which aggregated the route.            
          type: string
          format: ipv4
          default: 0.0.0.0         
          x-field-uid: 4
    Bgp.Attributes.As4Aggregator:
      description: |-
        Optional AS4_AGGREGATOR attribute which maybe be added by a BGP speaker in one of two cases:
        - If it is a new BGP speaker speaking to an old BGP speaker and needs to send a 4 byte value for the AS number of the BGP route aggregator.
        - If it is a old BGP speaker speaking to a new BGP speaker and has to transparently forward a received AS4_AGGREGATOR from some other peer.
        Its usage is described in RFC4893.          
      type: object 
      properties:
        as_num:
          description: >-
              The value of the 4 byte AS number of the BGP speaker which aggregated the route.              
          type: integer
          format: uint32                     
          x-field-uid: 1
        ipv4_address:
          description: >-
              The IPv4 address of the BGP speaker which aggregated the route.            
          type: string
          format: ipv4
          default: 0.0.0.0         
          x-field-uid: 2
    Bgp.Attributes.Community:
      description: |-
        The COMMUNITY attribute provide additional capability for tagging routes and for modifying BGP routing policy on 
        upstream and downstream routers. BGP community is a 32-bit number which is broken into 16-bit AS number and a 
        16-bit custom value or it contains some pre-defined well known values.           
      type: object
      required: [choice]
      properties:
        choice:
          description: >-
            The type of community AS number.   
          type: string
          x-field-uid: 1
          x-enum:
            custom_community:
              x-field-uid: 1
            no_export:
              x-field-uid: 2
            no_advertised:
              x-field-uid: 3
            no_export_subconfed:
              x-field-uid: 4
            llgr_stale:
              x-field-uid: 5
            no_llgr:
              x-field-uid: 6
        custom_community:
          $ref: '#/components/schemas/Bgp.Attributes.CustomCommunity'
          x-field-uid: 2
    Bgp.Attributes.CustomCommunity:
      description: >-
        User defined COMMUNITY attribute containing 2 byte AS and custom 2 byte value defined by the administrator of the domain.        
      type: object
      properties:
        as_number:
          description: >-
            First two octets of the community value containing a 2 byte AS number.
          type: integer
          format: uint32
          maximum: 65535
          default: 0
          x-field-uid: 1
        custom:
          description: >-
            Last two octets of the community value in hex. 
            If user provides less than 4 hex bytes, it should be left-padded with 0s.
          type: string
          format: hex          
          default: "0000"
          maxLength: 4
          x-field-uid: 2
    Bgp.Attributes.NextHop:
        description: |-           
            Next hop to be sent inside MP_REACH NLRI or as the NEXT_HOP attribute if advertised as traditional NLRI.            
        type: object
        required: [choice]
        properties:          
          choice:
            description: >-
              The type of the next HOP.  
            type: string
            x-field-uid: 1
            x-enum:
              ipv4:
                x-field-uid: 1
              ipv6:
                x-field-uid: 2
              ipv6_two_addresses:
                x-field-uid: 3
          ipv4:
            description: >-
              The 4 byte IPv4 address of the next-hop from which the route was received.
            type: string
            format: ipv4
            default: 0.0.0.0         
            x-field-uid: 2
          ipv6:
            description: |-              
              The 16 byte IPv6 address of the next-hop from which the route was received.
            type: string
            format: ipv6
            default: 0::0            
            x-field-uid: 3            
          ipv6_two_addresses:            
            x-field-uid: 4
            $ref: '#/components/schemas/Bgp.Attributes.NextHop.Ipv6TwoAddresses'
    Bgp.Attributes.NextHop.Ipv6TwoAddresses:
      description: |-
        There is a specific scenario in which it is possible to receive a Global and Link Local address in the Next Hop 
        field in a MP_REACH attribute or in the NEXT_HOP attribute(RFC2545: Section 3). 
      type: object
      properties:
        first:
          description: |-
            The first IPv6 next hop in the 32 byte IPv6 Next Hop.
          type: string
          format: ipv6
          default: 0::0
          x-field-uid: 1
        second:
          description: |-
            The second IPv6 next hop in the 32 byte IPv6 Next Hop.
          type: string
          format: ipv6
          default: 0::0
          x-field-uid: 2
    Bgp.Attributes.MpReachNlri:
      description: |-
        The MP_REACH attribute is an optional attribute which can be included in the attributes of a BGP Update message as defined in https://datatracker.ietf.org/doc/html/rfc4760#section-3.
        The following AFI / SAFI combinations are supported:
        - IPv4 Unicast with AFI as 1 and SAFI as 1 
        - IPv6 Unicast with AFI as 2 and SAFI as 1 
        - Segment Routing Policy for IPv4 Unicast with AFI as 1 and SAFI as 73
        - Segment Routing Policy for IPv6 Unicast with AFI as 2 and SAFI as 73
      type: object
      required: [choice]
      properties:
        next_hop:                 
          $ref: './bgpaspath.yaml#/components/schemas/Bgp.Attributes.NextHop'
          x-field-uid: 1
        choice:
            description: >-
              The AFI and SAFI to be sent in the MPREACH_NLRI in the Update.  
            type: string
            x-field-uid: 2
            x-enum:
              ipv4_unicast:
                x-field-uid: 1
              ipv6_unicast:
                x-field-uid: 2
              ipv4_srpolicy:
                x-field-uid: 3
              ipv6_srpolicy:
                x-field-uid: 4
        ipv4_unicast:    
          description: >-
            List of IPv4 prefixes being sent in the IPv4 Unicast MPREACH_NLRI .
          type: array
          items:
            $ref: '#/components/schemas/Bgp.OneIpv4NLRIPrefix'
          x-field-uid: 3
        ipv6_unicast:    
          description: >-
            List of IPv6 prefixes being sent in the IPv6 Unicast MPREACH_NLRI .
          type: array
          items:
            $ref: '#/components/schemas/Bgp.OneIpv6NLRIPrefix'
          x-field-uid: 4
        ipv4_srpolicy:    
          description: >-
            IPv4 endpoint with Segment Routing Policy being sent in the IPv4 MPREACH_NLRI .
          $ref: '#/components/schemas/Bgp.Ipv4SrPolicyNLRIPrefix'
          x-field-uid: 5
        ipv6_srpolicy:    
          description: >-
            IPv6 endpoint with Segment Routing Policy being sent in the IPv6 MPREACH_NLRI .          
          $ref: '#/components/schemas/Bgp.Ipv6SrPolicyNLRIPrefix'
          x-field-uid: 6

    Bgp.Attributes.MpUnreachNlri:
      description: |-
        The MP_UNREACH attribute is an optional attribute which can be included in the attributes of a BGP Update message as defined in https://datatracker.ietf.org/doc/html/rfc4760#section-3.
        The following AFI / SAFI combinations are supported:
        - IPv4 Unicast with AFI as 1 and SAFI as 1 
        - IPv6 Unicast with AFI as 2 and SAFI as 1 
        - Segment Routing Policy for IPv4 Unicast with AFI as 1 and SAFI as 73
        - Segment Routing Policy for IPv6 Unicast with AFI as 2 and SAFI as 73
      type: object
      properties:
        choice:
            description: >-
              The AFI and SAFI to be sent in the MPUNREACH_NLRI in the Update.  
            type: string
            x-field-uid: 1
            x-enum:
              ipv4_unicast:
                x-field-uid: 1
              ipv6_unicast:
                x-field-uid: 2
              ipv4_srpolicy:
                x-field-uid: 3
              ipv6_srpolicy:
                x-field-uid: 4
        ipv4_unicast:    
          description: >-
            List of IPv4 prefixes being sent in the IPv4 Unicast MPUNREACH_NLRI .
          type: array
          items:
            $ref: '#/components/schemas/Bgp.OneIpv4NLRIPrefix'
          x-field-uid: 2
        ipv6_unicast:    
          description: >-
            List of IPv6 prefixes being sent in the IPv6 Unicast MPUNREACH_NLRI .
          type: array
          items:
            $ref: '#/components/schemas/Bgp.OneIpv6NLRIPrefix'
          x-field-uid: 3
        ipv4_srpolicy:    
          description: >-
            IPv4 endpoint with Segment Routing Policy being sent in the IPv4 MPUNREACH_NLRI .
          $ref: '#/components/schemas/Bgp.Ipv4SrPolicyNLRIPrefix'
          x-field-uid: 4
        ipv6_srpolicy:    
          description: >-
            IPv6 endpoint with Segment Routing Policy being sent in the IPv4 MPUNREACH_NLRI .          
          $ref: '#/components/schemas/Bgp.Ipv6SrPolicyNLRIPrefix'
          x-field-uid: 5        
    Bgp.Attributes.MultiExitDiscriminator:
      description: |-
         Optional MULTI_EXIT_DISCRIMINATOR attribute sent to the peer to help in the route selection process. 
      properties:
        value: 
          description: |-
            The multi exit discriminator (MED) value used for route selection sent to the peer.            
          type: integer
          format: uint32
          default: 0
          x-field-uid: 1
    Bgp.Attributes.LocalPreference:
      description: |-
          Optional LOCAL_PREFERENCE attribute sent to the peer to indicate the degree of preference 
          for externally learned routes.This should be included only for internal peers.It is 
          used for the selection of the path for the traffic leaving the AS.The route with the 
          highest local preference value is preferred.
      properties:
        value: 
          description: |-
            Value to be set in the LOCAL_PREFERENCE attribute The multi exit discriminator (MED) value used for route selection sent to the peer.            
          type: integer
          format: uint32
          default: 100
          x-field-uid: 1
    Bgp.Attributes.OriginatorId:
      description: |-
        Optional ORIGINATOR_ID attribute (type code 9) carries the Router Id of the route's originator in the local AS.
      properties:
        value: 
          description: |-
            The value of the originator's Router Id.            
          type: string
          format: ipv4
          default: "0.0.0.0"
          x-field-uid: 1

    Bgp.Attributes.TunnelEncapsulation:
      description: |-
         The TUNNEL_ENCAPSULATION  attribute is used by a BGP speaker to inform other BGP speakers how to encapsulate packets that need to be sent to it.
         It is defined in RFC9012 and is assigned a Type code of 23.
      properties: 
        choice:
          description: >-
            Identifies a type of tunnel. The field contains values from the IANA registry "BGP Tunnel Encapsulation Attribute Tunnel Types".
          type: string
          x-field-uid: 1
          x-enum:
            sr_policy:
              x-field-uid: 1
          default: sr_policy
        sr_policy:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy'
          x-field-uid: 2
    Bgp.Attributes.SegmentRoutingPolicy:
      description: |-
        Optional Segment Routing Policy information as defined in draft-ietf-idr-segment-routing-te-policy.
        This information is carried in TUNNEL_ENCAPSULATION attribute with type set to  SR Policy (15).
        - [From .proto :
          message PaPolicy {
            optional PaBindingSegmentIdentifier bsid = 1;
            optional PaPreference preference = 2;
            repeated PaSegmentList segment_lists = 3;
            optional PaPriority priority = 4;
            optional PaPolicyName policy_name = 5;
            optional PaExplicitNullLabelPolicy explicit_null_label_policy = 6;
          } 
         ] 
      type: object 
      properties:
        binding_segment_identifier:
          description: |-
            When the active candidate path has a specified Binding Segment Identifier, 
            the SR Policy uses that BSID if this value (label in MPLS, IPv6 address in SRv6) is available.
            The format of the sub-TLV is defined in draft-ietf-idr-segment-routing-te-policy
            Section 2.4.2 .
            - [.proto:
              message PaBindingSegmentIdentifier {
                optional bool specified_bsid_only = 1;  // S-flag.
                optional bool drop_upon_invalid = 2;    // I-flag. 
                oneof sid {
                  PaSegment.MPLS mpls = 4;
                  monitoring.raven.IPAddressProto ipv6 = 5;
                }
              }
            ]
          $ref: '#/components/schemas/Bgp.Attributes.Bsid'
          x-field-uid:  1          
        prerefence:
          $ref: '#/components/schemas/Bgp.Attributes.SrPolicy.Preference'
          x-field-uid: 2
        priority:
          $ref: '#/components/schemas/Bgp.Attributes.SrPolicy.Priority'
          x-field-uid: 3
        policy_name:
          $ref: '#/components/schemas/Bgp.Attributes.SrPolicy.PolicyName'
          x-field-uid: 4
        explicit_null_policy:
          $ref: '#/components/schemas/Bgp.Attributes.SrPolicy.ExplicitNullPolicy'
          x-field-uid: 5
        segment_list:
          $ref: '#/components/schemas/Bgp.Attributes.SrPolicy.SegmentList'
          x-field-uid: 6
    Bgp.Attributes.Bsid:
      description: |-
        When the active candidate path has a specified Binding Segment Identifier, the SR Policy uses that 
        BSID if this value (label in MPLS, IPv6 address in SRv6) is available.
        - The format of the sub-TLV is defined in draft-ietf-idr-segment-routing-te-policy Section 2.4.2 .
        - [.proto:
              message PaBindingSegmentIdentifier {
                optional bool specified_bsid_only = 1;  // S-flag.
                optional bool drop_upon_invalid = 2;    // I-flag. 
                oneof sid {
                  PaSegment.MPLS mpls = 4;
                  monitoring.raven.IPAddressProto ipv6 = 5;
                }
              }
            ]
      type: object
      required: [choice]
      properties:
        choice:
          description: >-
            The type of Segment Identifier.   
          type: string
          x-field-uid: 1
          x-enum:
            mpls:
              x-field-uid: 1
            srv6:
              x-field-uid: 2
        mpls:
          $ref: '#/components/schemas/Bgp.Attributes.Bsid.Mpls'
          x-field-uid: 2
        srv6:
          $ref: '#/components/schemas/Bgp.Attributes.Bsid.Srv6'
          x-field-uid: 3
    Bgp.Attributes.Bsid.Mpls:
      description: |-
        When the active candidate path has a specified Binding Segment Identifier, the SR Policy uses that BSID defined 
        as a MPLS label.The format of the sub-TLV is defined in draft-ietf-idr-segment-routing-te-policy  Section 2.4.2 .
      type: object
      properties:
        flag_specified_bsid_only:
          description: |-
            S-Flag: This flag encodes the "Specified-BSID-only" behavior. It's usage is 
            described in section 6.2.3 in [RFC9256].
          type: boolean
          default: false
          x-field-uid: 1
        flag_drop_upon_invalid:
          description: |-
            I-Flag: This flag encodes the "Drop Upon Invalid" behavior. 
            It's usage is described in section 8.2 in [RFC9256].
          type: boolean
          default: false
          x-field-uid: 2
        mpls_sid:
          $ref: '#/components/schemas/Bgp.Attributes.Sid.Mpls'
          x-field-uid: 3
    Bgp.Attributes.Bsid.Srv6:
      description: |-
        When the active candidate path has a specified Binding Segment Identifier, the SR Policy uses that BSID defined 
        as an IPv6 Address.The format of the sub-TLV is defined in draft-ietf-idr-segment-routing-te-policy Section 2.4.2 .
      type: object
      properties:
        flag_specified_bsid_only:
          description: |-
            S-Flag: This flag encodes the "Specified-BSID-only" behavior. It's usage is 
            described in section 6.2.3 in [RFC9256].
          type: boolean
          default: false
          x-field-uid: 1
        flag_drop_upon_invalid:
          description: |-
            I-Flag: This flag encodes the "Drop Upon Invalid" behavior. 
            It's usage is described in section 8.2 in [RFC9256].
          type: boolean
          default: false
          x-field-uid: 2
        flag_srv6_endpoint_behavior:
          description: |-
            B-Flag: This flag, when set, indicates the presence of the SRv6 Endpoint Behavior 
            and SID Structure encoding specified in Section 2.4.4.2.4 of draft-ietf-idr-segment-routing-te-policy.
          type: boolean
          default: false
          x-field-uid: 3
        ipv6_addr:
          description: >-
            IPv6 address denoting the SRv6 SID.
          type: string          
          format: ipv6
          default: 0::0
          x-field-uid: 4
    Bgp.Attributes.Sid.Mpls:
      description: |-
        This carries a 20 bit Multi Protocol Label Switching alongwith 3 bits traffic class, 1 bit indicating presence
        or absence of Bottom-Of-Stack and 8 bits carrying the Time to Live value. 
        - [.proto : 
            // Segment identified by MPLS label.
          message MPLS {
            optional uint32 label = 1;          // 20 bits.
            optional uint32 traffic_class = 2;  // 3 bits (TC).
            optional bool bottom_of_stack = 3;  // 1 bit (S).
            optional uint32 time_to_live = 4;   // 8 bits (TTL).
          }
        ]
      type: object 
      properties:
        label:
          description: |- 
            20 bit MPLS Label value.
          type: integer
          format: uint32
          default: 16
          maximum: 1048576
          x-field-uid: 1
        traffic_class:
          description: |- 
            3 bits of Traffic Class.
          type: integer
          format: uint32
          default: 0
          maximum: 7
          x-field-uid: 2
        flag_bos:
          description: |-
            Bottom of Stack
          type: boolean
          default: true 
          x-field-uid: 3
        ttl:
          description: |- 
            8 bits Time to Live
          type: integer
          format: uint32
          default: 63
          maximum: 63
          x-field-uid: 4
    Bgp.Attributes.SrPolicy.Preference:
      description: |
        Optional Preference sub-tlv used to select the best candidate path for an SR Policy.
      type: object
      properties:
        value:
          description: |-
            Value to be carried in the Preference sub-tlv.
          type: integer
          format: uint32
          default: 0
          x-field-uid: 1

    Bgp.Attributes.SrPolicy.Priority:
      description: |
        Optional Priority sub-tlv used to select the order in which policies should be re-computed.
      type: object
      properties:
        value:
          description: |-
            Value to be carried in the Priority sub-tlv.            
          type: integer
          format: uint32
          maximum: 255
          default: 0
          x-field-uid: 1

    Bgp.Attributes.SrPolicy.PolicyName:
      description: |-   
        Optional Policy Name sub-tlv which carries the symbolic name for the SR Policy candidate path for debugging.    
      type: object
      required: [value]
      properties:
        value:
          description: |-
            Value of the symbolic policy name carried in the Policy Name sub-tlv.
            It is recommended that the size of the name is limited to 255 bytes.
          type: string          
          maxLength: 500
          x-field-uid: 1

    Bgp.Attributes.SrPolicy.ExplicitNullPolicy:
      description: |-
        This is an optional sub-tlv . 
        If included , it Indicates whether an Explicit NULL Label must be pushed on an unlabeled IP
        packet before other labels for IPv4 or IPv6 flows.
      properties:
        choice:
          description: >-
            The Explicit NULL Label policy.
          type: string
          x-field-uid: 1
          x-enum:
            unknown:
              x-field-uid: 1
            push_ipv4:
              x-field-uid: 2
            push_ipv6:
              x-field-uid: 3
            push_ipv4_and_ipv6:
              x-field-uid: 4
            donot_push:
              x-field-uid: 5
          default: push_ipv4_and_ipv6
    Bgp.Attributes.SrPolicy.SegmentList:
      description: |-
        One optional SEGMENT_LIST sub-tlv encoded with type of 128.
        One sub-tlv encodes a single explicit path towards the endpoint as described in 
        section 5.1 of [RFC9256]. 
        The Segment List sub-TLV includes the elements of the paths (i.e., segments) as well 
        as an optional Weight sub-TLV.
        - [.proto :
          // Contains one "segment (label) stack" with its weight. The weight is used for
          // weighted multipath.
          message PaSegmentList {
            message Weight {
              optional uint32 value = 1;
            }
            optional Weight weight = 1;
            repeated PaSegment segments = 2;
          }
        ]
      type: object
      properties:
        weight:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.SegmentList.Weight'
          x-field-uid:  1
        segments:
          type: array
          items:
            $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.SegmentList.Segment'
          x-field-uid:  2
    Bgp.Attributes.SegmentRoutingPolicy.SegmentList.Weight:
      description:
        The optional Weight sub-TLV specifies the weight associated with a given segment list.
        The weight is used for weighted multipath.
      type: object
      properties:
        value:
          description: Value of the weight.
          type: integer
          format: uint32
          default: 0
          x-field-uid: 1
    Bgp.Attributes.SegmentRoutingPolicy.SegmentList.Segment:
      description: |-
        A Segment sub-TLV describes a single segment in a segment list  i.e., a single
        element of the explicit path. The Segment sub-TLVs are optional.
        - [.proto :
          // This defines one segment. The distinction between a "segment" and a "segment
          // identifier" (SID) is basically non-existent; these objects can be seen as
          // either.
          message PaSegment {
            message Flags {  // 8 bits in total.
              // V-flag. Indicates verification is enabled. See section 5,
              // https://tools.ietf.org/html/draft-ietf-spring-segment-routing-policy-01
              optional bool verification = 1;
              // A-flag. Indicates presence of SR Algorithm field applicable to Segment
              // Types 3, 4, and 9.
              optional bool algorithm = 2;
            }
            // Segment identified by MPLS label.
            message MPLS {
              optional uint32 label = 1;          // 20 bits.
              optional uint32 traffic_class = 2;  // 3 bits (TC).
              optional bool bottom_of_stack = 3;  // 1 bit (S).
              optional uint32 time_to_live = 4;   // 8 bits (TTL).
            }
            // SID only, in the form of MPLS Label.
            message Type1 {
              optional Flags flags = 1;
              optional MPLS sid = 2;
            }
            // SID only, in the form of IPv6 address.
            message Type2 {
              optional Flags flags = 1;
              optional monitoring.raven.IPAddressProto sid = 2;
            }
            // IPv4 Node Address with optional SID.
            message Type3 {
              optional Flags flags = 1;
              optional PaAlgorithm algorithm = 2;
              optional monitoring.raven.IPAddressProto node_address = 3;
              optional MPLS sid = 4;
            }
            // IPv6 Node Address with optional SID for SR MPLS.
            message Type4 {
              optional Flags flags = 1;
              optional PaAlgorithm algorithm = 2;
              optional monitoring.raven.IPAddressProto node_address = 3;
              optional MPLS sid = 4;
            }
            // IPv4 Address + index with optional SID.
            message Type5 {
              optional Flags flags = 1;
              optional uint32 local_interface_id = 2;
              optional monitoring.raven.IPAddressProto node_address = 3;
              optional MPLS sid = 4;
            }
            // IPv4 Local and Remote addresses with optional SID.
            message Type6 {
              optional Flags flags = 1;
              optional monitoring.raven.IPAddressProto local_address = 2;
              optional monitoring.raven.IPAddressProto remote_address = 3;
              optional MPLS sid = 4;
            }
            // IPv6 Address + index for local and remote pair with optional SID for SR
            // MPLS.
            message Type7 {
              optional Flags flags = 1;
              optional uint32 local_interface_id = 2;
              optional monitoring.raven.IPAddressProto local_node_address = 3;
              // `remote_interface_id` and `remote_node_address` pair is optional. Both
              // must be present or both must be absent.
              optional uint32 remote_interface_id = 4;
              optional monitoring.raven.IPAddressProto remote_node_address = 5;
              optional MPLS sid = 6;
            }
            // IPv6 Local and Remote addresses with optional SID for SR MPLS.
            message Type8 {
              optional Flags flags = 1;
              optional monitoring.raven.IPAddressProto local_address = 2;
              optional monitoring.raven.IPAddressProto remote_address = 3;
              optional MPLS sid = 4;
            }
            // IPv6 Node Address with optional SID for SRv6.
            message Type9 {
              optional Flags flags = 1;
              optional PaAlgorithm algorithm = 2;
              optional monitoring.raven.IPAddressProto node_address = 3;
              optional monitoring.raven.IPAddressProto sid = 4;
            }
            // IPv6 Address + index for local and remote pair with optional SID for SRv6.
            message Type10 {
              optional Flags flags = 1;
              optional uint32 local_interface_id = 2;
              optional monitoring.raven.IPAddressProto local_node_address = 3;
              // `remote_interface_id` and `remote_node_address` pair is optional. Both
              // must be present or both must be absent.
              optional uint32 remote_interface_id = 4;
              optional monitoring.raven.IPAddressProto remote_node_address = 5;
              optional monitoring.raven.IPAddressProto sid = 6;
            }
            // IPv6 Local and Remote addresses for SRv6.
            message Type11 {
              optional Flags flags = 1;
              optional monitoring.raven.IPAddressProto local_address = 2;
              optional monitoring.raven.IPAddressProto remote_address = 3;
              optional monitoring.raven.IPAddressProto sid = 4;
            }

            oneof segment {
              Type1 type1 = 1;
              Type2 type2 = 2;
              Type3 type3 = 3;
              Type4 type4 = 4;
              Type5 type5 = 5;
              Type6 type6 = 6;
              Type7 type7 = 7;
              Type8 type8 = 8;
              Type9 type9 = 9;
              Type10 type10 = 10;
              Type11 type11 = 11;
            }
          }
        ]
      type: object
      required: [choice]
      properties:
        choice:
          description: |-
            Specify one of the segment types as defined in ietf-idr-segment-routing-te-policy
            - Type  A: SID only, in the form of MPLS Label.
            - Type  B: SID only, in the form of IPv6 Address.
            - Type  C: IPv4 Node Address with optional SID.
            - Type  D: IPv6 Node Address with optional SID for SR MPLS.
            - Type  E: IPv4 Address and index with optional SID.
            - Type  F: IPv4 Local and Remote addresses with optional SID.
            - Type  G: IPv6 Address and index for local and remote pair with optional SID for SR MPLS.
            - Type  H: IPv6 Local and Remote addresses with optional SID for SR MPLS.
            - Type  I: IPv6 Node Address with optional SID for SRv6.
            - Type  J: IPv6 Address and index for local and remote pair with optional SID for SRv6.
            - Type  K: IPv6 Local and Remote addresses for SRv6.
          type: string
          x-field-uid: 1
          x-enum:
            type_a:
              x-field-uid: 1
            type_b:
              x-field-uid: 2
            type_c:
              x-field-uid: 3
            type_d:
              x-field-uid: 4
            type_e:
              x-field-uid: 5
            type_f:
              x-field-uid: 6
            type_g:
              x-field-uid: 7
            type_h:
              x-field-uid: 8
            type_i:
              x-field-uid: 9
            type_j:
              x-field-uid: 10
            type_k:
              x-field-uid: 11
        type_a:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.TypeA'
          x-field-uid: 2     
        type_b:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.TypeB'
          x-field-uid: 3
        type_c:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.TypeC'
          x-field-uid: 4
        type_d:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.TypeD'
          x-field-uid: 5
        type_e:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.TypeE'
          x-field-uid: 6
        type_f:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.TypeF'
          x-field-uid: 7
        type_g:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.TypeG'
          x-field-uid: 8
        type_h:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.TypeH'
          x-field-uid: 9
        type_i:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.TypeI'
          x-field-uid: 10
        type_j:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.TypeJ'
          x-field-uid: 11
        type_k:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.TypeK'
          x-field-uid: 12
    Bgp.Attributes.SegmentRoutingPolicy.TypeA:
      description: |- 
        Type  A: SID only, in the form of MPLS Label.
        It is encoded as a Segment of Type 1 in the SEGMENT_LIST sub-tlv.
      type: object
      properties:
        flags:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.TypeFlags'
          x-field-uid: 1
        mpls_sid:
          $ref: '#/components/schemas/Bgp.Attributes.Sid.Mpls'
          x-field-uid: 2
    Bgp.Attributes.SegmentRoutingPolicy.TypeB:
      description: |- 
        Type B: SID only, in the form of IPv6 address.
        It is encoded as a Segment of Type 2 in the SEGMENT_LIST sub-tlv.
      type: object
      properties:
        flags:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.TypeFlags'
          x-field-uid: 1
        srv6_sid:
          description: >-
            SRv6 SID.
          type: string
          format: ipv6
          default : "0::0"
          x-field-uid: 2
        srv6_endpoint_behavior:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.SRv6SIDEndpointBehaviorAndStructure'
          x-field-uid: 3           
    Bgp.Attributes.SegmentRoutingPolicy.TypeC:
      description: |- 
        Type C: IPv4 Node Address with optional SID.
        It is encoded as a Segment of Type 3 in the SEGMENT_LIST sub-tlv.
      type: object
      properties:
        flags:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.TypeFlags'
          x-field-uid: 1
        sr_algorithm:
          description: >-
            SR Algorithm identifier when A-Flag in on. If A-flag is not enabled, it should be set to 0 on transmission and
            ignored on receipt.
          type: integer
          format: uint32
          maximum: 255
          default: 0
          x-field-uid: 2
        ipv4_node_address:
          description: >-
            IPv4 address representing a node.
          type: string
          format: ipv4
          default: "0.0.0.0"
          x-field-uid: 3
        sr_mpls_sid:
          description: >-
            Optional SR-MPLS SID.
          $ref: '#/components/schemas/Bgp.Attributes.Sid.Mpls'
          x-field-uid: 4
    Bgp.Attributes.SegmentRoutingPolicy.TypeD:
      description: |- 
        Type D: IPv6 Node Address with optional SID for SR MPLS.
        It is encoded as a Segment of Type 4 in the SEGMENT_LIST sub-tlv.        
      type: object
      properties:
        flags:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.TypeFlags'
          x-field-uid: 1
        sr_algorithm:
          description: >-
            SR Algorithm identifier when A-Flag in on. If A-flag is not enabled, it should be set to 0 on transmission and
            ignored on receipt.
          type: integer
          format: uint32
          maximum: 255
          default: 0
          x-field-uid: 2
        ipv6_node_address:
          description: >-
            IPv6 address representing a node.
          type: string
          format: ipv6
          default: "0::0"
          x-field-uid: 3
        sr_mpls_sid:
          description: >-
            Optional SR-MPLS SID.
          $ref: '#/components/schemas/Bgp.Attributes.Sid.Mpls'
          x-field-uid: 4
    Bgp.Attributes.SegmentRoutingPolicy.TypeE:
      description: |- 
        Type E: IPv4 Address and Local Interface ID with optional SID
        It is encoded as a Segment of Type 5 in the SEGMENT_LIST sub-tlv. 
      type: object
      properties:
        flags:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.TypeFlags'
          x-field-uid: 1
        local_interface_id:
          description: >-
            The Interface Index as defined in [RFC8664].
          type: integer
          format: uint32
          default: 0
          x-field-uid: 2
        ipv4_node_address:
          description: >-
            IPv4 address representing a node.
          type: string
          format: ipv4
          default: "0.0.0.0"
          x-field-uid: 3
        sr_mpls_sid:
          description: >-
            Optional SR-MPLS SID.
          $ref: '#/components/schemas/Bgp.Attributes.Sid.Mpls'
          x-field-uid: 4
    Bgp.Attributes.SegmentRoutingPolicy.TypeF:
      description: |- 
        Type F: IPv4 Local and Remote addresses with optional SID.
        It is encoded as a Segment of Type 6 in the SEGMENT_LIST sub-tlv. 
      type: object
      properties:
        flags:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.TypeFlags'
          x-field-uid: 1
        local_ipv4_address:
          description: >-
            Local IPv4 Address.
          type: string
          format: ipv4
          default: "0.0.0.0"
          x-field-uid: 2
        remote_ipv4_address:
          description: >-
            Remote IPv4 Address.
          type: string
          format: ipv4
          default: "0.0.0.0"
          x-field-uid: 3
        sr_mpls_sid:
          description: >-
            Optional SR-MPLS SID.
          $ref: '#/components/schemas/Bgp.Attributes.Sid.Mpls'
          x-field-uid: 4
    Bgp.Attributes.SegmentRoutingPolicy.TypeG:
      description: |- 
        Type G: IPv6 Address, Interface ID for local and remote pair with optional SID for SR MPLS.
        It is encoded as a Segment of Type 7 in the SEGMENT_LIST sub-tlv. 
      type: object
      properties:
        flags:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.TypeFlags'
          x-field-uid: 1
        local_interface_id:
          description: >-
            The local Interface Index as defined in [RFC8664].
          type: integer
          format: uint32
          default: 0
          x-field-uid: 2
        local_ipv6_node_address:
          description: >-
            The IPv6 address representing the local node.
          type: string
          format: ipv6
          default: "0::0"
          x-field-uid: 3
        remote_interface_id:
          description: >-
            The remote Interface Index as defined in [RFC8664].
            The value MAY be set to zero when the local node address and interface identifiers are sufficient to describe the link.
          type: integer
          format: uint32
          default: 0
          x-field-uid: 4
        remote_ipv6_node_address:
          description: >-
            IPv6 address representing the remote node.
            The value MAY be set to zero when the local node address and interface identifiers are sufficient to describe the link.
          type: string
          format: ipv6
          default: "0::0"
          x-field-uid: 5
        sr_mpls_sid:
          description: >-
            Optional SR-MPLS SID.
          $ref: '#/components/schemas/Bgp.Attributes.Sid.Mpls'
          x-field-uid: 6
    Bgp.Attributes.SegmentRoutingPolicy.TypeH:
      description: |- 
        Type H: IPv6 Local and Remote addresses with optional SID for SR MPLS.
        It is encoded as a Segment of Type 8 in the SEGMENT_LIST sub-tlv. 
      type: object
      properties:
        flags:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.TypeFlags'
          x-field-uid: 1
        local_ipv6_address:
          description: >-
            Local IPv6 Address.
          type: string
          format: ipv6
          default: "0::0"
          x-field-uid: 2
        remote_ipv6_address:
          description: >-
            Remote IPv6 Address.
          type: string
          format: ipv6
          default: "0::0"
          x-field-uid: 3
        sr_mpls_sid:
          description: >-
            Optional SR-MPLS SID.
          $ref: '#/components/schemas/Bgp.Attributes.Sid.Mpls'
          x-field-uid: 6
    Bgp.Attributes.SegmentRoutingPolicy.TypeI:
      description: |- 
        Type I: IPv6 Node Address with optional SRv6 SID.
        It is encoded as a Segment of Type 9 in the SEGMENT_LIST sub-tlv. 
      type: object
      properties:
        flags:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.TypeFlags'
          x-field-uid: 1
        sr_algorithm:
          description: >-
            SR Algorithm identifier when A-Flag in on. If A-flag is not enabled, it should be set to 0 on transmission and
            ignored on receipt.
          type: integer
          format: uint32
          maximum: 255
          default: 0
          x-field-uid: 2
        ipv6_node_address:
          description: >-
            IPv6 address representing a node.
          type: string
          format: ipv6
          default: "0::0"
          x-field-uid: 3
        srv6_sid:
          description: >-
            Optional SRv6 SID.
          type: string
          format: ipv6
          default: "0::0"
          x-field-uid: 4
        srv6_endpoint_behavior:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.SRv6SIDEndpointBehaviorAndStructure'
          x-field-uid: 5 
    Bgp.Attributes.SegmentRoutingPolicy.TypeJ:
      description: |- 
        Type J: IPv6 Address, Interface ID for local and remote pair for SRv6 with optional SID.
        It is encoded as a Segment of Type 10 in the SEGMENT_LIST sub-tlv. 
      type: object
      properties:
        flags:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.TypeFlags'
          x-field-uid: 1
        sr_algorithm:
          description: >-
            SR Algorithm identifier when A-Flag in on. If A-flag is not enabled, it should be set to 0 on transmission and
            ignored on receipt.
          type: integer
          format: uint32
          maximum: 255
          default: 0
          x-field-uid: 2
        local_interface_id:
          description: >-
            The local Interface Index as defined in [RFC8664].
          type: integer
          format: uint32
          default: 0
          x-field-uid: 3
        local_ipv6_node_address:
          description: >-
            The IPv6 address representing the local node.
          type: string
          format: ipv6
          default: "0::0"
          x-field-uid: 4
        remote_interface_id:
          description: >-
            The remote Interface Index as defined in [RFC8664].
            The value MAY be set to zero when the local node address and interface identifiers are sufficient to describe the link.
          type: integer
          format: uint32
          default: 0
          x-field-uid: 5
        remote_ipv6_node_address:
          description: >-
            IPv6 address representing the remote node.
            The value MAY be set to zero when the local node address and interface identifiers are sufficient to describe the link.
          type: string
          format: ipv6
          default: "0::0"
          x-field-uid: 6
        srv6_sid:
          description: >-
            Optional SRv6 SID.
          type: string
          format: ipv6
          default: "0::0"
          x-field-uid: 7
        srv6_endpoint_behavior:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.SRv6SIDEndpointBehaviorAndStructure'
          x-field-uid: 8
    Bgp.Attributes.SegmentRoutingPolicy.TypeK:
      description: |- 
        Type K: IPv6 Local and Remote addresses for SRv6 with optional SID.
        It is encoded as a Segment of Type 11 in the SEGMENT_LIST sub-tlv. 
      type: object
      properties:
        flags:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.TypeFlags'
          x-field-uid: 1
        local_ipv6_address:
          description: >-
            Local IPv6 Address.
          type: string
          format: ipv6
          default: "0::0"
          x-field-uid: 2
        remote_ipv6_address:
          description: >-
            Remote IPv6 Address.
          type: string
          format: ipv6
          default: "0::0"
          x-field-uid: 3
        srv6_sid:
          description: >-
            Optional SRv6 SID.
          type: string
          format: ipv6
          default: "0::0"
          x-field-uid: 4
        srv6_endpoint_behavior:
          $ref: '#/components/schemas/Bgp.Attributes.SegmentRoutingPolicy.SRv6SIDEndpointBehaviorAndStructure'
          x-field-uid: 5 
    Bgp.Attributes.SegmentRoutingPolicy.TypeFlags:
      description: |-
        Flags for each Segment in SEGMENT_LIST sub-tlv.
        - V-flag. Indicates verification is enabled. See section 5, of https://datatracker.ietf.org/doc/html/rfc9256
        - A-flag. Indicates presence of SR Algorithm field applicable to Segment Types 3, 4, and 9.
        - B-Flag. Indicates presence of SRv6 Endpoint Behavior and SID Structure encoding.  
        - [.proto:
            message Flags {  // 8 bits in total.
              // V-flag. Indicates verification is enabled. See section 5,
              // https://tools.ietf.org/html/draft-ietf-spring-segment-routing-policy-01
              optional bool verification = 1;
              // A-flag. Indicates presence of SR Algorithm field applicable to Segment
              // Types 3, 4, and 9.
              optional bool algorithm = 2;
        }]
      type: object 
      properties:
        v_flag:
          description: |-
            Indicates verification of segment data in is enabled.            
          type: boolean
          default: false
          x-field-uid: 1
        a_flag:
          description: |-
            Indicates presence of SR Algorithm field applicable to Segment Types 3, 4, and 9.           
          type: boolean
          default: false
          x-field-uid: 2
        b_flag:
          description: |-
            Indicates presence of SRv6 Endpoint Behavior and SID Structure encoding specified in Section 2.4.4.2.4
            of draft-ietf-idr-segment-routing-te-policy.         
          type: boolean
          default: false
          x-field-uid: 3
    Bgp.Attributes.SegmentRoutingPolicy.SRv6SIDEndpointBehaviorAndStructure:
      description: >-
        Configuration for optional SRv6 Endpoint Behavior and SID Structure.
        Summation of lengths for Locator Block, Locator Node,  Function, and Argument MUST be less than or equal to 128.
        - This is specified in draft-ietf-idr-segment-routing-te-policy Section 2.4.4.2.4
      type: object
      properties:
        lb_length:
          description: >-
            SRv6 SID Locator Block length in bits.
          type: integer
          format: uint32
          maximum: 128
          default: 0
          x-field-uid: 1
        ln_length:
          description: >-
            SRv6 SID Locator Node length in bits.
          type: integer
          format: uint32
          maximum: 128
          default: 0
          x-field-uid: 2
        func_length:
          description: >-
            SRv6 SID Function length in bits.
          type: integer
          format: uint32
          maximum: 128
          default: 0
          x-field-uid: 3
        arg_length:
          description: >-
            SRv6 SID Arguments length in bits.
          type: integer
          format: uint32
          maximum: 128
          default: 0
          x-field-uid: 4   

    Bgp.NLRIPrefixSegmentRoutingDistinguisher:
      description: >-
          Optional field in the NLRI carrying the distinguisher for Segment Routing Policy NLRI with SAFI 73.
      type: object 
      properties:
        value:
          description: >-
            The value of the optional Segment Routing distinguisher of the prefix. 
          type: integer
          format: uint32
          default: 1          
          x-field-uid: 1    